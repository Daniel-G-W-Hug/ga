-------------------------------------------------------------------

ega2d sandwich product: rotor * object * rev(rotor):

ega2d sandwich product - basis product table:
[    1,   e1,   e2,  e12 ], 
[   e1,    1,  e12,   e2 ], 
[   e2, -e12,    1,  -e1 ], 
[  e12,  -e2,   e1,   -1 ] 

ega2d sandwich product mv_e * vec -> vec_tmp:
vec_tmp:
[                         0 ] 1,
[ (R.c0 * v.x + R.c1 * v.y) ] e1,
[ (R.c0 * v.y - R.c1 * v.x) ] e2,
[                         0 ] e12

ega2d sandwich product vec_tmp * rev(mv_e) -> vec_res:
[                                                                    0 ] 1,
[  (R.c0 * v.x + R.c1 * v.y) * R.c0 + (R.c0 * v.y - R.c1 * v.x) * R.c1 ] e1,
[ -(R.c0 * v.x + R.c1 * v.y) * R.c1 + (R.c0 * v.y - R.c1 * v.x) * R.c0 ] e2,
[                                                                    0 ] e12

ega2d MANUAL EXTENSION mv_e * vec * rev(mv_e):
[                                                                                  0 ] 1,
[  (R.c0 * v.x * R.c0 + R.c1 * v.y * R.c0) + (R.c0 * v.y * R.c1 - R.c1 * v.x * R.c1) ] e1,
[ -(R.c0 * v.x * R.c1 + R.c1 * v.y * R.c1) + (R.c0 * v.y * R.c0 - R.c1 * v.x * R.c0) ] e2,
[                                                                                  0 ] e12

// reorder and introduce braces again:
[                                                                      0 ] 1,
[  (R.c0 * R.c0 - R.c1 * R.c1) * v.x + 2.0 * R.c0 * R.c1 * v.y           ] e1,
[           -2.0 * R.c0 * R.c1 * v.x + (R.c0 * R.c0 - R.c1 * R.c1) * v.y ] e2,
[                                                                      0 ] e12

-------------------------------------------------------------------

ega3d sandwich product: rotor * object * rev(rotor):

ega3d sandwich product - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ], 
[   e1,    1,  e12, -e31, e123,  -e3,   e2,  e23 ], 
[   e2, -e12,    1,  e23,   e3, e123,  -e1,  e31 ], 
[   e3,  e31, -e23,    1,  -e2,   e1, e123,  e12 ], 
[  e23, e123,  -e3,   e2,   -1, -e12,  e31,  -e1 ], 
[  e31,   e3, e123,  -e1,  e12,   -1, -e23,  -e2 ], 
[  e12,  -e2,   e1, e123, -e31,  e23,   -1,  -e3 ], 
[ e123,  e23,  e31,  e12,  -e1,  -e2,  -e3,   -1 ] 

ega3d sandwich product mv_e * vec -> mv_u_tmp:
mv_u_tmp:
[                                      0 ] 1,
[ (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) ] e1,
[ (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) ] e2,
[ (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) ] e3,
[                                      0 ] e23,
[                                      0 ] e31,
[                                      0 ] e12,
[ (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) ] e123

ega3d sandwich product mv_u_tmp * rev(mv_e) -> mv_u_res:
[                                                                                                                                                                                              0 ] 1,
[  (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c0 + (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c3 - (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c2 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c1 ] e1,
[ -(R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c3 + (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c0 + (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c1 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c2 ] e2,
[  (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c2 - (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c1 + (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c0 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c3 ] e3,
[                                                                                                                                                                                              0 ] e23,
[                                                                                                                                                                                              0 ] e31,
[                                                                                                                                                                                              0 ] e12,
[ -(R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c1 - (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c2 - (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c3 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c0 ] e123

ega3d MANUAL EXTENSION mv_e * vec * rev(mv_e):

// multiply:
[                                                                                                                                                                                              0 ] 1,
[  (R.c0 * R.c0 * v.x - R.c2 * R.c0 * v.z + R.c3 * R.c0 * v.y) + (R.c0 * R.c3 * v.y + R.c1 * R.c3 * v.z - R.c3 * R.c3 * v.x) - (R.c0 * R.c2 * v.z - R.c1 * R.c2 * v.y + R.c2 * R.c2 * v.x) + (R.c1 * R.c1 * v.x + R.c1 * R.c2 * v.y + R.c1 * R.c3 * v.z) ] e1,
[ -(R.c0 * R.c3 * v.x - R.c2 * R.c3 * v.z + R.c3 * R.c3 * v.y) + (R.c0 * R.c0 * v.y + R.c0 * R.c1 * v.z - R.c0 * R.c3 * v.x) + (R.c0 * R.c1 * v.z - R.c1 * R.c1 * v.y + R.c1 * R.c2 * v.x) + (R.c1 * R.c2 * v.x + R.c2 * R.c2 * v.y + R.c2 * R.c3 * v.z) ] e2,
[  (R.c0 * R.c2 * v.x - R.c2 * R.c2 * v.z + R.c2 * R.c3 * v.y) - (R.c0 * R.c1 * v.y + R.c1 * R.c1 * v.z - R.c1 * R.c3 * v.x) + (R.c0 * R.c0 * v.z - R.c0 * R.c1 * v.y + R.c0 * R.c2 * v.x) + (R.c1 * R.c3 * v.x + R.c2 * R.c3 * v.y + R.c3 * R.c3 * v.z) ] e3,
[                                                                                                                                                                                              0 ] e23,
[                                                                                                                                                                                              0 ] e31,
[                                                                                                                                                                                              0 ] e12,
[ 0 ] e123

// normalize signs:
[                                                                                                                                                                                              0 ] 1,
[  ( R.c0 * R.c0 * v.x - R.c2 * R.c0 * v.z + R.c3 * R.c0 * v.y) + ( R.c0 * R.c3 * v.y + R.c1 * R.c3 * v.z - R.c3 * R.c3 * v.x) + (-R.c0 * R.c2 * v.z + R.c1 * R.c2 * v.y - R.c2 * R.c2 * v.x) + (R.c1 * R.c1 * v.x + R.c1 * R.c2 * v.y + R.c1 * R.c3 * v.z) ] e1,
[  (-R.c0 * R.c3 * v.x + R.c2 * R.c3 * v.z - R.c3 * R.c3 * v.y) + ( R.c0 * R.c0 * v.y + R.c0 * R.c1 * v.z - R.c0 * R.c3 * v.x) + ( R.c0 * R.c1 * v.z - R.c1 * R.c1 * v.y + R.c1 * R.c2 * v.x) + (R.c1 * R.c2 * v.x + R.c2 * R.c2 * v.y + R.c2 * R.c3 * v.z) ] e2,
[  ( R.c0 * R.c2 * v.x - R.c2 * R.c2 * v.z + R.c2 * R.c3 * v.y) + (-R.c0 * R.c1 * v.y - R.c1 * R.c1 * v.z + R.c1 * R.c3 * v.x) + ( R.c0 * R.c0 * v.z - R.c0 * R.c1 * v.y + R.c0 * R.c2 * v.x) + (R.c1 * R.c3 * v.x + R.c2 * R.c3 * v.y + R.c3 * R.c3 * v.z) ] e3,
[                                                                                                                                                                                              0 ] e23,
[                                                                                                                                                                                              0 ] e31,
[                                                                                                                                                                                              0 ] e12,
[ 0 ] e123

// reorder and introduce braces again:
[                                                                                                                                                   0 ] 1,
[  (R.c0 * R.c0 + R.c1 * R.c1 - R.c2 * R.c2 - R.c3 * R.c3) * v.x + 2.0 * (R.c0 * R.c3 + R.c1 * R.c2) * v.y + 2.0 * (-R.c0 * R.c2 + R.c1 * R.c3) * v.z ] e1,
[  2.0 * (-R.c0 * R.c3 + R.c1 * R.c2) * v.x + (R.c0 * R.c0 - R.c1 * R.c1 + R.c2 * R.c2 - R.c3 * R.c3) * v.y + 2.0 * (R.c0 * R.c1 + R.c2 * R.c3) * v.z ] e2,
[  2.0 * (R.c0 * R.c2 + R.c1 * R.c3) * v.x + 2.0 * (-R.c0 * R.c1 + R.c2 * R.c3) * v.y + (R.c0 * R.c0 - R.c1 * R.c1 - R.c2 * R.c2 + R.c3 * R.c3) * v.z ] e3,
[                                                                                                                                                   0 ] e23,
[                                                                                                                                                   0 ] e31,
[                                                                                                                                                   0 ] e12,
[                                                                                                                                                   0 ] e123

k00 = R.c0 * R.c0;
k01 = R.c0 * R.c1;
k02 = R.c0 * R.c2;
k03 = R.c0 * R.c3;
k11 = R.c1 * R.c1;
k12 = R.c1 * R.c2;
k13 = R.c1 * R.c3;
k22 = R.c2 * R.c2;
k23 = R.c2 * R.c3;
k33 = R.c3 * R.c3;

[                                                                                                             0 ] 1,
[      ( k00 + k11 - k22 - k33) * v.x + 2.0 * ( k03 + k12            ) * v.y + 2.0 * (-k02 + k13            ) * v.z ] e1,
[  2.0 * (-k03 + k12            ) * v.x +     ( k00 - k11 + k22 - k33) * v.y + 2.0 * ( k01 + k23            ) * v.z ] e2,
[  2.0 * ( k02 + k13            ) * v.x + 2.0 * (-k01 + k23            ) * v.y +     ( k00 - k11 - k22 + k33) * v.z ] e3,
[                                                                                                             0 ] e23,
[                                                                                                             0 ] e31,
[                                                                                                             0 ] e12,
[                                                                                                             0 ] e123

m11 = k00 + k11 - k22 - k33;
m12 = 2.0 * ( k03 + k12);
m13 = 2.0 * (-k02 + k13);
m21 = 2.0 * (-k03 + k12);
m22 = k00 - k11 + k22 - k33;
m23 = 2.0 * ( k01 + k23);
m31 = 2.0 * ( k02 + k13);
m32 = 2.0 * (-k01 + k23);
m33 = k00 - k11 - k22 + k33;

=> v' = m * v; // Matrix * Vector  => minimize effort for repeated application

-------------------------------------------------------------------

ega3d sandwich product mv_e * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[  (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) ] e23,
[  (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) ] e31,
[  (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) ] e12,
[                                       0 ] e123

ega3d sandwich product mv_e_tmp * rev(mv_e) -> mv_e_res:
[  (-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c0 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c1 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c2 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c3 ] 1,
[                                                                                                                                                                                               0 ] e1,
[                                                                                                                                                                                               0 ] e2,
[                                                                                                                                                                                               0 ] e3,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c1 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c0 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c3 - (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c2 ] e23,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c2 - (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c3 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c0 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c1 ] e31,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c3 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c2 - (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c1 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c0 ] e12,
[                                                                                                                                                                                               0 ] e123

ega3d MANUAL EXTENSION mv_e * bivec * rev(mv_e):

// multiply:
[ 0 ] 1,
[                                                                                                                                                                                               0 ] e1,
[                                                                                                                                                                                               0 ] e2,
[                                                                                                                                                                                               0 ] e3,
[ -(-R.c1 * R.c1 * B.x - R.c1 * R.c2 * B.y - R.c1 * R.c3 * B.z) + (R.c0 * R.c0 * B.x - R.c0 * R.c2 * B.z + R.c0 * R.c3 * B.y) + (R.c0 * R.c3 * B.y + R.c1 * R.c3 * B.z - R.c3 * R.c3 * B.x) - (R.c0 * R.c2 * B.z - R.c1 * R.c2 * B.y + R.c2 * R.c2 * B.x) ] e23,
[ -(-R.c1 * R.c2 * B.x - R.c2 * R.c2 * B.y - R.c2 * R.c3 * B.z) - (R.c0 * R.c3 * B.x - R.c2 * R.c3 * B.z + R.c3 * R.c3 * B.y) + (R.c0 * R.c0 * B.y + R.c0 * R.c1 * B.z - R.c0 * R.c3 * B.x) + (R.c0 * R.c1 * B.z - R.c1 * R.c1 * B.y + R.c1 * R.c2 * B.x) ] e31,
[ -(-R.c1 * R.c3 * B.x - R.c2 * R.c3 * B.y - R.c3 * R.c3 * B.z) + (R.c0 * R.c2 * B.x - R.c2 * R.c2 * B.z + R.c2 * R.c3 * B.y) - (R.c0 * R.c1 * B.y + R.c1 * R.c1 * B.z - R.c1 * R.c3 * B.x) + (R.c0 * R.c0 * B.z - R.c0 * R.c1 * B.y + R.c0 * R.c2 * B.x) ] e12,
[                                                                                                                                                                                               0 ] e123

// normalize signs:
[ 0 ] 1,
[                                                                                                                                                                                               0 ] e1,
[                                                                                                                                                                                               0 ] e2,
[                                                                                                                                                                                               0 ] e3,
[ ( + R.c1 * R.c1 * B.x + R.c1 * R.c2 * B.y + R.c1 * R.c3 * B.z) + ( R.c0 * R.c0 * B.x - R.c0 * R.c2 * B.z + R.c0 * R.c3 * B.y) + ( R.c0 * R.c3 * B.y + R.c1 * R.c3 * B.z - R.c3 * R.c3 * B.x) + (-R.c0 * R.c2 * B.z + R.c1 * R.c2 * B.y - R.c2 * R.c2 * B.x) ] e23,
[ ( + R.c1 * R.c2 * B.x + R.c2 * R.c2 * B.y + R.c2 * R.c3 * B.z) + (-R.c0 * R.c3 * B.x + R.c2 * R.c3 * B.z - R.c3 * R.c3 * B.y) + ( R.c0 * R.c0 * B.y + R.c0 * R.c1 * B.z - R.c0 * R.c3 * B.x) + ( R.c0 * R.c1 * B.z - R.c1 * R.c1 * B.y + R.c1 * R.c2 * B.x) ] e31,
[ ( + R.c1 * R.c3 * B.x + R.c2 * R.c3 * B.y + R.c3 * R.c3 * B.z) + ( R.c0 * R.c2 * B.x - R.c2 * R.c2 * B.z + R.c2 * R.c3 * B.y) + (-R.c0 * R.c1 * B.y - R.c1 * R.c1 * B.z + R.c1 * R.c3 * B.x) + ( R.c0 * R.c0 * B.z - R.c0 * R.c1 * B.y + R.c0 * R.c2 * B.x) ] e12,
[                                                                                                                                                                                               0 ] e123

// reorder and introduce braces again:
[ 0 ] 1,
[                                                                                                                                                   0 ] e1,
[                                                                                                                                                   0 ] e2,
[                                                                                                                                                   0 ] e3,
[ (R.c0 * R.c0 + R.c1 * R.c1 - R.c2 * R.c2 - R.c3 * R.c3) * B.x + 2.0 * ( R.c0 * R.c3 + R.c1 * R.c2) * B.y + 2.0 * (-R.c0 * R.c2 + R.c1 * R.c3) * B.z ] e23,
[  2.0 * (-R.c0 * R.c3 + R.c1 * R.c2) * B.x + (R.c0 * R.c0 - R.c1 * R.c1 + R.c2 * R.c2 - R.c3 * R.c3) * B.y + 2.0 * (R.c0 * R.c1 + R.c2 * R.c3) * B.z ] e31,
[  2.0 * (R.c0 * R.c2 + R.c1 * R.c3) * B.x + 2.0 * (-R.c0 * R.c1 + R.c2 * R.c3) * B.y + (R.c0 * R.c0 - R.c1 * R.c1 - R.c2 * R.c2 + R.c3 * R.c3) * B.z ] e12,
[                                                                                                                                                   0 ] e123

k00 = R.c0 * R.c0;
k01 = R.c0 * R.c1;
k02 = R.c0 * R.c2;
k03 = R.c0 * R.c3;
k11 = R.c1 * R.c1;
k12 = R.c1 * R.c2;
k13 = R.c1 * R.c3;
k22 = R.c2 * R.c2;
k23 = R.c2 * R.c3;
k33 = R.c3 * R.c3;

[                                                                                                            0 ] 1,
[                                                                                                            0 ] e1,
[                                                                                                            0 ] e2,
[                                                                                                            0 ] e3,
[     ( k00 + k11 - k22 - k33) * B.x + 2.0 * ( k03 + k12            ) * B.y + 2.0 * (-k02 + k13            ) * B.z ] e23,
[ 2.0 * (-k03 + k12            ) * B.x +     ( k00 - k11 + k22 - k33) * B.y + 2.0 * ( k01 + k23            ) * B.z ] e31,
[ 2.0 * ( k02 + k13            ) * B.x + 2.0 * (-k01 + k23            ) * B.y +     ( k00 - k11 - k22 + k33) * B.z ] e12,
[                                                                                                            0 ] e123

m11 = k00 + k11 - k22 - k33;
m12 = 2.0 * ( k03 + k12);
m13 = 2.0 * (-k02 + k13);
m21 = 2.0 * (-k03 + k12);
m22 = k00 - k11 + k22 - k33;
m23 = 2.0 * ( k01 + k23);
m31 = 2.0 * ( k02 + k13);
m32 = 2.0 * (-k01 + k23);
m33 = k00 - k11 - k22 + k33;

=> B' = m * B; // Matrix * Vector  => minimize effort for repeated application  (same matrix as for a vector!)

-------------------------------------------------------------------

pga2dp regressive sandwich product - motor * object * rrev(motor):

pga2dp regressive sandwich product - basis product table:
[     0,     0,     0,   e12,   -e1,   -e2,     0,     1 ], 
[     0,     0,     0,   -e2,    -1,   e12,     0,    e1 ], 
[     0,     0,     0,    e1,  -e12,    -1,     0,    e2 ], 
[   e12,    e2,   -e1, -e321,   e31,  -e23,    -1,    e3 ], 
[   -e1,    -1,   e12,  -e31,  e321,   -e3,    e2,   e23 ], 
[   -e2,  -e12,    -1,   e23,    e3,  e321,   -e1,   e31 ], 
[     0,     0,     0,    -1,   -e2,    e1,     0,   e12 ], 
[     1,    e1,    e2,    e3,   e23,   e31,   e12,  e321 ] 

pga2dp regressive sandwich product rgpr(mv_u, vec) -> mv_u_tmp:
mv_u_tmp:
[                                       0 ] 1,
[  (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) ] e1,
[ (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) ] e2,
[                            (R.c3 * v.z) ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                           (-R.c2 * v.z) ] e321

pga2dp regressive sandwich product mv_u_tmp * rrev(mv_u) -> mv_u_res:
[                                                                                                                                           0 ] 1,
[ (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) * R.c3 - (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) * R.c2 + (R.c3 * v.z) * R.c1 - (-R.c2 * v.z) * R.c0 ] e1,
[ (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) * R.c2 + (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) * R.c3 - (R.c3 * v.z) * R.c0 - (-R.c2 * v.z) * R.c1 ] e2,
[                                                                                                  (R.c3 * v.z) * R.c3 - (-R.c2 * v.z) * R.c2 ] e3,
[                                                                                                                                           0 ] e23,
[                                                                                                                                           0 ] e31,
[                                                                                                                                           0 ] e12,
[                                                                                                  (R.c3 * v.z) * R.c2 + (-R.c2 * v.z) * R.c3 ] e321

pga2dp MANUAL EXTENSION mv_u * vec * rrev(mv_u):

// multiply:
[                                                                                                                                                                       0 ] 1,
[ (R.c1 * R.c3 * v.z - R.c2 * R.c3 * v.y + R.c3 * R.c3 * v.x) - (-R.c0 * R.c2 * v.z + R.c2 * R.c2 * v.x + R.c2 * R.c3 * v.y) + (R.c1 * R.c3 * v.z) - (-R.c0 * R.c2 * v.z) ] e1,
[ (R.c1 * R.c2 * v.z - R.c2 * R.c2 * v.y + R.c2 * R.c3 * v.x) + (-R.c0 * R.c3 * v.z + R.c2 * R.c3 * v.x + R.c3 * R.c3 * v.y) - (R.c0 * R.c3 * v.z) - (-R.c1 * R.c2 * v.z) ] e2,
[                                                                                                                              (R.c3 * R.c3 * v.z) - (-R.c2 * R.c2 * v.z) ] e3,
[                                                                                                                                                                       0 ] e23,
[                                                                                                                                                                       0 ] e31,
[                                                                                                                                                                       0 ] e12,
[                                                                                                                                                                       0 ] e321

// normalize signs:
[                                                                                                                                                                       0 ] 1,
[ (R.c1 * R.c3 * v.z - R.c2 * R.c3 * v.y + R.c3 * R.c3 * v.x) + ( R.c0 * R.c2 * v.z - R.c2 * R.c2 * v.x - R.c2 * R.c3 * v.y) + ( R.c1 * R.c3 * v.z) + (R.c0 * R.c2 * v.z) ] e1,
[ (R.c1 * R.c2 * v.z - R.c2 * R.c2 * v.y + R.c2 * R.c3 * v.x) + (-R.c0 * R.c3 * v.z + R.c2 * R.c3 * v.x + R.c3 * R.c3 * v.y) + (-R.c0 * R.c3 * v.z) + (R.c1 * R.c2 * v.z) ] e2,
[                                                                                                                              ( R.c3 * R.c3 * v.z) + (R.c2 * R.c2 * v.z) ] e3,
[                                                                                                                                                                       0 ] e23,
[                                                                                                                                                                       0 ] e31,
[                                                                                                                                                                       0 ] e12,
[                                                                                                                                                                       0 ] e321

// reorder and introduce braces again:
[                                                                                                       0 ] 1,
[  (-R.c2 * R.c2 + R.c3 * R.c3) * v.x - 2.0 * R.c2 * R.c3 * v.y + 2.0 * (R.c0 * R.c2 + R.c1 * R.c3) * v.z ] e1,
[ 2.0 * R.c2 * R.c3 * v.x + (-R.c2 * R.c2 + R.c3 * R.c3) * v.y + 2.0 * (-R.c0 * R.c3 + R.c1 * R.c2) * v.z ] e2,
[                                                                       (R.c2 * R.c2 + R.c3 * R.c3) * v.z ] e3,
[                                                                                                       0 ] e23,
[                                                                                                       0 ] e31,
[                                                                                                       0 ] e12,
[                                                                                                       0 ] e321

k02 = R.c0 * R.c2;
k03 = R.c0 * R.c3;
k12 = R.c1 * R.c2;
k13 = R.c1 * R.c3;
k22 = R.c2 * R.c2;
k23 = R.c2 * R.c3;
k33 = R.c3 * R.c3;

[                                                                  0 ] 1,
[ (-k22 + k33) * v.x - ( 2.0 * k23) * v.y + 2.0 * ( k02 + k13) * v.z ] e1,
[    2.0 * k23 * v.x + (-k22 + k33) * v.y + 2.0 * (-k03 + k12) * v.z ] e2,
[                                                 ( k22 + k33) * v.z ] e3,
[                                                                  0 ] e23,
[                                                                  0 ] e31,
[                                                                  0 ] e12,
[                                                                  0 ] e321

m11 = -k22 + k33;
m12 = -2.0 * k23;
m13 = 2.0 * (k02 + k13);
m21 = 2.0 * k23;
m22 = (-k22 + k33);
m23 = 2.0 * (-k03 + k12);
m31 = 0;
m32 = 0;
m33 = k22 + k33;

=> v' = m * v; // Matrix * Vector
=> can be used to minimize effort for repeated application of same motor

-------------------------------------------------------------------

pga2dp regressive sandwich product mv_u * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[              (-R.c2 * B.y + R.c3 * B.x) ] e23,
[               (R.c2 * B.x + R.c3 * B.y) ] e31,
[  (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) ] e12,
[                                       0 ] e321

pga2dp regressive sandwich product mv_e_tmp * rrev(mv_u) -> mv_e_res:
[  (-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) * R.c3 + (-R.c2 * B.y + R.c3 * B.x) * R.c0 + (R.c2 * B.x + R.c3 * B.y) * R.c1 + (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) * R.c2 ] 1,
[                                                                                                                                                                      0 ] e1,
[                                                                                                                                                                      0 ] e2,
[                                                                                                                                                                      0 ] e3,
[                                                                                                   (-R.c2 * B.y + R.c3 * B.x) * R.c3 - (R.c2 * B.x + R.c3 * B.y) * R.c2 ] e23,
[                                                                                                   (-R.c2 * B.y + R.c3 * B.x) * R.c2 + (R.c2 * B.x + R.c3 * B.y) * R.c3 ] e31,
[ -(-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) * R.c2 - (-R.c2 * B.y + R.c3 * B.x) * R.c1 + (R.c2 * B.x + R.c3 * B.y) * R.c0 + (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) * R.c3 ] e12,
[                                                                                                                                                                      0 ] e321

pga2dp MANUAL EXTENSION mv_u * bivec * rrev(mv_u):

// multiply:
[  0 ] 1,
[                                                                                                                                                                      0 ] e1,
[                                                                                                                                                                      0 ] e2,
[                                                                                                                                                                      0 ] e3,
[                                                                                                   (-R.c2 * R.c3 * B.y + R.c3 * R.c3 * B.x) - (R.c2 * R.c2 * B.x + R.c2 * R.c3 * B.y) ] e23,
[                                                                                                   (-R.c2 * R.c2 * B.y + R.c2 * R.c3 * B.x) + (R.c2 * R.c3 * B.x + R.c3 * R.c3 * B.y) ] e31,
[ -(-R.c0 * R.c2 * B.x - R.c1 * R.c2 * B.y - R.c2 * R.c2 * B.z) - (- R.c1 * R.c2 * B.y + R.c1 * R.c3 * B.x) + (R.c0 * R.c2 * B.x + R.c0 * R.c3 * B.y) + (R.c0 * R.c3 * B.y - R.c1 * R.c3 * B.x + R.c3 * R.c3 * B.z) ] e12,
[                                                                                                                                                                      0 ] e321

// normalize signs:
[                                                                                                                                                0 ] 1,
[                                                                                                                                                0 ] e1,
[                                                                                                                                                0 ] e2,
[                                                                                                                                                0 ] e3,
[                                                              (-R.c2 * R.c3 * B.y + R.c3 * R.c3 * B.x) + (-R.c2 * R.c2 * B.x - R.c2 * R.c3 * B.y) ] e23,
[                                                              (-R.c2 * R.c2 * B.y + R.c2 * R.c3 * B.x) + ( R.c2 * R.c3 * B.x + R.c3 * R.c3 * B.y) ] e31,
[  ( R.c0 * R.c2 * B.x + R.c1 * R.c2 * B.y + R.c2 * R.c2 * B.z) + ( R.c1 * R.c2 * B.y - R.c1 * R.c3 * B.x) + (R.c0 * R.c2 * B.x + R.c0 * R.c3 * B.y) + (R.c0 * R.c3 * B.y - R.c1 * R.c3 * B.x + R.c3 * R.c3 * B.z) ] e12,
[                                                                                                                                                0 ] e321

// reorder and introduce braces again:
[                                                                                                                     0 ] 1,
[                                                                                                                     0 ] e1,
[                                                                                                                     0 ] e2,
[                                                                                                                     0 ] e3,
[  (-R.c2 * R.c2 + R.c3 * R.c3) * B.x - 2.0 * R.c2 * R.c3 * B.y                                                         ] e23,
[ 2.0 * R.c2 * R.c3 * B.x + (-R.c2 * R.c2 + R.c3 * R.c3) * B.y                                                         ] e31,
[ 2.0 * (R.c0 * R.c2 - R.c1 * R.c3) * B.x + 2.0 * (R.c0 * R.c3 + R.c1 * R.c2) * B.y + (R.c2 * R.c2 + R.c3 * R.c3) * B.z ] e12,
[                                                                                                                     0 ] e321

k02 = R.c0 * R.c2;
k03 = R.c0 * R.c3;
k12 = R.c1 * R.c2;
k13 = R.c1 * R.c3;
k22 = R.c2 * R.c2;
k23 = R.c2 * R.c3;
k33 = R.c3 * R.c3;

[                                                                      0 ] e1,
[                                                                      0 ] e2,
[                                                                      0 ] e3,
[ (-k22 + k33)      * B.x - 2.0 * k23.         * B.y                     ] e23,
[ 2.0 * k23         * B.x + (-k22 + k33)       * B.y                     ] e31,
[ 2.0 * (k02 - k13) * B.x + 2.0 * (k12 + k03 ) * B.y + (k22 + k33) * B.z ] e12,
[                                                                      0 ] e321

m11 = -k22 + k33;
m12 = -2.0 * k23;
m13 = 0;
m21 = 2.0 * k23;
m22 = -k22 + k33;
m23 = 0;
m31 = 2.0 * (k02 - k13);
m32 = 2.0 * (k12 + k03);
m33 = k22 + k33;

=> B' = m * B; // Matrix * Vector
=> can be used to minimize effort for repeated application of same motor

-------------------------------------------------------------------

pga3dp regressive sandwich product - motor * object * rrev(motor):

pga3dp regressive sandwich product - basis product table:
[      0,      0,      0,      0,   e321,    e23,    e31,    e12,      0,      0,      0,     e1,     e2,     e3,      0,      1 ], 
[      0,      0,      0,      0,   -e23,  -e321,     e3,    -e2,      0,      0,      0,      1,   -e12,    e31,      0,     e1 ], 
[      0,      0,      0,      0,   -e31,    -e3,  -e321,     e1,      0,      0,      0,    e12,      1,   -e23,      0,     e2 ], 
[      0,      0,      0,      0,   -e12,     e2,    -e1,  -e321,      0,      0,      0,   -e31,    e23,      1,      0,     e3 ], 
[  -e321,    e23,    e31,    e12, -e1234,   e423,   e431,   e412,    -e1,    -e2,    -e3,   -e41,   -e42,   -e43,      1,     e4 ], 
[    e23,  -e321,     e3,    -e2,   e423, -e1234,    e43,   -e42,     -1,    e12,   -e31,    -e4,   e412,  -e431,     e1,    e41 ], 
[    e31,    -e3,  -e321,     e1,   e431,   -e43, -e1234,    e41,   -e12,     -1,    e23,  -e412,    -e4,   e423,     e2,    e42 ], 
[    e12,     e2,    -e1,  -e321,   e412,    e42,   -e41, -e1234,    e31,   -e23,     -1,   e431,  -e423,    -e4,     e3,    e43 ], 
[      0,      0,      0,      0,     e1,     -1,    e12,   -e31,      0,      0,      0,  -e321,     e3,    -e2,      0,    e23 ], 
[      0,      0,      0,      0,     e2,   -e12,     -1,    e23,      0,      0,      0,    -e3,  -e321,     e1,      0,    e31 ], 
[      0,      0,      0,      0,     e3,    e31,   -e23,     -1,      0,      0,      0,     e2,    -e1,  -e321,      0,    e12 ], 
[    -e1,     -1,    e12,   -e31,   -e41,    -e4,   e412,  -e431,   e321,    -e3,     e2,  e1234,   -e43,    e42,    e23,   e423 ], 
[    -e2,   -e12,     -1,    e23,   -e42,  -e412,    -e4,   e423,     e3,   e321,    -e1,    e43,  e1234,   -e41,    e31,   e431 ], 
[    -e3,    e31,   -e23,     -1,   -e43,   e431,  -e423,    -e4,    -e2,     e1,   e321,   -e42,    e41,  e1234,    e12,   e412 ], 
[      0,      0,      0,      0,     -1,     e1,     e2,     e3,      0,      0,      0,   -e23,   -e31,   -e12,      0,   e321 ], 
[      1,     e1,     e2,     e3,     e4,    e41,    e42,    e43,    e23,    e31,    e12,   e423,   e431,   e412,   e321,  e1234 ] 

pga3dp regressive sandwich product mv_e * vec -> mv_u_tmp:
mv_u_tmp:
[                                                    0 ] 1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) ] e1,
[ (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) ] e2,
[  (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) ] e3,
[                                         (R.c7 * v.w) ] e4,
[                                                    0 ] e41,
[                                                    0 ] e42,
[                                                    0 ] e43,
[                                                    0 ] e23,
[                                                    0 ] e31,
[                                                    0 ] e12,
[                                         (R.c1 * v.w) ] e423,
[                                         (R.c2 * v.w) ] e431,
[                                         (R.c3 * v.w) ] e412,
[  (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) ] e321,
[                                                    0 ] e1234

pga3dp regressive sandwich product mv_u_tmp * rrev(mv_e) -> mv_u_res:
[                                                                                                                                                                                                                                                                                                                                           0 ] 1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c7 - (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c3 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c2 + (R.c7 * v.w) * R.c4 - (R.c1 * v.w) * R.c0 + (R.c2 * v.w) * R.c6 - (R.c3 * v.w) * R.c5 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c1 ] e1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c3 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c7 - (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c1 + (R.c7 * v.w) * R.c5 - (R.c1 * v.w) * R.c6 - (R.c2 * v.w) * R.c0 + (R.c3 * v.w) * R.c4 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c2 ] e2,
[ -(R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c2 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c1 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c7 + (R.c7 * v.w) * R.c6 + (R.c1 * v.w) * R.c5 - (R.c2 * v.w) * R.c4 - (R.c3 * v.w) * R.c0 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c3 ] e3,
[                                                                                                                                                                                                                                                       (R.c7 * v.w) * R.c7 + (R.c1 * v.w) * R.c1 + (R.c2 * v.w) * R.c2 + (R.c3 * v.w) * R.c3 ] e4,
[                                                                                                                                                                                                                                                                                                                                           0 ] e41,
[                                                                                                                                                                                                                                                                                                                                           0 ] e42,
[                                                                                                                                                                                                                                                                                                                                           0 ] e43,
[                                                                                                                                                                                                                                                                                                                                           0 ] e23,
[                                                                                                                                                                                                                                                                                                                                           0 ] e31,
[                                                                                                                                                                                                                                                                                                                                           0 ] e12,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c1 + (R.c1 * v.w) * R.c7 - (R.c2 * v.w) * R.c3 + (R.c3 * v.w) * R.c2 ] e423,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c2 + (R.c1 * v.w) * R.c3 + (R.c2 * v.w) * R.c7 - (R.c3 * v.w) * R.c1 ] e431,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c3 - (R.c1 * v.w) * R.c2 + (R.c2 * v.w) * R.c1 + (R.c3 * v.w) * R.c7 ] e412,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c1 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c2 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c3 - (R.c7 * v.w) * R.c0 - (R.c1 * v.w) * R.c4 - (R.c2 * v.w) * R.c5 - (R.c3 * v.w) * R.c6 + (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c7 ] e321,
[                                                                                                                                                                                                                                                                                                                                           0 ] e1234

pga3dp MANUAL EXTENSION mv_e * vec * rrev(mv_e):

// multiply:
[                                                                                                                                                                                                                                                      0 ] 1,
[  (R.c2 * R.c7 * v.z - R.c3 * R.c7 * v.y + R.c4 * R.c7 * v.w + R.c7 * R.c7 * v.x) - (-R.c1 * R.c3 * v.z + R.c3 * R.c3 * v.x + R.c3 * R.c5 * v.w + R.c3 * R.c7 * v.y) + (R.c1 * R.c2 * v.y - R.c2 * R.c2 * v.x + R.c2 * R.c6 * v.w + R.c2 * R.c7 * v.z) + (R.c4 * R.c7 * v.w - R.c0 * R.c1 * v.w + R.c2 * R.c6 * v.w - R.c3 * R.c5 * v.w) - (R.c0 * R.c1 * v.w - R.c1 * R.c1 * v.x - R.c1 * R.c2 * v.y - R.c1 * R.c3 * v.z) ] e1,
[  (R.c2 * R.c3 * v.z - R.c3 * R.c3 * v.y + R.c3 * R.c4 * v.w + R.c3 * R.c7 * v.x) + (-R.c1 * R.c7 * v.z + R.c3 * R.c7 * v.x + R.c5 * R.c7 * v.w + R.c7 * R.c7 * v.y) - (R.c1 * R.c1 * v.y - R.c1 * R.c2 * v.x + R.c1 * R.c6 * v.w + R.c1 * R.c7 * v.z) + (R.c5 * R.c7 * v.w - R.c1 * R.c6 * v.w - R.c0 * R.c2 * v.w + R.c3 * R.c4 * v.w) - (R.c0 * R.c2 * v.w - R.c1 * R.c2 * v.x - R.c2 * R.c2 * v.y - R.c2 * R.c3 * v.z) ] e2,
[ -(R.c2 * R.c2 * v.z - R.c2 * R.c3 * v.y + R.c2 * R.c4 * v.w + R.c2 * R.c7 * v.x) + (-R.c1 * R.c1 * v.z + R.c1 * R.c3 * v.x + R.c1 * R.c5 * v.w + R.c1 * R.c7 * v.y) + (R.c1 * R.c7 * v.y - R.c2 * R.c7 * v.x + R.c6 * R.c7 * v.w + R.c7 * R.c7 * v.z) + (R.c6 * R.c7 * v.w + R.c1 * R.c5 * v.w - R.c2 * R.c4 * v.w - R.c0 * R.c3 * v.w) - (R.c0 * R.c3 * v.w - R.c1 * R.c3 * v.x - R.c2 * R.c3 * v.y - R.c3 * R.c3 * v.z) ] e3,
[                                                                                                                                                                  (R.c7 * R.c7 * v.w) + (R.c1 * R.c1 * v.w) + (R.c2 * R.c2 * v.w) + (R.c3 * R.c3 * v.w) ] e4,
[                                                                                                                                                                                                                                                      0 ] e41,
[                                                                                                                                                                                                                                                      0 ] e42,
[                                                                                                                                                                                                                                                      0 ] e43,
[                                                                                                                                                                                                                                                      0 ] e23,
[                                                                                                                                                                                                                                                      0 ] e31,
[                                                                                                                                                                                                                                                      0 ] e12,
[                                                                                                                                                                                                                                                      0 ] e423,
[                                                                                                                                                                                                                                                      0 ] e431,
[                                                                                                                                                                                                                                                      0 ] e412,
[                                                                                                                                                                                                                                                      0 ] e321,
[                                                                                                                                                                                                                                                      0 ] e1234

// normalize signs:
[                                                                                                                                                                                                                                                      0 ] 1,
[ ( R.c2 * R.c7 * v.z - R.c3 * R.c7 * v.y + R.c4 * R.c7 * v.w + R.c7 * R.c7 * v.x) + ( R.c1 * R.c3 * v.z - R.c3 * R.c3 * v.x - R.c3 * R.c5 * v.w - R.c3 * R.c7 * v.y) + ( R.c1 * R.c2 * v.y - R.c2 * R.c2 * v.x + R.c2 * R.c6 * v.w + R.c2 * R.c7 * v.z) + (R.c4 * R.c7 * v.w - R.c0 * R.c1 * v.w + R.c2 * R.c6 * v.w - R.c3 * R.c5 * v.w) + (-R.c0 * R.c1 * v.w + R.c1 * R.c1 * v.x + R.c1 * R.c2 * v.y + R.c1 * R.c3 * v.z) ] e1,
[ ( R.c2 * R.c3 * v.z - R.c3 * R.c3 * v.y + R.c3 * R.c4 * v.w + R.c3 * R.c7 * v.x) + (-R.c1 * R.c7 * v.z + R.c3 * R.c7 * v.x + R.c5 * R.c7 * v.w + R.c7 * R.c7 * v.y) + (-R.c1 * R.c1 * v.y + R.c1 * R.c2 * v.x - R.c1 * R.c6 * v.w - R.c1 * R.c7 * v.z) + (R.c5 * R.c7 * v.w - R.c1 * R.c6 * v.w - R.c0 * R.c2 * v.w + R.c3 * R.c4 * v.w) + (-R.c0 * R.c2 * v.w + R.c1 * R.c2 * v.x + R.c2 * R.c2 * v.y + R.c2 * R.c3 * v.z) ] e2,
[ (-R.c2 * R.c2 * v.z + R.c2 * R.c3 * v.y - R.c2 * R.c4 * v.w - R.c2 * R.c7 * v.x) + (-R.c1 * R.c1 * v.z + R.c1 * R.c3 * v.x + R.c1 * R.c5 * v.w + R.c1 * R.c7 * v.y) + ( R.c1 * R.c7 * v.y - R.c2 * R.c7 * v.x + R.c6 * R.c7 * v.w + R.c7 * R.c7 * v.z) + (R.c6 * R.c7 * v.w + R.c1 * R.c5 * v.w - R.c2 * R.c4 * v.w - R.c0 * R.c3 * v.w) + (-R.c0 * R.c3 * v.w + R.c1 * R.c3 * v.x + R.c2 * R.c3 * v.y + R.c3 * R.c3 * v.z) ] e3,
[                                                                                                                                                                  (R.c7 * R.c7 * v.w) + (R.c1 * R.c1 * v.w) + (R.c2 * R.c2 * v.w) + (R.c3 * R.c3 * v.w) ] e4,
[                                                                                                                                                                                                                                                      0 ] e41,
[                                                                                                                                                                                                                                                      0 ] e42,
[                                                                                                                                                                                                                                                      0 ] e43,
[                                                                                                                                                                                                                                                      0 ] e23,
[                                                                                                                                                                                                                                                      0 ] e31,
[                                                                                                                                                                                                                                                      0 ] e12,
[                                                                                                                                                                                                                                                      0 ] e423,
[                                                                                                                                                                                                                                                      0 ] e431,
[                                                                                                                                                                                                                                                      0 ] e412,
[                                                                                                                                                                                                                                                      0 ] e321,
[                                                                                                                                                                                                                                                      0 ] e1234

// reorder and introduce braces again:
[                                                                                                                                                                                                                                                      0 ] 1,
[  (R.c1 * R.c1 - R.c2 * R.c2 - R.c3 * R.c3 + R.c7 * R.c7) * v.x + 2.0 * (R.c1 * R.c2 - R.c3 * R.c7) * v.y + 2.0 * ( R.c1 * R.c3 + R.c2 * R.c7) * v.z + 2.0 * (-R.c0 * R.c1 + R.c2 * R.c6 - R.c3 * R.c5 + R.c4 * R.c7) * v.w ] e1,
[ 2.0 * (R.c1 * R.c2 + R.c3 * R.c7) * v.x + (-R.c1 * R.c1 + R.c2 * R.c2 - R.c3 * R.c3 + R.c7 * R.c7) * v.y + 2.0 * (-R.c1 * R.c7 + R.c2 * R.c3) * v.z + 2.0 * (-R.c0 * R.c2 - R.c1 * R.c6 + R.c3 * R.c4 + R.c5 * R.c7) * v.w ] e2,
[  2.0 * (R.c1 * R.c3 - R.c2 * R.c7) * v.x + 2.0 * (R.c1 * R.c7 + R.c2 * R.c3) * v.y + (-R.c1 * R.c1 - R.c2 * R.c2 + R.c3 * R.c3 + R.c7 * R.c7) * v.z + 2.0 * (-R.c0 * R.c3 + R.c1 * R.c5 - R.c2 * R.c4 + R.c6 * R.c7) * v.w ] e3,
[                                                                                                                                                              (R.c1 * R.c1 + R.c2 * R.c2 + R.c3 * R.c3 + R.c7 * R.c7) * v.w ] e4,
[                                                                                                                                                                                                                                                      0 ] e41,
[                                                                                                                                                                                                                                                      0 ] e42,
[                                                                                                                                                                                                                                                      0 ] e43,
[                                                                                                                                                                                                                                                      0 ] e23,
[                                                                                                                                                                                                                                                      0 ] e31,
[                                                                                                                                                                                                                                                      0 ] e12,
[                                                                                                                                                                                                                                                      0 ] e423,
[                                                                                                                                                                                                                                                      0 ] e431,
[                                                                                                                                                                                                                                                      0 ] e412,
[                                                                                                                                                                                                                                                      0 ] e321,
[                                                                                                                                                                                                                                                      0 ] e1234


k01 = R.c0 * R.c1;
k02 = R.c0 * R.c2;
k03 = R.c0 * R.c3;
k11 = R.c1 * R.c1;
k12 = R.c1 * R.c2;
k13 = R.c1 * R.c3;
k15 = R.c1 * R.c5;
k16 = R.c1 * R.c6;
k17 = R.c1 * R.c7;
k22 = R.c2 * R.c2;
k23 = R.c2 * R.c3;
k24 = R.c2 * R.c4;
k26 = R.c2 * R.c6;
k27 = R.c2 * R.c7;
k33 = R.c3 * R.c3;
k34 = R.c3 * R.c4;
k35 = R.c3 * R.c5;
k37 = R.c3 * R.c7;
k47 = R.c4 * R.c7;
k57 = R.c5 * R.c7;
k67 = R.c6 * R.c7;
k77 = R.c7 * R.c7;

[                                                                                                                                                         0 ] 1,
[ (       k11 - k22 - k33 + k77) * v.x +   2.0 *(k12 - k37)             * v.y + 2.0 * ( k13 + k27)             * v.z + 2.0 * (-k01 + k26 - k35 + k47) * v.w ] e1,
[ 2.0 * (k12 + k37)              * v.x + (      -k11 + k22 - k33 + k77) * v.y + 2.0 * (-k17 + k23)             * v.z + 2.0 * (-k02 - k16 + k34 + k57) * v.w ] e2,
[  2.0 * (k13 - k27)             * v.x +   2.0 * (k17 + k23)            * v.y +       (-k11 - k22 + k33 + k77) * v.z + 2.0 * (-k03 + k15 - k24 + k67) * v.w ] e3,
[                                                                                                                             (k11 + k22 + k33 + k77) * v.w ] e4,
[                                                                                                                                                         0 ] e41,
[                                                                                                                                                         0 ] e42,
[                                                                                                                                                         0 ] e43,
[                                                                                                                                                         0 ] e23,
[                                                                                                                                                         0 ] e31,
[                                                                                                                                                         0 ] e12,
[                                                                                                                                                         0 ] e423,
[                                                                                                                                                         0 ] e431,
[                                                                                                                                                         0 ] e412,
[                                                                                                                                                         0 ] e321,
[                                                                                                                                                         0 ] e1234

=> v' = m * v; // Matrix * Vector
=> can be used to minimize effort for repeated application of same motor

-------------------------------------------------------------------


pga3dp regressive sandwich product mv_e * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) ] 1,
[                                                                                    0 ] e1,
[                                                                                    0 ] e2,
[                                                                                    0 ] e3,
[                                                                                    0 ] e4,
[                                            (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) ] e41,
[                                           (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) ] e42,
[                                            (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) ] e43,
[  (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) ] e23,
[  (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) ] e31,
[  (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) ] e12,
[                                                                                    0 ] e423,
[                                                                                    0 ] e431,
[                                                                                    0 ] e412,
[                                                                                    0 ] e321,
[                                           (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) ] e1234

pga3dp regressive sandwich product mv_e_tmp * rrev(mv_e) -> mv_e_res:
[  (-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c7 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c4 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c5 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c6 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c1 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c2 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c3 + (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c0 ] 1,
e1,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 0 ] e2,
e3,
e4,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c7 - (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c3 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c2 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c1 ] e41,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c3 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c7 - (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c1 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c2 ] e42,
[                                                                                                                                                                                                                                                                                                                                                                                      -(R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c2 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c1 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c7 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c3 ] e43,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c1 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c0 - (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c6 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c5 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c7 - (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c3 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c2 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c4 ] e23,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c2 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c6 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c0 - (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c4 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c3 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c7 - (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c1 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c5 ] e31,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c3 - (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c5 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c4 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c0 - (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c2 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c1 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c7 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c6 ] e12,
e423,
e431,
e412,
e321,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c1 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c2 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c3 + (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c7 ] e1234

pga3dp regressive sandwich product mv_e * trivec -> mv_u_tmp_t:
mv_u_tmp_t:
[                                                    0 ] 1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) ] e1,
[  (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) ] e2,
[  (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) ] e3,
[              (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) ] e4,
[                                                    0 ] e41,
[                                                    0 ] e42,
[                                                    0 ] e43,
[                                                    0 ] e23,
[                                                    0 ] e31,
[                                                    0 ] e12,
[               (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) ] e423,
[              (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) ] e431,
[               (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) ] e412,
[ (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) ] e321,
[                                                    0 ] e1234

pga3dp regressive sandwich product mv_u_tmp_t * rrev(mv_e) -> mv_u_res_t:
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] 1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c7 - (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c3 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c2 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c4 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c0 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c6 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c5 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c1 ] e1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c3 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c7 - (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c1 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c5 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c6 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c0 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c4 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c2 ] e2,
[ -(R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c2 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c1 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c7 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c6 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c5 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c4 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c0 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c3 ] e3,
[                                                                                                                                                                                                                                                       (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c7 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c1 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c2 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c3 ] e4,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e41,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e42,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e43,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e23,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e31,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e12,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c1 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c7 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c3 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c2 ] e423,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c2 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c3 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c7 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c1 ] e431,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c3 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c2 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c1 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c7 ] e412,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c1 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c2 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c3 - (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c0 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c4 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c5 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c6 + (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c7 ] e321,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e1234

-------------------------------------------------------------------