ega2d geometric product - basis product table:
[    1,   e1,   e2,  e12 ], 
[   e1,    1,  e12,   e2 ], 
[   e2, -e12,    1,  -e1 ], 
[  e12,  -e2,   e1,   -1 ] 

ega2d geometric product mv * mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 - A.c3 * B.c3 ] 1,
[ A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c3 + A.c3 * B.c2 ] e1,
[ A.c0 * B.c2 + A.c1 * B.c3 + A.c2 * B.c0 - A.c3 * B.c1 ] e2,
[ A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c0 ] e12

ega2d geometric product mv * mv_e -> mv:
[ A.c0 * B.c0 - A.c3 * B.c1 ] 1,
[ A.c1 * B.c0 - A.c2 * B.c1 ] e1,
[ A.c1 * B.c1 + A.c2 * B.c0 ] e2,
[ A.c0 * B.c1 + A.c3 * B.c0 ] e12

ega2d geometric product mv_e * mv -> mv:
[ A.c0 * B.c0 - A.c1 * B.c3 ] 1,
[ A.c0 * B.c1 + A.c1 * B.c2 ] e1,
[ A.c0 * B.c2 - A.c1 * B.c1 ] e2,
[ A.c0 * B.c3 + A.c1 * B.c0 ] e12

ega2d geometric product mv * ps -> mv:
[ -A.c3 * ps ] 1,
[ -A.c2 * ps ] e1,
[  A.c1 * ps ] e2,
[  A.c0 * ps ] e12

ega2d geometric product ps * mv -> mv:
[ -ps * B.c3 ] 1,
[  ps * B.c2 ] e1,
[ -ps * B.c1 ] e2,
[  ps * B.c0 ] e12

ega2d geometric product mv * vec -> mv:
[ A.c1 * v.x + A.c2 * v.y ] 1,
[ A.c0 * v.x + A.c3 * v.y ] e1,
[ A.c0 * v.y - A.c3 * v.x ] e2,
[ A.c1 * v.y - A.c2 * v.x ] e12

ega2d geometric product vec * mv -> mv:
[ v.x * B.c1 + v.y * B.c2 ] 1,
[ v.x * B.c0 - v.y * B.c3 ] e1,
[ v.x * B.c3 + v.y * B.c0 ] e2,
[ v.x * B.c2 - v.y * B.c1 ] e12

ega2d geometric product mv * s -> mv:
[ A.c0 * s ] 1,
[ A.c1 * s ] e1,
[ A.c2 * s ] e2,
[ A.c3 * s ] e12

ega2d geometric product s * mv -> mv:
[ s * B.c0 ] 1,
[ s * B.c1 ] e1,
[ s * B.c2 ] e2,
[ s * B.c3 ] e12

ega2d geometric product mv_e * mv_e -> mv_e:
[ A.c0 * B.c0 - A.c1 * B.c1 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[ A.c0 * B.c1 + A.c1 * B.c0 ] e12

ega2d geometric product mv_e * ps -> mv_e:
[ -A.c1 * ps ] 1,
[          0 ] e1,
[          0 ] e2,
[  A.c0 * ps ] e12

ega2d geometric product ps * mv_e -> mv_e:
[ -ps * B.c1 ] 1,
[          0 ] e1,
[          0 ] e2,
[  ps * B.c0 ] e12

ega2d geometric product mv_e * vec -> vec:
[                       0 ] 1,
[ A.c0 * v.x + A.c1 * v.y ] e1,
[ A.c0 * v.y - A.c1 * v.x ] e2,
[                       0 ] e12

ega2d geometric product vec * mv_e -> vec:
[                       0 ] 1,
[ v.x * B.c0 - v.y * B.c1 ] e1,
[ v.x * B.c1 + v.y * B.c0 ] e2,
[                       0 ] e12

ega2d geometric product mv_e * s -> mv_e:
[ A.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[ A.c1 * s ] e12

ega2d geometric product s * mv_e -> mv_e:
[ s * B.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[ s * B.c1 ] e12

ega2d geometric product ps * ps -> s:
[ -ps1 * ps2 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e12

ega2d geometric product ps * vec -> vec:
[         0 ] 1,
[  ps * v.y ] e1,
[ -ps * v.x ] e2,
[         0 ] e12

ega2d geometric product vec * ps -> vec:
[         0 ] 1,
[ -v.y * ps ] e1,
[  v.x * ps ] e2,
[         0 ] e12

ega2d geometric product ps * s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ ps * s ] e12

ega2d geometric product s * ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ s * ps ] e12

ega2d geometric product vec * vec -> mv_e:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[ v1.x * v2.y - v1.y * v2.x ] e12

ega2d geometric product vec * s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[       0 ] e12

ega2d geometric product s * vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[       0 ] e12

ega2d geometric product s * s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e12

-------------------------------------------------------------------

ega2d commutator product - basis product table:
[    0,    0,    0,    0 ], 
[    0,    0,  e12,   e2 ], 
[    0, -e12,    0,  -e1 ], 
[    0,  -e2,   e1,    0 ] 

ega2d commutator product cmt(mv,mv) -> mv:
[                          0 ] 1,
[ -A.c2 * B.c3 + A.c3 * B.c2 ] e1,
[  A.c1 * B.c3 - A.c3 * B.c1 ] e2,
[  A.c1 * B.c2 - A.c2 * B.c1 ] e12

ega2d commutator product cmt(ps,vec) -> vec:
[         0 ] 1,
[  ps * v.y ] e1,
[ -ps * v.x ] e2,
[         0 ] e12

ega2d commutator product cmt(vec,ps) -> vec:
[         0 ] 1,
[ -v.y * ps ] e1,
[  v.x * ps ] e2,
[         0 ] e12

ega2d commutator product cmt(vec,vec) -> ps:
[                         0 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[ v1.x * v2.y - v1.y * v2.x ] e12

-------------------------------------------------------------------

ega2d wedge product - basis product table:
[    1,   e1,   e2,  e12 ], 
[   e1,    0,  e12,    0 ], 
[   e2, -e12,    0,    0 ], 
[  e12,    0,    0,    0 ] 

ega2d wedge product mv ^ mv -> mv:
[                                           A.c0 * B.c0 ] 1,
[                             A.c0 * B.c1 + A.c1 * B.c0 ] e1,
[                             A.c0 * B.c2 + A.c2 * B.c0 ] e2,
[ A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c0 ] e12

ega2d wedge product mv ^ mv_e -> mv:
[               A.c0 * B.c0 ] 1,
[               A.c1 * B.c0 ] e1,
[               A.c2 * B.c0 ] e2,
[ A.c0 * B.c1 + A.c3 * B.c0 ] e12

ega2d wedge product mv_e ^ mv -> mv:
[               A.c0 * B.c0 ] 1,
[               A.c0 * B.c1 ] e1,
[               A.c0 * B.c2 ] e2,
[ A.c0 * B.c3 + A.c1 * B.c0 ] e12

ega2d wedge product mv ^ ps -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ M.c0 * ps ] e12

ega2d wedge product ps ^ mv -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ ps * M.c0 ] e12

ega2d wedge product mv ^ vec -> mv:
[                       0 ] 1,
[              M.c0 * v.x ] e1,
[              M.c0 * v.y ] e2,
[ M.c1 * v.y - M.c2 * v.x ] e12

ega2d wedge product vec ^ mv -> mv:
[                       0 ] 1,
[              v.x * M.c0 ] e1,
[              v.y * M.c0 ] e2,
[ v.x * M.c2 - v.y * M.c1 ] e12

ega2d wedge product mv ^ s -> mv:
[ M.c0 * s ] 1,
[ M.c1 * s ] e1,
[ M.c2 * s ] e2,
[ M.c3 * s ] e12

ega2d wedge product s ^ mv -> mv:
[ s * M.c0 ] 1,
[ s * M.c1 ] e1,
[ s * M.c2 ] e2,
[ s * M.c3 ] e12

ega2d wedge product mv_e ^ mv_e -> mv_e:
[               A.c0 * B.c0 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[ A.c0 * B.c1 + A.c1 * B.c0 ] e12

ega2d wedge product mv_e ^ ps -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ M.c0 * ps ] e12

ega2d wedge product ps ^ mv_e -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ ps * M.c0 ] e12

ega2d wedge product mv_e ^ vec -> vec:
[          0 ] 1,
[ M.c0 * v.x ] e1,
[ M.c0 * v.y ] e2,
[          0 ] e12

ega2d wedge product vec ^ mv_e -> vec:
[          0 ] 1,
[ v.x * M.c0 ] e1,
[ v.y * M.c0 ] e2,
[          0 ] e12

ega2d wedge product mv_e ^ s -> mv_e:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[ M.c1 * s ] e12

ega2d wedge product s ^ mv_e -> mv_e:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[ s * M.c1 ] e12

ega2d wedge product ps ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d wedge product ps ^ vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d wedge product vec ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d wedge product ps ^ s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ ps * s ] e12

ega2d wedge product s ^ ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ s * ps ] e12

ega2d wedge product vec ^ vec -> ps:
[                         0 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[ v1.x * v2.y - v1.y * v2.x ] e12

ega2d wedge product vec ^ s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[       0 ] e12

ega2d wedge product s ^ vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[       0 ] e12

ega2d wedge product s ^ s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e12

-------------------------------------------------------------------

ega2d inner product - basis product table:
[ 1, 0, 0, 0 ], 
[ 0, 1, 0, 0 ], 
[ 0, 0, 1, 0 ], 
[ 0, 0, 0, 1 ] 

ega2d inner product dot(mv,mv) -> s:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 ] 1,
[                                                     0 ] e1,
[                                                     0 ] e2,
[                                                     0 ] e12

ega2d inner product dot(ps,ps) -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d inner product dot(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e12

ega2d inner product dot(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e12

-------------------------------------------------------------------

ega2d regressive wedge product - basis product table:
[   0,   0,   0,   1 ], 
[   0,   0,   1,  e1 ], 
[   0,  -1,   0,  e2 ], 
[   1,  e1,  e2, e12 ] 

ega2d regressive wedge product rwdg(mv,mv) -> mv:
[ A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c0 ] 1,
[                             A.c1 * B.c3 + A.c3 * B.c1 ] e1,
[                             A.c2 * B.c3 + A.c3 * B.c2 ] e2,
[                                           A.c3 * B.c3 ] e12

ega2d regressive wedge product rwdg(ps,ps) -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ ps1 * ps2 ] e12

ega2d regressive wedge product rwdg(ps,vec) -> vec:
[        0 ] 1,
[ ps * v.x ] e1,
[ ps * v.y ] e2,
[        0 ] e12

ega2d regressive wedge product rwdg(vec,ps) -> vec:
[        0 ] 1,
[ v.x * ps ] e1,
[ v.y * ps ] e2,
[        0 ] e12

ega2d regressive wedge product rwdg(ps,s) -> s:
[ ps * s ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e12

ega2d regressive wedge product rwdg(s,ps) -> s:
[ s * ps ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e12

ega2d regressive wedge product rwdg(vec,vec) -> s:
[ v1.x * v2.y - v1.y * v2.x ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e12

-------------------------------------------------------------------

ega2d left contraction - basis product table:
[   1,  e1,  e2, e12 ], 
[   0,   1,   0, -e2 ], 
[   0,   0,   1,  e1 ], 
[   0,   0,   0,   1 ] 

ega2d left contraction mv << mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 ] 1,
[                             A.c0 * B.c1 + A.c2 * B.c3 ] e1,
[                             A.c0 * B.c2 - A.c1 * B.c3 ] e2,
[                                           A.c0 * B.c3 ] e12

ega2d left contraction mv << mv_e -> mv:
[ A.c0 * B.c0 + A.c3 * B.c1 ] 1,
[               A.c2 * B.c1 ] e1,
[              -A.c1 * B.c1 ] e2,
[               A.c0 * B.c1 ] e12

ega2d left contraction mv_e << mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c3 ] 1,
[               A.c0 * B.c1 ] e1,
[               A.c0 * B.c2 ] e2,
[               A.c0 * B.c3 ] e12

ega2d left contraction mv << ps -> mv:
[  M.c3 * ps ] 1,
[  M.c2 * ps ] e1,
[ -M.c1 * ps ] e2,
[  M.c0 * ps ] e12

ega2d left contraction ps << mv -> s:
[ ps * M.c3 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d left contraction mv << vec -> mv:
[ M.c1 * v.x + M.c2 * v.y ] 1,
[              M.c0 * v.x ] e1,
[              M.c0 * v.y ] e2,
[                       0 ] e12

ega2d left contraction vec << mv -> mv:
[ v.x * M.c1 + v.y * M.c2 ] 1,
[              v.y * M.c3 ] e1,
[             -v.x * M.c3 ] e2,
[                       0 ] e12

ega2d left contraction mv << s -> s:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e12

ega2d left contraction s << mv -> mv:
[ s * M.c0 ] 1,
[ s * M.c1 ] e1,
[ s * M.c2 ] e2,
[ s * M.c3 ] e12

ega2d left contraction mv_e << mv_e -> mv_e:
[ A.c0 * B.c0 + A.c1 * B.c1 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[               A.c0 * B.c1 ] e12

ega2d left contraction mv_e << ps -> mv_e:
[ M.c1 * ps ] 1,
[         0 ] e1,
[         0 ] e2,
[ M.c0 * ps ] e12

ega2d left contraction ps << mv_e -> s:
[ ps * M.c1 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d left contraction mv_e << vec -> vec:
[          0 ] 1,
[ M.c0 * v.x ] e1,
[ M.c0 * v.y ] e2,
[          0 ] e12

ega2d left contraction vec << mv_e -> vec:
[           0 ] 1,
[  v.y * M.c1 ] e1,
[ -v.x * M.c1 ] e2,
[           0 ] e12

ega2d left contraction mv_e << s -> s:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e12

ega2d left contraction s << mv_e -> mv_e:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[ s * M.c1 ] e12

ega2d left contraction ps << ps -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d left contraction ps << vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d left contraction vec << ps -> vec:
[         0 ] 1,
[  v.y * ps ] e1,
[ -v.x * ps ] e2,
[         0 ] e12

ega2d left contraction ps << s -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d left contraction s << ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ s * ps ] e12

ega2d left contraction vec << vec -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e12

ega2d left contraction vec << s -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d left contraction s << vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[       0 ] e12

ega2d left contraction s << s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e12

-------------------------------------------------------------------

ega2d right contraction - basis product table:
[   1,   0,   0,   0 ], 
[  e1,   1,   0,   0 ], 
[  e2,   0,   1,   0 ], 
[ e12,  e2, -e1,   1 ] 

ega2d right contraction mv >> mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 ] 1,
[                             A.c1 * B.c0 - A.c3 * B.c2 ] e1,
[                             A.c2 * B.c0 + A.c3 * B.c1 ] e2,
[                                           A.c3 * B.c0 ] e12

ega2d right contraction mv >> mv_e -> mv:
[ A.c0 * B.c0 + A.c3 * B.c1 ] 1,
[               A.c1 * B.c0 ] e1,
[               A.c2 * B.c0 ] e2,
[               A.c3 * B.c0 ] e12

ega2d right contraction mv_e >> mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c3 ] 1,
[              -A.c1 * B.c2 ] e1,
[               A.c1 * B.c1 ] e2,
[               A.c1 * B.c0 ] e12

ega2d right contraction mv >> ps -> s:
[ M.c3 * ps ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d right contraction ps >> mv -> mv:
[  ps * M.c3 ] 1,
[ -ps * M.c2 ] e1,
[  ps * M.c1 ] e2,
[  ps * M.c0 ] e12

ega2d right contraction mv >> vec -> mv:
[ M.c1 * v.x + M.c2 * v.y ] 1,
[             -M.c3 * v.y ] e1,
[              M.c3 * v.x ] e2,
[                       0 ] e12

ega2d right contraction vec >> mv -> mv:
[ v.x * M.c1 + v.y * M.c2 ] 1,
[              v.x * M.c0 ] e1,
[              v.y * M.c0 ] e2,
[                       0 ] e12

ega2d right contraction mv >> s -> mv:
[ M.c0 * s ] 1,
[ M.c1 * s ] e1,
[ M.c2 * s ] e2,
[ M.c3 * s ] e12

ega2d right contraction s >> mv -> s:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e12

ega2d right contraction mv_e >> mv_e -> mv_e:
[ A.c0 * B.c0 + A.c1 * B.c1 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[               A.c1 * B.c0 ] e12

ega2d right contraction mv_e >> ps -> s:
[ M.c1 * ps ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d right contraction ps >> mv_e -> mv_e:
[ ps * M.c1 ] 1,
[         0 ] e1,
[         0 ] e2,
[ ps * M.c0 ] e12

ega2d right contraction mv_e >> vec -> vec:
[           0 ] 1,
[ -M.c1 * v.y ] e1,
[  M.c1 * v.x ] e2,
[           0 ] e12

ega2d right contraction vec >> mv_e -> vec:
[          0 ] 1,
[ v.x * M.c0 ] e1,
[ v.y * M.c0 ] e2,
[          0 ] e12

ega2d right contraction mv_e >> s -> mv_e:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[ M.c1 * s ] e12

ega2d right contraction s >> mv_e -> s:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e12

ega2d right contraction ps >> ps -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e12

ega2d right contraction ps >> vec -> vec:
[         0 ] 1,
[ -ps * v.y ] e1,
[  ps * v.x ] e2,
[         0 ] e12

ega2d right contraction vec >> ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d right contraction ps >> s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[ ps * s ] e12

ega2d right contraction s >> ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d right contraction vec >> vec -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e12

ega2d right contraction vec >> s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[       0 ] e12

ega2d right contraction s >> vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e12

ega2d right contraction s >> s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e12

-------------------------------------------------------------------

ega2d left expansion - basis product table:
[ e12,   0,   0,   0 ], 
[ -e2, e12,   0,   0 ], 
[  e1,   0, e12,   0 ], 
[   1,  e1,  e2, e12 ] 

-------------------------------------------------------------------

ega2d right expansion - basis product table:
[ e12,  e2, -e1,   1 ], 
[   0, e12,   0,  e1 ], 
[   0,   0, e12,  e2 ], 
[   0,   0,   0, e12 ] 

-------------------------------------------------------------------

ega2d sandwich product - basis product table:
[    1,   e1,   e2,  e12 ], 
[   e1,    1,  e12,   e2 ], 
[   e2, -e12,    1,  -e1 ], 
[  e12,  -e2,   e1,   -1 ] 

ega2d sandwich product mv_e * vec -> vec_tmp:
vec_tmp:
[                         0 ] 1,
[ (R.c0 * v.x + R.c1 * v.y) ] e1,
[ (R.c0 * v.y - R.c1 * v.x) ] e2,
[                         0 ] e12

ega2d sandwich product vec_tmp * rev(mv_e) -> vec_res:
[                                                                    0 ] 1,
[  (R.c0 * v.x + R.c1 * v.y) * R.c0 + (R.c0 * v.y - R.c1 * v.x) * R.c1 ] e1,
[ -(R.c0 * v.x + R.c1 * v.y) * R.c1 + (R.c0 * v.y - R.c1 * v.x) * R.c0 ] e2,
[                                                                    0 ] e12

-------------------------------------------------------------------

ega3d geometric product - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ], 
[   e1,    1,  e12, -e31, e123,  -e3,   e2,  e23 ], 
[   e2, -e12,    1,  e23,   e3, e123,  -e1,  e31 ], 
[   e3,  e31, -e23,    1,  -e2,   e1, e123,  e12 ], 
[  e23, e123,  -e3,   e2,   -1, -e12,  e31,  -e1 ], 
[  e31,   e3, e123,  -e1,  e12,   -1, -e23,  -e2 ], 
[  e12,  -e2,   e1, e123, -e31,  e23,   -1,  -e3 ], 
[ e123,  e23,  e31,  e12,  -e1,  -e2,  -e3,   -1 ] 

ega3d geometric product mv * mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 - A.c4 * B.c4 - A.c5 * B.c5 - A.c6 * B.c6 - A.c7 * B.c7 ] 1,
[ A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c6 + A.c3 * B.c5 - A.c4 * B.c7 - A.c5 * B.c3 + A.c6 * B.c2 - A.c7 * B.c4 ] e1,
[ A.c0 * B.c2 + A.c1 * B.c6 + A.c2 * B.c0 - A.c3 * B.c4 + A.c4 * B.c3 - A.c5 * B.c7 - A.c6 * B.c1 - A.c7 * B.c5 ] e2,
[ A.c0 * B.c3 - A.c1 * B.c5 + A.c2 * B.c4 + A.c3 * B.c0 - A.c4 * B.c2 + A.c5 * B.c1 - A.c6 * B.c7 - A.c7 * B.c6 ] e3,
[ A.c0 * B.c4 + A.c1 * B.c7 + A.c2 * B.c3 - A.c3 * B.c2 + A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 + A.c7 * B.c1 ] e23,
[ A.c0 * B.c5 - A.c1 * B.c3 + A.c2 * B.c7 + A.c3 * B.c1 + A.c4 * B.c6 + A.c5 * B.c0 - A.c6 * B.c4 + A.c7 * B.c2 ] e31,
[ A.c0 * B.c6 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c7 - A.c4 * B.c5 + A.c5 * B.c4 + A.c6 * B.c0 + A.c7 * B.c3 ] e12,
[ A.c0 * B.c7 + A.c1 * B.c4 + A.c2 * B.c5 + A.c3 * B.c6 + A.c4 * B.c1 + A.c5 * B.c2 + A.c6 * B.c3 + A.c7 * B.c0 ] e123

ega3d geometric product mv * mv_e -> mv:
[  A.c0 * B.c0 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 ] 1,
[  A.c1 * B.c0 - A.c2 * B.c3 + A.c3 * B.c2 - A.c7 * B.c1 ] e1,
[  A.c1 * B.c3 + A.c2 * B.c0 - A.c3 * B.c1 - A.c7 * B.c2 ] e2,
[ -A.c1 * B.c2 + A.c2 * B.c1 + A.c3 * B.c0 - A.c7 * B.c3 ] e3,
[  A.c0 * B.c1 + A.c4 * B.c0 - A.c5 * B.c3 + A.c6 * B.c2 ] e23,
[  A.c0 * B.c2 + A.c4 * B.c3 + A.c5 * B.c0 - A.c6 * B.c1 ] e31,
[  A.c0 * B.c3 - A.c4 * B.c2 + A.c5 * B.c1 + A.c6 * B.c0 ] e12,
[  A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c7 * B.c0 ] e123

ega3d geometric product mv_e * mv -> mv:
[ A.c0 * B.c0 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 ] 1,
[ A.c0 * B.c1 - A.c1 * B.c7 - A.c2 * B.c3 + A.c3 * B.c2 ] e1,
[ A.c0 * B.c2 + A.c1 * B.c3 - A.c2 * B.c7 - A.c3 * B.c1 ] e2,
[ A.c0 * B.c3 - A.c1 * B.c2 + A.c2 * B.c1 - A.c3 * B.c7 ] e3,
[ A.c0 * B.c4 + A.c1 * B.c0 - A.c2 * B.c6 + A.c3 * B.c5 ] e23,
[ A.c0 * B.c5 + A.c1 * B.c6 + A.c2 * B.c0 - A.c3 * B.c4 ] e31,
[ A.c0 * B.c6 - A.c1 * B.c5 + A.c2 * B.c4 + A.c3 * B.c0 ] e12,
[ A.c0 * B.c7 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 ] e123

ega3d geometric product mv * mv_u -> mv:
[  A.c1 * B.c0 + A.c2 * B.c1 + A.c3 * B.c2 - A.c7 * B.c3 ] 1,
[  A.c0 * B.c0 - A.c4 * B.c3 - A.c5 * B.c2 + A.c6 * B.c1 ] e1,
[  A.c0 * B.c1 + A.c4 * B.c2 - A.c5 * B.c3 - A.c6 * B.c0 ] e2,
[  A.c0 * B.c2 - A.c4 * B.c1 + A.c5 * B.c0 - A.c6 * B.c3 ] e3,
[  A.c1 * B.c3 + A.c2 * B.c2 - A.c3 * B.c1 + A.c7 * B.c0 ] e23,
[ -A.c1 * B.c2 + A.c2 * B.c3 + A.c3 * B.c0 + A.c7 * B.c1 ] e31,
[  A.c1 * B.c1 - A.c2 * B.c0 + A.c3 * B.c3 + A.c7 * B.c2 ] e12,
[  A.c0 * B.c3 + A.c4 * B.c0 + A.c5 * B.c1 + A.c6 * B.c2 ] e123

ega3d geometric product mv_u * mv -> mv:
[  A.c0 * B.c1 + A.c1 * B.c2 + A.c2 * B.c3 - A.c3 * B.c7 ] 1,
[  A.c0 * B.c0 - A.c1 * B.c6 + A.c2 * B.c5 - A.c3 * B.c4 ] e1,
[  A.c0 * B.c6 + A.c1 * B.c0 - A.c2 * B.c4 - A.c3 * B.c5 ] e2,
[ -A.c0 * B.c5 + A.c1 * B.c4 + A.c2 * B.c0 - A.c3 * B.c6 ] e3,
[  A.c0 * B.c7 + A.c1 * B.c3 - A.c2 * B.c2 + A.c3 * B.c1 ] e23,
[ -A.c0 * B.c3 + A.c1 * B.c7 + A.c2 * B.c1 + A.c3 * B.c2 ] e31,
[  A.c0 * B.c2 - A.c1 * B.c1 + A.c2 * B.c7 + A.c3 * B.c3 ] e12,
[  A.c0 * B.c4 + A.c1 * B.c5 + A.c2 * B.c6 + A.c3 * B.c0 ] e123

ega3d geometric product mv * ps -> mv:
[ -A.c7 * ps ] 1,
[ -A.c4 * ps ] e1,
[ -A.c5 * ps ] e2,
[ -A.c6 * ps ] e3,
[  A.c1 * ps ] e23,
[  A.c2 * ps ] e31,
[  A.c3 * ps ] e12,
[  A.c0 * ps ] e123

ega3d geometric product ps * mv -> mv:
[ -ps * B.c7 ] 1,
[ -ps * B.c4 ] e1,
[ -ps * B.c5 ] e2,
[ -ps * B.c6 ] e3,
[  ps * B.c1 ] e23,
[  ps * B.c2 ] e31,
[  ps * B.c3 ] e12,
[  ps * B.c0 ] e123

ega3d geometric product mv * bivec -> mv:
[ -M.c4 * B.x - M.c5 * B.y - M.c6 * B.z ] 1,
[ -M.c2 * B.z + M.c3 * B.y - M.c7 * B.x ] e1,
[  M.c1 * B.z - M.c3 * B.x - M.c7 * B.y ] e2,
[ -M.c1 * B.y + M.c2 * B.x - M.c7 * B.z ] e3,
[  M.c0 * B.x - M.c5 * B.z + M.c6 * B.y ] e23,
[  M.c0 * B.y + M.c4 * B.z - M.c6 * B.x ] e31,
[  M.c0 * B.z - M.c4 * B.y + M.c5 * B.x ] e12,
[  M.c1 * B.x + M.c2 * B.y + M.c3 * B.z ] e123

ega3d geometric product bivec * mv -> mv:
[ -B.x * M.c4 - B.y * M.c5 - B.z * M.c6 ] 1,
[ -B.x * M.c7 - B.y * M.c3 + B.z * M.c2 ] e1,
[  B.x * M.c3 - B.y * M.c7 - B.z * M.c1 ] e2,
[ -B.x * M.c2 + B.y * M.c1 - B.z * M.c7 ] e3,
[  B.x * M.c0 - B.y * M.c6 + B.z * M.c5 ] e23,
[  B.x * M.c6 + B.y * M.c0 - B.z * M.c4 ] e31,
[ -B.x * M.c5 + B.y * M.c4 + B.z * M.c0 ] e12,
[  B.x * M.c1 + B.y * M.c2 + B.z * M.c3 ] e123

ega3d geometric product mv * vec -> mv:
[  M.c1 * v.x + M.c2 * v.y + M.c3 * v.z ] 1,
[  M.c0 * v.x - M.c5 * v.z + M.c6 * v.y ] e1,
[  M.c0 * v.y + M.c4 * v.z - M.c6 * v.x ] e2,
[  M.c0 * v.z - M.c4 * v.y + M.c5 * v.x ] e3,
[  M.c2 * v.z - M.c3 * v.y + M.c7 * v.x ] e23,
[ -M.c1 * v.z + M.c3 * v.x + M.c7 * v.y ] e31,
[  M.c1 * v.y - M.c2 * v.x + M.c7 * v.z ] e12,
[  M.c4 * v.x + M.c5 * v.y + M.c6 * v.z ] e123

ega3d geometric product vec * mv -> mv:
[  v.x * M.c1 + v.y * M.c2 + v.z * M.c3 ] 1,
[  v.x * M.c0 - v.y * M.c6 + v.z * M.c5 ] e1,
[  v.x * M.c6 + v.y * M.c0 - v.z * M.c4 ] e2,
[ -v.x * M.c5 + v.y * M.c4 + v.z * M.c0 ] e3,
[  v.x * M.c7 + v.y * M.c3 - v.z * M.c2 ] e23,
[ -v.x * M.c3 + v.y * M.c7 + v.z * M.c1 ] e31,
[  v.x * M.c2 - v.y * M.c1 + v.z * M.c7 ] e12,
[  v.x * M.c4 + v.y * M.c5 + v.z * M.c6 ] e123

ega3d geometric product mv * s -> mv:
[ M.c0 * s ] 1,
[ M.c1 * s ] e1,
[ M.c2 * s ] e2,
[ M.c3 * s ] e3,
[ M.c4 * s ] e23,
[ M.c5 * s ] e31,
[ M.c6 * s ] e12,
[ M.c7 * s ] e123

ega3d geometric product s * mv -> mv:
[ s * M.c0 ] 1,
[ s * M.c1 ] e1,
[ s * M.c2 ] e2,
[ s * M.c3 ] e3,
[ s * M.c4 ] e23,
[ s * M.c5 ] e31,
[ s * M.c6 ] e12,
[ s * M.c7 ] e123

ega3d geometric product mv_e * mv_e -> mv_e:
[ A.c0 * B.c0 - A.c1 * B.c1 - A.c2 * B.c2 - A.c3 * B.c3 ] 1,
[                                                     0 ] e1,
[                                                     0 ] e2,
[                                                     0 ] e3,
[ A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c3 + A.c3 * B.c2 ] e23,
[ A.c0 * B.c2 + A.c1 * B.c3 + A.c2 * B.c0 - A.c3 * B.c1 ] e31,
[ A.c0 * B.c3 - A.c1 * B.c2 + A.c2 * B.c1 + A.c3 * B.c0 ] e12,
[                                                     0 ] e123

ega3d geometric product mv_u * mv_u -> mv_e:
[  A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 - A.c3 * B.c3 ] 1,
[                                                      0 ] e1,
[                                                      0 ] e2,
[                                                      0 ] e3,
[  A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c0 ] e23,
[ -A.c0 * B.c2 + A.c1 * B.c3 + A.c2 * B.c0 + A.c3 * B.c1 ] e31,
[  A.c0 * B.c1 - A.c1 * B.c0 + A.c2 * B.c3 + A.c3 * B.c2 ] e12,
[                                                      0 ] e123

ega3d geometric product mv_e * mv_u -> mv_u:
[                                                     0 ] 1,
[ A.c0 * B.c0 - A.c1 * B.c3 - A.c2 * B.c2 + A.c3 * B.c1 ] e1,
[ A.c0 * B.c1 + A.c1 * B.c2 - A.c2 * B.c3 - A.c3 * B.c0 ] e2,
[ A.c0 * B.c2 - A.c1 * B.c1 + A.c2 * B.c0 - A.c3 * B.c3 ] e3,
[                                                     0 ] e23,
[                                                     0 ] e31,
[                                                     0 ] e12,
[ A.c0 * B.c3 + A.c1 * B.c0 + A.c2 * B.c1 + A.c3 * B.c2 ] e123

ega3d geometric product mv_u * mv_e -> mv_u:
[                                                      0 ] 1,
[  A.c0 * B.c0 - A.c1 * B.c3 + A.c2 * B.c2 - A.c3 * B.c1 ] e1,
[  A.c0 * B.c3 + A.c1 * B.c0 - A.c2 * B.c1 - A.c3 * B.c2 ] e2,
[ -A.c0 * B.c2 + A.c1 * B.c1 + A.c2 * B.c0 - A.c3 * B.c3 ] e3,
[                                                      0 ] e23,
[                                                      0 ] e31,
[                                                      0 ] e12,
[  A.c0 * B.c1 + A.c1 * B.c2 + A.c2 * B.c3 + A.c3 * B.c0 ] e123

ega3d geometric product mv_e * ps -> mv_u:
[          0 ] 1,
[ -M.c1 * ps ] e1,
[ -M.c2 * ps ] e2,
[ -M.c3 * ps ] e3,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[  M.c0 * ps ] e123

ega3d geometric product ps * mv_e -> mv_u:
[          0 ] 1,
[ -ps * M.c1 ] e1,
[ -ps * M.c2 ] e2,
[ -ps * M.c3 ] e3,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[  ps * M.c0 ] e123

ega3d geometric product mv_u * ps -> mv_e:
[ -M.c3 * ps ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[  M.c0 * ps ] e23,
[  M.c1 * ps ] e31,
[  M.c2 * ps ] e12,
[          0 ] e123

ega3d geometric product ps * mv_u -> mv_e:
[ -ps * M.c3 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[  ps * M.c0 ] e23,
[  ps * M.c1 ] e31,
[  ps * M.c2 ] e12,
[          0 ] e123

ega3d geometric product mv_e * bivec -> mv_e:
[ -M.c1 * B.x - M.c2 * B.y - M.c3 * B.z ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[  M.c0 * B.x - M.c2 * B.z + M.c3 * B.y ] e23,
[  M.c0 * B.y + M.c1 * B.z - M.c3 * B.x ] e31,
[  M.c0 * B.z - M.c1 * B.y + M.c2 * B.x ] e12,
[                                     0 ] e123

ega3d geometric product bivec * mv_e -> mv_e:
[ -B.x * M.c1 - B.y * M.c2 - B.z * M.c3 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[  B.x * M.c0 - B.y * M.c3 + B.z * M.c2 ] e23,
[  B.x * M.c3 + B.y * M.c0 - B.z * M.c1 ] e31,
[ -B.x * M.c2 + B.y * M.c1 + B.z * M.c0 ] e12,
[                                     0 ] e123

ega3d geometric product mv_u * bivec -> mv_u:
[                                     0 ] 1,
[ -M.c1 * B.z + M.c2 * B.y - M.c3 * B.x ] e1,
[  M.c0 * B.z - M.c2 * B.x - M.c3 * B.y ] e2,
[ -M.c0 * B.y + M.c1 * B.x - M.c3 * B.z ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[  M.c0 * B.x + M.c1 * B.y + M.c2 * B.z ] e123

ega3d geometric product bivec * mv_u -> mv_u:
[                                     0 ] 1,
[ -B.x * M.c3 - B.y * M.c2 + B.z * M.c1 ] e1,
[  B.x * M.c2 - B.y * M.c3 - B.z * M.c0 ] e2,
[ -B.x * M.c1 + B.y * M.c0 - B.z * M.c3 ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[  B.x * M.c0 + B.y * M.c1 + B.z * M.c2 ] e123

ega3d geometric product mv_e * vec -> mv_u:
[                                    0 ] 1,
[ M.c0 * v.x - M.c2 * v.z + M.c3 * v.y ] e1,
[ M.c0 * v.y + M.c1 * v.z - M.c3 * v.x ] e2,
[ M.c0 * v.z - M.c1 * v.y + M.c2 * v.x ] e3,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[ M.c1 * v.x + M.c2 * v.y + M.c3 * v.z ] e123

ega3d geometric product vec * mv_e -> mv_u:
[                                     0 ] 1,
[  v.x * M.c0 - v.y * M.c3 + v.z * M.c2 ] e1,
[  v.x * M.c3 + v.y * M.c0 - v.z * M.c1 ] e2,
[ -v.x * M.c2 + v.y * M.c1 + v.z * M.c0 ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[  v.x * M.c1 + v.y * M.c2 + v.z * M.c3 ] e123

ega3d geometric product mv_u * vec -> mv_e:
[  M.c0 * v.x + M.c1 * v.y + M.c2 * v.z ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[  M.c1 * v.z - M.c2 * v.y + M.c3 * v.x ] e23,
[ -M.c0 * v.z + M.c2 * v.x + M.c3 * v.y ] e31,
[  M.c0 * v.y - M.c1 * v.x + M.c3 * v.z ] e12,
[                                     0 ] e123

ega3d geometric product vec * mv_u -> mv_e:
[  v.x * M.c0 + v.y * M.c1 + v.z * M.c2 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[  v.x * M.c3 + v.y * M.c2 - v.z * M.c1 ] e23,
[ -v.x * M.c2 + v.y * M.c3 + v.z * M.c0 ] e31,
[  v.x * M.c1 - v.y * M.c0 + v.z * M.c3 ] e12,
[                                     0 ] e123

ega3d geometric product mv_e * s -> mv_e:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ M.c1 * s ] e23,
[ M.c2 * s ] e31,
[ M.c3 * s ] e12,
[        0 ] e123

ega3d geometric product s * mv_e -> mv_e:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ s * M.c1 ] e23,
[ s * M.c2 ] e31,
[ s * M.c3 ] e12,
[        0 ] e123

ega3d geometric product mv_u * s -> mv_u:
[        0 ] 1,
[ M.c0 * s ] e1,
[ M.c1 * s ] e2,
[ M.c2 * s ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ M.c3 * s ] e123

ega3d geometric product s * mv_u -> mv_u:
[        0 ] 1,
[ s * M.c0 ] e1,
[ s * M.c1 ] e2,
[ s * M.c2 ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ s * M.c3 ] e123

ega3d geometric product ps * ps -> s:
[ -ps1 * ps2 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[          0 ] e123

ega3d geometric product ps * bivec -> vec:
[         0 ] 1,
[ -ps * B.x ] e1,
[ -ps * B.y ] e2,
[ -ps * B.z ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e123

ega3d geometric product bivec * ps -> vec:
[         0 ] 1,
[ -B.x * ps ] e1,
[ -B.y * ps ] e2,
[ -B.z * ps ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e123

ega3d geometric product ps * vec -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ ps * v.x ] e23,
[ ps * v.y ] e31,
[ ps * v.z ] e12,
[        0 ] e123

ega3d geometric product vec * ps -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ v.x * ps ] e23,
[ v.y * ps ] e31,
[ v.z * ps ] e12,
[        0 ] e123

ega3d geometric product ps * s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e123

ega3d geometric product s * ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e123

ega3d geometric product bivec * bivec -> mv_e:
[ -B1.x * B2.x - B1.y * B2.y - B1.z * B2.z ] 1,
[                                        0 ] e1,
[                                        0 ] e2,
[                                        0 ] e3,
[               -B1.y * B2.z + B1.z * B2.y ] e23,
[                B1.x * B2.z - B1.z * B2.x ] e31,
[               -B1.x * B2.y + B1.y * B2.x ] e12,
[                                        0 ] e123

ega3d geometric product bivec * vec -> mv_u:
[                                 0 ] 1,
[            -B.y * v.z + B.z * v.y ] e1,
[             B.x * v.z - B.z * v.x ] e2,
[            -B.x * v.y + B.y * v.x ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[ B.x * v.x + B.y * v.y + B.z * v.z ] e123

ega3d geometric product vec * bivec -> mv_u:
[                                 0 ] 1,
[            -v.y * B.z + v.z * B.y ] e1,
[             v.x * B.z - v.z * B.x ] e2,
[            -v.x * B.y + v.y * B.x ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[ v.x * B.x + v.y * B.y + v.z * B.z ] e123

ega3d geometric product bivec * s -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e123

ega3d geometric product s * bivec -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e123

ega3d geometric product vec * vec -> mv_e:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[               v1.y * v2.z - v1.z * v2.y ] e23,
[              -v1.x * v2.z + v1.z * v2.x ] e31,
[               v1.x * v2.y - v1.y * v2.x ] e12,
[                                       0 ] e123

ega3d geometric product vec * s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d geometric product s * vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d geometric product s * s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

-------------------------------------------------------------------

ega3d commutator product - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,  e12, -e31,    0,  -e3,   e2,    0 ], 
[    0, -e12,    0,  e23,   e3,    0,  -e1,    0 ], 
[    0,  e31, -e23,    0,  -e2,   e1,    0,    0 ], 
[    0,    0,  -e3,   e2,    0, -e12,  e31,    0 ], 
[    0,   e3,    0,  -e1,  e12,    0, -e23,    0 ], 
[    0,  -e2,   e1,    0, -e31,  e23,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ] 

ega3d commutator product cmt(mv,mv) -> mv:
[                                                      0 ] 1,
[ -A.c2 * B.c6 + A.c3 * B.c5 - A.c5 * B.c3 + A.c6 * B.c2 ] e1,
[  A.c1 * B.c6 - A.c3 * B.c4 + A.c4 * B.c3 - A.c6 * B.c1 ] e2,
[ -A.c1 * B.c5 + A.c2 * B.c4 - A.c4 * B.c2 + A.c5 * B.c1 ] e3,
[  A.c2 * B.c3 - A.c3 * B.c2 - A.c5 * B.c6 + A.c6 * B.c5 ] e23,
[ -A.c1 * B.c3 + A.c3 * B.c1 + A.c4 * B.c6 - A.c6 * B.c4 ] e31,
[  A.c1 * B.c2 - A.c2 * B.c1 - A.c4 * B.c5 + A.c5 * B.c4 ] e12,
[                                                      0 ] e123

ega3d commutator product cmt(bivec,bivec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[ -B1.y * B2.z + B1.z * B2.y ] e23,
[  B1.x * B2.z - B1.z * B2.x ] e31,
[ -B1.x * B2.y + B1.y * B2.x ] e12,
[                          0 ] e123

ega3d commutator product cmt(bivec,vec) -> vec:
[                      0 ] 1,
[ -B.y * v.z + B.z * v.y ] e1,
[  B.x * v.z - B.z * v.x ] e2,
[ -B.x * v.y + B.y * v.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e123

ega3d commutator product cmt(vec,bivec) -> vec:
[                      0 ] 1,
[ -v.y * B.z + v.z * B.y ] e1,
[  v.x * B.z - v.z * B.x ] e2,
[ -v.x * B.y + v.y * B.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e123

ega3d commutator product cmt(vec,vec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e123

-------------------------------------------------------------------

ega3d wedge product - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ], 
[   e1,    0,  e12, -e31, e123,    0,    0,    0 ], 
[   e2, -e12,    0,  e23,    0, e123,    0,    0 ], 
[   e3,  e31, -e23,    0,    0,    0, e123,    0 ], 
[  e23, e123,    0,    0,    0,    0,    0,    0 ], 
[  e31,    0, e123,    0,    0,    0,    0,    0 ], 
[  e12,    0,    0, e123,    0,    0,    0,    0 ], 
[ e123,    0,    0,    0,    0,    0,    0,    0 ] 

ega3d wedge product mv ^ mv -> mv:
[                                                                                                   A.c0 * B.c0 ] 1,
[                                                                                     A.c0 * B.c1 + A.c1 * B.c0 ] e1,
[                                                                                     A.c0 * B.c2 + A.c2 * B.c0 ] e2,
[                                                                                     A.c0 * B.c3 + A.c3 * B.c0 ] e3,
[                                                         A.c0 * B.c4 + A.c2 * B.c3 - A.c3 * B.c2 + A.c4 * B.c0 ] e23,
[                                                         A.c0 * B.c5 - A.c1 * B.c3 + A.c3 * B.c1 + A.c5 * B.c0 ] e31,
[                                                         A.c0 * B.c6 + A.c1 * B.c2 - A.c2 * B.c1 + A.c6 * B.c0 ] e12,
[ A.c0 * B.c7 + A.c1 * B.c4 + A.c2 * B.c5 + A.c3 * B.c6 + A.c4 * B.c1 + A.c5 * B.c2 + A.c6 * B.c3 + A.c7 * B.c0 ] e123

ega3d wedge product mv ^ bivec -> mv:
[                                    0 ] 1,
[                                    0 ] e1,
[                                    0 ] e2,
[                                    0 ] e3,
[                           M.c0 * B.x ] e23,
[                           M.c0 * B.y ] e31,
[                           M.c0 * B.z ] e12,
[ M.c1 * B.x + M.c2 * B.y + M.c3 * B.z ] e123

ega3d wedge product bivec ^ mv -> mv:
[                                    0 ] 1,
[                                    0 ] e1,
[                                    0 ] e2,
[                                    0 ] e3,
[                           B.x * M.c0 ] e23,
[                           B.y * M.c0 ] e31,
[                           B.z * M.c0 ] e12,
[ B.x * M.c1 + B.y * M.c2 + B.z * M.c3 ] e123

ega3d wedge product mv ^ vec -> mv:
[                                    0 ] 1,
[                           M.c0 * v.x ] e1,
[                           M.c0 * v.y ] e2,
[                           M.c0 * v.z ] e3,
[              M.c2 * v.z - M.c3 * v.y ] e23,
[             -M.c1 * v.z + M.c3 * v.x ] e31,
[              M.c1 * v.y - M.c2 * v.x ] e12,
[ M.c4 * v.x + M.c5 * v.y + M.c6 * v.z ] e123

ega3d wedge product vec ^ mv -> mv:
[                                    0 ] 1,
[                           v.x * M.c0 ] e1,
[                           v.y * M.c0 ] e2,
[                           v.z * M.c0 ] e3,
[              v.y * M.c3 - v.z * M.c2 ] e23,
[             -v.x * M.c3 + v.z * M.c1 ] e31,
[              v.x * M.c2 - v.y * M.c1 ] e12,
[ v.x * M.c4 + v.y * M.c5 + v.z * M.c6 ] e123

ega3d wedge product mv ^ s -> mv:
[ M.c0 * s ] 1,
[ M.c1 * s ] e1,
[ M.c2 * s ] e2,
[ M.c3 * s ] e3,
[ M.c4 * s ] e23,
[ M.c5 * s ] e31,
[ M.c6 * s ] e12,
[ M.c7 * s ] e123

ega3d wedge product s ^ mv -> mv:
[ s * M.c0 ] 1,
[ s * M.c1 ] e1,
[ s * M.c2 ] e2,
[ s * M.c3 ] e3,
[ s * M.c4 ] e23,
[ s * M.c5 ] e31,
[ s * M.c6 ] e12,
[ s * M.c7 ] e123

ega3d wedge product ps ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product ps ^ bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product bivec ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product ps ^ vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product vec ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product ps ^ s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e123

ega3d wedge product s ^ ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e123

ega3d wedge product bivec ^ bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d wedge product bivec ^ vec -> ps:
[                                 0 ] 1,
[                                 0 ] e1,
[                                 0 ] e2,
[                                 0 ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[ B.x * v.x + B.y * v.y + B.z * v.z ] e123

ega3d wedge product vec ^ bivec -> ps:
[                                 0 ] 1,
[                                 0 ] e1,
[                                 0 ] e2,
[                                 0 ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[ v.x * B.x + v.y * B.y + v.z * B.z ] e123

ega3d wedge product bivec ^ s -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e123

ega3d wedge product s ^ bivec -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e123

ega3d wedge product vec ^ vec -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e123

ega3d wedge product vec ^ s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d wedge product s ^ vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d wedge product s ^ s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

-------------------------------------------------------------------

ega3d inner product - basis product table:
[ 1, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 1, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 1, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 1, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 1, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 1, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 1, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 1 ] 

ega3d inner product dot(mv,mv) -> s:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] 1,
[                                                                                                             0 ] e1,
[                                                                                                             0 ] e2,
[                                                                                                             0 ] e3,
[                                                                                                             0 ] e23,
[                                                                                                             0 ] e31,
[                                                                                                             0 ] e12,
[                                                                                                             0 ] e123

ega3d inner product dot(ps,ps) -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e123

ega3d inner product dot(bivec,bivec) -> s:
[ B1.x * B2.x + B1.y * B2.y + B1.z * B2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d inner product dot(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d inner product dot(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

-------------------------------------------------------------------

ega3d regressive wedge product - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    1 ], 
[    0,    0,    0,    0,    1,    0,    0,   e1 ], 
[    0,    0,    0,    0,    0,    1,    0,   e2 ], 
[    0,    0,    0,    0,    0,    0,    1,   e3 ], 
[    0,    1,    0,    0,    0,   e3,  -e2,  e23 ], 
[    0,    0,    1,    0,  -e3,    0,   e1,  e31 ], 
[    0,    0,    0,    1,   e2,  -e1,    0,  e12 ], 
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ] 

ega3d regressive wedge product rwdg(mv,mv) -> mv:
[ A.c0 * B.c7 + A.c1 * B.c4 + A.c2 * B.c5 + A.c3 * B.c6 + A.c4 * B.c1 + A.c5 * B.c2 + A.c6 * B.c3 + A.c7 * B.c0 ] 1,
[                                                         A.c1 * B.c7 + A.c5 * B.c6 - A.c6 * B.c5 + A.c7 * B.c1 ] e1,
[                                                         A.c2 * B.c7 - A.c4 * B.c6 + A.c6 * B.c4 + A.c7 * B.c2 ] e2,
[                                                         A.c3 * B.c7 + A.c4 * B.c5 - A.c5 * B.c4 + A.c7 * B.c3 ] e3,
[                                                                                     A.c4 * B.c7 + A.c7 * B.c4 ] e23,
[                                                                                     A.c5 * B.c7 + A.c7 * B.c5 ] e31,
[                                                                                     A.c6 * B.c7 + A.c7 * B.c6 ] e12,
[                                                                                                   A.c7 * B.c7 ] e123

ega3d regressive wedge product rwdg(ps,ps) -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ ps1 * ps2 ] e123

ega3d regressive wedge product rwdg(ps,bivec) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ ps * B.x ] e23,
[ ps * B.y ] e31,
[ ps * B.z ] e12,
[        0 ] e123

ega3d regressive wedge product rwdg(bivec,ps) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ B.x * ps ] e23,
[ B.y * ps ] e31,
[ B.z * ps ] e12,
[        0 ] e123

ega3d regressive wedge product rwdg(ps,vec) -> vec:
[        0 ] 1,
[ ps * v.x ] e1,
[ ps * v.y ] e2,
[ ps * v.z ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e123

ega3d regressive wedge product rwdg(vec,ps) -> vec:
[        0 ] 1,
[ v.x * ps ] e1,
[ v.y * ps ] e2,
[ v.z * ps ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e123

ega3d regressive wedge product rwdg(ps,s) -> s:
[ ps * s ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e123

ega3d regressive wedge product rwdg(s,ps) -> s:
[ s * ps ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e123

ega3d regressive wedge product rwdg(bivec,bivec) -> vec:
[                          0 ] 1,
[  B1.y * B2.z - B1.z * B2.y ] e1,
[ -B1.x * B2.z + B1.z * B2.x ] e2,
[  B1.x * B2.y - B1.y * B2.x ] e3,
[                          0 ] e23,
[                          0 ] e31,
[                          0 ] e12,
[                          0 ] e123

ega3d regressive wedge product rwdg(bivec,vec) -> s:
[ B.x * v.x + B.y * v.y + B.z * v.z ] 1,
[                                 0 ] e1,
[                                 0 ] e2,
[                                 0 ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[                                 0 ] e123

ega3d regressive wedge product rwdg(vec,bivec) -> s:
[ v.x * B.x + v.y * B.y + v.z * B.z ] 1,
[                                 0 ] e1,
[                                 0 ] e2,
[                                 0 ] e3,
[                                 0 ] e23,
[                                 0 ] e31,
[                                 0 ] e12,
[                                 0 ] e123

-------------------------------------------------------------------

ega3d left contraction - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ], 
[    0,    1,    0,    0,    0,   e3,  -e2,  e23 ], 
[    0,    0,    1,    0,  -e3,    0,   e1,  e31 ], 
[    0,    0,    0,    1,   e2,  -e1,    0,  e12 ], 
[    0,    0,    0,    0,    1,    0,    0,   e1 ], 
[    0,    0,    0,    0,    0,    1,    0,   e2 ], 
[    0,    0,    0,    0,    0,    0,    1,   e3 ], 
[    0,    0,    0,    0,    0,    0,    0,    1 ] 

ega3d left contraction mv << mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] 1,
[                                                         A.c0 * B.c1 + A.c2 * B.c6 - A.c3 * B.c5 + A.c4 * B.c7 ] e1,
[                                                         A.c0 * B.c2 - A.c1 * B.c6 + A.c3 * B.c4 + A.c5 * B.c7 ] e2,
[                                                         A.c0 * B.c3 + A.c1 * B.c5 - A.c2 * B.c4 + A.c6 * B.c7 ] e3,
[                                                                                     A.c0 * B.c4 + A.c1 * B.c7 ] e23,
[                                                                                     A.c0 * B.c5 + A.c2 * B.c7 ] e31,
[                                                                                     A.c0 * B.c6 + A.c3 * B.c7 ] e12,
[                                                                                                   A.c0 * B.c7 ] e123

ega3d left contraction bivec << mv -> mv:
[ B.x * M.c4 + B.y * M.c5 + B.z * M.c6 ] 1,
[                           B.x * M.c7 ] e1,
[                           B.y * M.c7 ] e2,
[                           B.z * M.c7 ] e3,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e123

ega3d left contraction vec << mv -> mv:
[ v.x * M.c1 + v.y * M.c2 + v.z * M.c3 ] 1,
[              v.y * M.c6 - v.z * M.c5 ] e1,
[             -v.x * M.c6 + v.z * M.c4 ] e2,
[              v.x * M.c5 - v.y * M.c4 ] e3,
[                           v.x * M.c7 ] e23,
[                           v.y * M.c7 ] e31,
[                           v.z * M.c7 ] e12,
[                                    0 ] e123

ega3d left contraction s << mv -> mv:
[ s * M.c0 ] 1,
[ s * M.c1 ] e1,
[ s * M.c2 ] e2,
[ s * M.c3 ] e3,
[ s * M.c4 ] e23,
[ s * M.c5 ] e31,
[ s * M.c6 ] e12,
[ s * M.c7 ] e123

ega3d left contraction s << mv_e -> mv_e:
[ s * M.c0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ s * M.c1 ] e23,
[ s * M.c2 ] e31,
[ s * M.c3 ] e12,
[        0 ] e123

ega3d left contraction s << mv_u -> mv_u:
[        0 ] 1,
[ s * M.c0 ] e1,
[ s * M.c1 ] e2,
[ s * M.c2 ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ s * M.c3 ] e123

ega3d left contraction ps << ps -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e123

ega3d left contraction ps << bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction bivec << ps -> vec:
[        0 ] 1,
[ B.x * ps ] e1,
[ B.y * ps ] e2,
[ B.z * ps ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e123

ega3d left contraction ps << vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction vec << ps -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ v.x * ps ] e23,
[ v.y * ps ] e31,
[ v.z * ps ] e12,
[        0 ] e123

ega3d left contraction ps << s -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction s << ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e123

ega3d left contraction bivec << bivec -> s:
[ B1.x * B2.x + B1.y * B2.y + B1.z * B2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d left contraction bivec << vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction vec << bivec -> vec:
[                      0 ] 1,
[  v.y * B.z - v.z * B.y ] e1,
[ -v.x * B.z + v.z * B.x ] e2,
[  v.x * B.y - v.y * B.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e123

ega3d left contraction bivec << s -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction s << bivec -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e123

ega3d left contraction vec << vec -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d left contraction vec << s -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d left contraction s << vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d left contraction s << s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

-------------------------------------------------------------------

ega3d right contraction - basis product table:
[    1,    0,    0,    0,    0,    0,    0,    0 ], 
[   e1,    1,    0,    0,    0,    0,    0,    0 ], 
[   e2,    0,    1,    0,    0,    0,    0,    0 ], 
[   e3,    0,    0,    1,    0,    0,    0,    0 ], 
[  e23,    0,   e3,  -e2,    1,    0,    0,    0 ], 
[  e31,  -e3,    0,   e1,    0,    1,    0,    0 ], 
[  e12,   e2,  -e1,    0,    0,    0,    1,    0 ], 
[ e123,  e23,  e31,  e12,   e1,   e2,   e3,    1 ] 

ega3d right contraction mv >> mv -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] 1,
[                                                         A.c1 * B.c0 + A.c5 * B.c3 - A.c6 * B.c2 + A.c7 * B.c4 ] e1,
[                                                         A.c2 * B.c0 - A.c4 * B.c3 + A.c6 * B.c1 + A.c7 * B.c5 ] e2,
[                                                         A.c3 * B.c0 + A.c4 * B.c2 - A.c5 * B.c1 + A.c7 * B.c6 ] e3,
[                                                                                     A.c4 * B.c0 + A.c7 * B.c1 ] e23,
[                                                                                     A.c5 * B.c0 + A.c7 * B.c2 ] e31,
[                                                                                     A.c6 * B.c0 + A.c7 * B.c3 ] e12,
[                                                                                                   A.c7 * B.c0 ] e123

ega3d right contraction mv >> bivec -> mv:
[ M.c4 * B.x + M.c5 * B.y + M.c6 * B.z ] 1,
[                           M.c7 * B.x ] e1,
[                           M.c7 * B.y ] e2,
[                           M.c7 * B.z ] e3,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e123

ega3d right contraction mv >> vec -> mv:
[ M.c1 * v.x + M.c2 * v.y + M.c3 * v.z ] 1,
[              M.c5 * v.z - M.c6 * v.y ] e1,
[             -M.c4 * v.z + M.c6 * v.x ] e2,
[              M.c4 * v.y - M.c5 * v.x ] e3,
[                           M.c7 * v.x ] e23,
[                           M.c7 * v.y ] e31,
[                           M.c7 * v.z ] e12,
[                                    0 ] e123

ega3d right contraction mv >> s -> mv:
[ M.c0 * s ] 1,
[ M.c1 * s ] e1,
[ M.c2 * s ] e2,
[ M.c3 * s ] e3,
[ M.c4 * s ] e23,
[ M.c5 * s ] e31,
[ M.c6 * s ] e12,
[ M.c7 * s ] e123

ega3d right contraction mv_e >> s -> mv_e:
[ M.c0 * s ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ M.c1 * s ] e23,
[ M.c2 * s ] e31,
[ M.c3 * s ] e12,
[        0 ] e123

ega3d right contraction mv_u >> s -> mv_u:
[        0 ] 1,
[ M.c0 * s ] e1,
[ M.c1 * s ] e2,
[ M.c2 * s ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ M.c3 * s ] e123

ega3d right contraction ps >> ps -> s:
[ ps1 * ps2 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e123

ega3d right contraction ps >> bivec -> vec:
[        0 ] 1,
[ ps * B.x ] e1,
[ ps * B.y ] e2,
[ ps * B.z ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e123

ega3d right contraction bivec >> ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction ps >> vec -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ ps * v.x ] e23,
[ ps * v.y ] e31,
[ ps * v.z ] e12,
[        0 ] e123

ega3d right contraction vec >> ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction ps >> s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e123

ega3d right contraction s >> ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction bivec >> bivec -> s:
[ B1.x * B2.x + B1.y * B2.y + B1.z * B2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d right contraction bivec >> vec -> vec:
[                      0 ] 1,
[  B.y * v.z - B.z * v.y ] e1,
[ -B.x * v.z + B.z * v.x ] e2,
[  B.x * v.y - B.y * v.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e123

ega3d right contraction vec >> bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction bivec >> s -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e123

ega3d right contraction s >> bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction vec >> vec -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e123

ega3d right contraction vec >> s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

ega3d right contraction s >> vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e123

ega3d right contraction s >> s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e123

-------------------------------------------------------------------

ega3d left expansion - basis product table:
[ e123,    0,    0,    0,    0,    0,    0,    0 ], 
[  e23, e123,    0,    0,    0,    0,    0,    0 ], 
[  e31,    0, e123,    0,    0,    0,    0,    0 ], 
[  e12,    0,    0, e123,    0,    0,    0,    0 ], 
[   e1,    0,  e12, -e31, e123,    0,    0,    0 ], 
[   e2, -e12,    0,  e23,    0, e123,    0,    0 ], 
[   e3,  e31, -e23,    0,    0,    0, e123,    0 ], 
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ] 

ega3d left expansion lexpand(mv,mv) -> mv:
[                                                                                                   A.c7 * B.c0 ] 1,
[                                                                                     A.c4 * B.c0 + A.c7 * B.c1 ] e1,
[                                                                                     A.c5 * B.c0 + A.c7 * B.c2 ] e2,
[                                                                                     A.c6 * B.c0 + A.c7 * B.c3 ] e3,
[                                                         A.c1 * B.c0 + A.c5 * B.c3 - A.c6 * B.c2 + A.c7 * B.c4 ] e23,
[                                                         A.c2 * B.c0 - A.c4 * B.c3 + A.c6 * B.c1 + A.c7 * B.c5 ] e31,
[                                                         A.c3 * B.c0 + A.c4 * B.c2 - A.c5 * B.c1 + A.c7 * B.c6 ] e12,
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] e123

ega3d left expansion lexpand(bivec,vec) -> bivec:
[                      0 ] 1,
[                      0 ] e1,
[                      0 ] e2,
[                      0 ] e3,
[  B.y * v.z - B.z * v.y ] e23,
[ -B.x * v.z + B.z * v.x ] e31,
[  B.x * v.y - B.y * v.x ] e12,
[                      0 ] e123

-------------------------------------------------------------------

ega3d right expansion - basis product table:
[ e123,  e23,  e31,  e12,   e1,   e2,   e3,    1 ], 
[    0, e123,    0,    0,    0,  e12, -e31,   e1 ], 
[    0,    0, e123,    0, -e12,    0,  e23,   e2 ], 
[    0,    0,    0, e123,  e31, -e23,    0,   e3 ], 
[    0,    0,    0,    0, e123,    0,    0,  e23 ], 
[    0,    0,    0,    0,    0, e123,    0,  e31 ], 
[    0,    0,    0,    0,    0,    0, e123,  e12 ], 
[    0,    0,    0,    0,    0,    0,    0, e123 ] 

ega3d right expansion rexpand(mv,mv) -> mv:
[                                                                                                   A.c0 * B.c7 ] 1,
[                                                                                     A.c0 * B.c4 + A.c1 * B.c7 ] e1,
[                                                                                     A.c0 * B.c5 + A.c2 * B.c7 ] e2,
[                                                                                     A.c0 * B.c6 + A.c3 * B.c7 ] e3,
[                                                         A.c0 * B.c1 + A.c2 * B.c6 - A.c3 * B.c5 + A.c4 * B.c7 ] e23,
[                                                         A.c0 * B.c2 - A.c1 * B.c6 + A.c3 * B.c4 + A.c5 * B.c7 ] e31,
[                                                         A.c0 * B.c3 + A.c1 * B.c5 - A.c2 * B.c4 + A.c6 * B.c7 ] e12,
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] e123

ega3d right expansion rexpand(vec,bivec) -> bivec:
[                      0 ] 1,
[                      0 ] e1,
[                      0 ] e2,
[                      0 ] e3,
[  v.y * B.z - v.z * B.y ] e23,
[ -v.x * B.z + v.z * B.x ] e31,
[  v.x * B.y - v.y * B.x ] e12,
[                      0 ] e123

-------------------------------------------------------------------

ega3d sandwich product - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e123 ], 
[   e1,    1,  e12, -e31, e123,  -e3,   e2,  e23 ], 
[   e2, -e12,    1,  e23,   e3, e123,  -e1,  e31 ], 
[   e3,  e31, -e23,    1,  -e2,   e1, e123,  e12 ], 
[  e23, e123,  -e3,   e2,   -1, -e12,  e31,  -e1 ], 
[  e31,   e3, e123,  -e1,  e12,   -1, -e23,  -e2 ], 
[  e12,  -e2,   e1, e123, -e31,  e23,   -1,  -e3 ], 
[ e123,  e23,  e31,  e12,  -e1,  -e2,  -e3,   -1 ] 

ega3d sandwich product mv_e * vec -> mv_u_tmp:
mv_u_tmp:
[                                      0 ] 1,
[ (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) ] e1,
[ (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) ] e2,
[ (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) ] e3,
[                                      0 ] e23,
[                                      0 ] e31,
[                                      0 ] e12,
[ (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) ] e123

ega3d sandwich product mv_u_tmp * rev(mv_e) -> mv_u_res:
[                                                                                                                                                                                              0 ] 1,
[  (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c0 + (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c3 - (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c2 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c1 ] e1,
[ -(R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c3 + (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c0 + (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c1 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c2 ] e2,
[  (R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c2 - (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c1 + (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c0 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c3 ] e3,
[                                                                                                                                                                                              0 ] e23,
[                                                                                                                                                                                              0 ] e31,
[                                                                                                                                                                                              0 ] e12,
[ -(R.c0 * v.x - R.c2 * v.z + R.c3 * v.y) * R.c1 - (R.c0 * v.y + R.c1 * v.z - R.c3 * v.x) * R.c2 - (R.c0 * v.z - R.c1 * v.y + R.c2 * v.x) * R.c3 + (R.c1 * v.x + R.c2 * v.y + R.c3 * v.z) * R.c0 ] e123

ega3d sandwich product mv_e * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[  (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) ] e23,
[  (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) ] e31,
[  (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) ] e12,
[                                       0 ] e123

ega3d sandwich product mv_e_tmp * rev(mv_e) -> mv_e_res:
[  (-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c0 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c1 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c2 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c3 ] 1,
[                                                                                                                                                                                               0 ] e1,
[                                                                                                                                                                                               0 ] e2,
[                                                                                                                                                                                               0 ] e3,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c1 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c0 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c3 - (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c2 ] e23,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c2 - (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c3 + (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c0 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c1 ] e31,
[ -(-R.c1 * B.x - R.c2 * B.y - R.c3 * B.z) * R.c3 + (R.c0 * B.x - R.c2 * B.z + R.c3 * B.y) * R.c2 - (R.c0 * B.y + R.c1 * B.z - R.c3 * B.x) * R.c1 + (R.c0 * B.z - R.c1 * B.y + R.c2 * B.x) * R.c0 ] e12,
[                                                                                                                                                                                               0 ] e123

-------------------------------------------------------------------

pga2dp geometric product - basis product table:
[     1,    e1,    e2,    e3,   e23,   e31,   e12,  e321 ], 
[    e1,     1,   e12,  -e31, -e321,   -e3,    e2,  -e23 ], 
[    e2,  -e12,     1,   e23,    e3, -e321,   -e1,  -e31 ], 
[    e3,   e31,  -e23,     0,     0,     0, -e321,     0 ], 
[   e23, -e321,   -e3,     0,     0,     0,   e31,     0 ], 
[   e31,    e3, -e321,     0,     0,     0,  -e23,     0 ], 
[   e12,   -e2,    e1, -e321,  -e31,   e23,    -1,    e3 ], 
[  e321,  -e23,  -e31,     0,     0,     0,    e3,     0 ] 

pga2dp geometric product mv * mv -> mv:
[                                                         A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 - A.c6 * B.c6 ] 1,
[                                                         A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c6 + A.c6 * B.c2 ] e1,
[                                                         A.c0 * B.c2 + A.c1 * B.c6 + A.c2 * B.c0 - A.c6 * B.c1 ] e2,
[ A.c0 * B.c3 - A.c1 * B.c5 + A.c2 * B.c4 + A.c3 * B.c0 - A.c4 * B.c2 + A.c5 * B.c1 + A.c6 * B.c7 + A.c7 * B.c6 ] e3,
[ A.c0 * B.c4 - A.c1 * B.c7 + A.c2 * B.c3 - A.c3 * B.c2 + A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 - A.c7 * B.c1 ] e23,
[ A.c0 * B.c5 - A.c1 * B.c3 - A.c2 * B.c7 + A.c3 * B.c1 + A.c4 * B.c6 + A.c5 * B.c0 - A.c6 * B.c4 - A.c7 * B.c2 ] e31,
[                                                         A.c0 * B.c6 + A.c1 * B.c2 - A.c2 * B.c1 + A.c6 * B.c0 ] e12,
[ A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] e321

pga2dp geometric product mv * mv_e -> mv:
[                              A.c0 * B.c0 - A.c6 * B.c3 ] 1,
[                              A.c1 * B.c0 - A.c2 * B.c3 ] e1,
[                              A.c1 * B.c3 + A.c2 * B.c0 ] e2,
[ -A.c1 * B.c2 + A.c2 * B.c1 + A.c3 * B.c0 + A.c7 * B.c3 ] e3,
[  A.c0 * B.c1 + A.c4 * B.c0 - A.c5 * B.c3 + A.c6 * B.c2 ] e23,
[  A.c0 * B.c2 + A.c4 * B.c3 + A.c5 * B.c0 - A.c6 * B.c1 ] e31,
[                              A.c0 * B.c3 + A.c6 * B.c0 ] e12,
[ -A.c1 * B.c1 - A.c2 * B.c2 - A.c3 * B.c3 + A.c7 * B.c0 ] e321

pga2dp geometric product mv_e * mv -> mv:
[                             A.c0 * B.c0 - A.c3 * B.c6 ] 1,
[                             A.c0 * B.c1 + A.c3 * B.c2 ] e1,
[                             A.c0 * B.c2 - A.c3 * B.c1 ] e2,
[ A.c0 * B.c3 - A.c1 * B.c2 + A.c2 * B.c1 + A.c3 * B.c7 ] e3,
[ A.c0 * B.c4 + A.c1 * B.c0 - A.c2 * B.c6 + A.c3 * B.c5 ] e23,
[ A.c0 * B.c5 + A.c1 * B.c6 + A.c2 * B.c0 - A.c3 * B.c4 ] e31,
[                             A.c0 * B.c6 + A.c3 * B.c0 ] e12,
[ A.c0 * B.c7 - A.c1 * B.c1 - A.c2 * B.c2 - A.c3 * B.c3 ] e321

pga2dp geometric product mv * mv_u -> mv:
[                              A.c1 * B.c0 + A.c2 * B.c1 ] 1,
[                              A.c0 * B.c0 + A.c6 * B.c1 ] e1,
[                              A.c0 * B.c1 - A.c6 * B.c0 ] e2,
[  A.c0 * B.c2 - A.c4 * B.c1 + A.c5 * B.c0 + A.c6 * B.c3 ] e3,
[ -A.c1 * B.c3 + A.c2 * B.c2 - A.c3 * B.c1 - A.c7 * B.c0 ] e23,
[ -A.c1 * B.c2 - A.c2 * B.c3 + A.c3 * B.c0 - A.c7 * B.c1 ] e31,
[                              A.c1 * B.c1 - A.c2 * B.c0 ] e12,
[  A.c0 * B.c3 - A.c4 * B.c0 - A.c5 * B.c1 - A.c6 * B.c2 ] e321

pga2dp geometric product mv_u * mv -> mv:
[                              A.c0 * B.c1 + A.c1 * B.c2 ] 1,
[                              A.c0 * B.c0 - A.c1 * B.c6 ] e1,
[                              A.c0 * B.c6 + A.c1 * B.c0 ] e2,
[ -A.c0 * B.c5 + A.c1 * B.c4 + A.c2 * B.c0 + A.c3 * B.c6 ] e3,
[ -A.c0 * B.c7 + A.c1 * B.c3 - A.c2 * B.c2 - A.c3 * B.c1 ] e23,
[ -A.c0 * B.c3 - A.c1 * B.c7 + A.c2 * B.c1 - A.c3 * B.c2 ] e31,
[                              A.c0 * B.c2 - A.c1 * B.c1 ] e12,
[ -A.c0 * B.c4 - A.c1 * B.c5 - A.c2 * B.c6 + A.c3 * B.c0 ] e321

pga2dp geometric product mv * ps -> mv:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[  A.c6 * ps ] e3,
[ -A.c1 * ps ] e23,
[ -A.c2 * ps ] e31,
[          0 ] e12,
[  A.c0 * ps ] e321

pga2dp geometric product ps * mv -> mv:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[  ps * B.c6 ] e3,
[ -ps * B.c1 ] e23,
[ -ps * B.c2 ] e31,
[          0 ] e12,
[  ps * B.c0 ] e321

pga2dp geometric product mv_e * mv_e -> mv_e:
[                             A.c0 * B.c0 - A.c3 * B.c3 ] 1,
[                                                     0 ] e1,
[                                                     0 ] e2,
[                                                     0 ] e3,
[ A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c3 + A.c3 * B.c2 ] e23,
[ A.c0 * B.c2 + A.c1 * B.c3 + A.c2 * B.c0 - A.c3 * B.c1 ] e31,
[                             A.c0 * B.c3 + A.c3 * B.c0 ] e12,
[                                                     0 ] e321

pga2dp geometric product mv_u * mv_u -> mv_e:
[                              A.c0 * B.c0 + A.c1 * B.c1 ] 1,
[                                                      0 ] e1,
[                                                      0 ] e2,
[                                                      0 ] e3,
[ -A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 - A.c3 * B.c0 ] e23,
[ -A.c0 * B.c2 - A.c1 * B.c3 + A.c2 * B.c0 - A.c3 * B.c1 ] e31,
[                              A.c0 * B.c1 - A.c1 * B.c0 ] e12,
[                                                      0 ] e321

pga2dp geometric product mv_e * mv_u -> mv_u:
[                                                     0 ] 1,
[                             A.c0 * B.c0 + A.c3 * B.c1 ] e1,
[                             A.c0 * B.c1 - A.c3 * B.c0 ] e2,
[ A.c0 * B.c2 - A.c1 * B.c1 + A.c2 * B.c0 + A.c3 * B.c3 ] e3,
[                                                     0 ] e23,
[                                                     0 ] e31,
[                                                     0 ] e12,
[ A.c0 * B.c3 - A.c1 * B.c0 - A.c2 * B.c1 - A.c3 * B.c2 ] e321

pga2dp geometric product mv_u * mv_e -> mv_u:
[                                                      0 ] 1,
[                              A.c0 * B.c0 - A.c1 * B.c3 ] e1,
[                              A.c0 * B.c3 + A.c1 * B.c0 ] e2,
[ -A.c0 * B.c2 + A.c1 * B.c1 + A.c2 * B.c0 + A.c3 * B.c3 ] e3,
[                                                      0 ] e23,
[                                                      0 ] e31,
[                                                      0 ] e12,
[ -A.c0 * B.c1 - A.c1 * B.c2 - A.c2 * B.c3 + A.c3 * B.c0 ] e321

pga2dp geometric product mv_e * ps -> mv_u:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ A.c3 * ps ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ A.c0 * ps ] e321

pga2dp geometric product ps * mv_e -> mv_u:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ ps * B.c3 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ ps * B.c0 ] e321

pga2dp geometric product mv_u * ps -> mv_e:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[ -A.c0 * ps ] e23,
[ -A.c1 * ps ] e31,
[          0 ] e12,
[          0 ] e321

pga2dp geometric product ps * mv_u -> mv_e:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[ -ps * B.c0 ] e23,
[ -ps * B.c1 ] e31,
[          0 ] e12,
[          0 ] e321

pga2dp geometric product mv_e * bivec -> mv_e:
[                          -M.c3 * B.z ] 1,
[                                    0 ] e1,
[                                    0 ] e2,
[                                    0 ] e3,
[ M.c0 * B.x - M.c2 * B.z + M.c3 * B.y ] e23,
[ M.c0 * B.y + M.c1 * B.z - M.c3 * B.x ] e31,
[                           M.c0 * B.z ] e12,
[                                    0 ] e321

pga2dp geometric product bivec * mv_e -> mv_e:
[                          -B.z * M.c3 ] 1,
[                                    0 ] e1,
[                                    0 ] e2,
[                                    0 ] e3,
[ B.x * M.c0 - B.y * M.c3 + B.z * M.c2 ] e23,
[ B.x * M.c3 + B.y * M.c0 - B.z * M.c1 ] e31,
[                           B.z * M.c0 ] e12,
[                                    0 ] e321

pga2dp geometric product mv_u * bivec -> mv_u:
[                                     0 ] 1,
[                           -M.c1 * B.z ] e1,
[                            M.c0 * B.z ] e2,
[ -M.c0 * B.y + M.c1 * B.x + M.c3 * B.z ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -M.c0 * B.x - M.c1 * B.y - M.c2 * B.z ] e321

pga2dp geometric product bivec * mv_u -> mv_u:
[                                     0 ] 1,
[                            B.z * M.c1 ] e1,
[                           -B.z * M.c0 ] e2,
[ -B.x * M.c1 + B.y * M.c0 + B.z * M.c3 ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -B.x * M.c0 - B.y * M.c1 - B.z * M.c2 ] e321

pga2dp geometric product mv_e * vec -> mv_u:
[                                     0 ] 1,
[               A.c0 * v.x + A.c3 * v.y ] e1,
[               A.c0 * v.y - A.c3 * v.x ] e2,
[  A.c0 * v.z - A.c1 * v.y + A.c2 * v.x ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -A.c1 * v.x - A.c2 * v.y - A.c3 * v.z ] e321

pga2dp geometric product vec * mv_e -> mv_u:
[                                     0 ] 1,
[               v.x * B.c0 - v.y * B.c3 ] e1,
[               v.x * B.c3 + v.y * B.c0 ] e2,
[ -v.x * B.c2 + v.y * B.c1 + v.z * B.c0 ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -v.x * B.c1 - v.y * B.c2 - v.z * B.c3 ] e321

pga2dp geometric product ps * ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp geometric product ps * bivec -> vec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[ ps * B.z ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e321

pga2dp geometric product bivec * ps -> vec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[ B.z * ps ] e3,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e321

pga2dp geometric product ps * vec -> bivec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[ -ps * v.x ] e23,
[ -ps * v.y ] e31,
[         0 ] e12,
[         0 ] e321

pga2dp geometric product vec * ps -> bivec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[ -v.x * ps ] e23,
[ -v.y * ps ] e31,
[         0 ] e12,
[         0 ] e321

pga2dp geometric product ps * s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e321

pga2dp geometric product s * ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e321

pga2dp geometric product bivec * bivec -> mv_e:
[               -B1.z * B2.z ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[ -B1.y * B2.z + B1.z * B2.y ] e23,
[  B1.x * B2.z - B1.z * B2.x ] e31,
[                          0 ] e12,
[                          0 ] e321

pga2dp geometric product bivec * vec -> mv_u:
[                                  0 ] 1,
[                          B.z * v.y ] e1,
[                         -B.z * v.x ] e2,
[             -B.x * v.y + B.y * v.x ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[ -B.x * v.x - B.y * v.y - B.z * v.z ] e321

pga2dp geometric product vec * bivec -> mv_u:
[                                  0 ] 1,
[                         -v.y * B.z ] e1,
[                          v.x * B.z ] e2,
[             -v.x * B.y + v.y * B.x ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[ -v.x * B.x - v.y * B.y - v.z * B.z ] e321

pga2dp geometric product bivec * s -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e321

pga2dp geometric product s * bivec -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e321

pga2dp geometric product vec * vec -> mv_e:
[  v1.x * v2.x + v1.y * v2.y ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e321

pga2dp geometric product vec * s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp geometric product s * vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp geometric product s * s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

-------------------------------------------------------------------

pga2dp commutator product - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,  e12, -e31,    0,  -e3,   e2,    0 ], 
[    0, -e12,    0,  e23,   e3,    0,  -e1,    0 ], 
[    0,  e31, -e23,    0,    0,    0,    0,    0 ], 
[    0,    0,  -e3,    0,    0,    0,  e31,    0 ], 
[    0,   e3,    0,    0,    0,    0, -e23,    0 ], 
[    0,  -e2,   e1,    0, -e31,  e23,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ] 

pga2dp commutator product cmt(mv,mv) -> mv:
[                                                      0 ] 1,
[                             -A.c2 * B.c6 + A.c6 * B.c2 ] e1,
[                              A.c1 * B.c6 - A.c6 * B.c1 ] e2,
[ -A.c1 * B.c5 + A.c2 * B.c4 - A.c4 * B.c2 + A.c5 * B.c1 ] e3,
[  A.c2 * B.c3 - A.c3 * B.c2 - A.c5 * B.c6 + A.c6 * B.c5 ] e23,
[ -A.c1 * B.c3 + A.c3 * B.c1 + A.c4 * B.c6 - A.c6 * B.c4 ] e31,
[                              A.c1 * B.c2 - A.c2 * B.c1 ] e12,
[                                                      0 ] e321

pga2dp commutator product cmt(bivec,bivec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[ -B1.y * B2.z + B1.z * B2.y ] e23,
[  B1.x * B2.z - B1.z * B2.x ] e31,
[                          0 ] e12,
[                          0 ] e321

pga2dp commutator product cmt(bivec,vec) -> vec:
[                      0 ] 1,
[              B.z * v.y ] e1,
[             -B.z * v.x ] e2,
[ -B.x * v.y + B.y * v.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e321

pga2dp commutator product cmt(vec,bivec) -> vec:
[                      0 ] 1,
[             -v.y * B.z ] e1,
[              v.x * B.z ] e2,
[ -v.x * B.y + v.y * B.x ] e3,
[                      0 ] e23,
[                      0 ] e31,
[                      0 ] e12,
[                      0 ] e321

pga2dp commutator product cmt(vec,vec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e321

-------------------------------------------------------------------

pga2dp wedge product - basis product table:
[     1,    e1,    e2,    e3,   e23,   e31,   e12,  e321 ], 
[    e1,     0,   e12,  -e31, -e321,     0,     0,     0 ], 
[    e2,  -e12,     0,   e23,     0, -e321,     0,     0 ], 
[    e3,   e31,  -e23,     0,     0,     0, -e321,     0 ], 
[   e23, -e321,     0,     0,     0,     0,     0,     0 ], 
[   e31,     0, -e321,     0,     0,     0,     0,     0 ], 
[   e12,     0,     0, -e321,     0,     0,     0,     0 ], 
[  e321,     0,     0,     0,     0,     0,     0,     0 ] 

pga2dp wedge product mv ^ mv -> mv:
[                                                                                                   A.c0 * B.c0 ] 1,
[                                                                                     A.c0 * B.c1 + A.c1 * B.c0 ] e1,
[                                                                                     A.c0 * B.c2 + A.c2 * B.c0 ] e2,
[                                                                                     A.c0 * B.c3 + A.c3 * B.c0 ] e3,
[                                                         A.c0 * B.c4 + A.c2 * B.c3 - A.c3 * B.c2 + A.c4 * B.c0 ] e23,
[                                                         A.c0 * B.c5 - A.c1 * B.c3 + A.c3 * B.c1 + A.c5 * B.c0 ] e31,
[                                                         A.c0 * B.c6 + A.c1 * B.c2 - A.c2 * B.c1 + A.c6 * B.c0 ] e12,
[ A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] e321

pga2dp wedge product ps ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product ps ^ bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product bivec ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product ps ^ vec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product vec ^ ps -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product ps ^ s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e321

pga2dp wedge product s ^ ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e321

pga2dp wedge product bivec ^ bivec -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp wedge product bivec ^ vec -> ps:
[                                  0 ] 1,
[                                  0 ] e1,
[                                  0 ] e2,
[                                  0 ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[ -B.x * v.x - B.y * v.y - B.z * v.z ] e321

pga2dp wedge product vec ^ bivec -> ps:
[                                  0 ] 1,
[                                  0 ] e1,
[                                  0 ] e2,
[                                  0 ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[ -v.x * B.x - v.y * B.y - v.z * B.z ] e321

pga2dp wedge product bivec ^ s -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e321

pga2dp wedge product s ^ bivec -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e321

pga2dp wedge product vec ^ vec -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e321

pga2dp wedge product vec ^ s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp wedge product s ^ vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp wedge product s ^ s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

-------------------------------------------------------------------

pga2dp inner product - basis product table:
[ 1, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 1, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 1, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 1, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0 ] 

pga2dp inner product dot(mv,mv) -> s:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c6 * B.c6 ] 1,
[                                                     0 ] e1,
[                                                     0 ] e2,
[                                                     0 ] e3,
[                                                     0 ] e23,
[                                                     0 ] e31,
[                                                     0 ] e12,
[                                                     0 ] e321

pga2dp inner product dot(ps,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp inner product dot(bivec,bivec) -> s:
[ B1.z * B2.z ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e321

pga2dp inner product dot(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[                         0 ] e321

pga2dp inner product dot(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

-------------------------------------------------------------------

pga2dp regressive wedge product - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    1 ], 
[    0,    0,    0,    0,   -1,    0,    0,   e1 ], 
[    0,    0,    0,    0,    0,   -1,    0,   e2 ], 
[    0,    0,    0,    0,    0,    0,   -1,   e3 ], 
[    0,   -1,    0,    0,    0,  -e3,   e2,  e23 ], 
[    0,    0,   -1,    0,   e3,    0,  -e1,  e31 ], 
[    0,    0,    0,   -1,  -e2,   e1,    0,  e12 ], 
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e321 ] 

pga2dp regressive wedge product rwdg(mv,mv) -> mv:
[ A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] 1,
[                                                         A.c1 * B.c7 - A.c5 * B.c6 + A.c6 * B.c5 + A.c7 * B.c1 ] e1,
[                                                         A.c2 * B.c7 + A.c4 * B.c6 - A.c6 * B.c4 + A.c7 * B.c2 ] e2,
[                                                         A.c3 * B.c7 - A.c4 * B.c5 + A.c5 * B.c4 + A.c7 * B.c3 ] e3,
[                                                                                     A.c4 * B.c7 + A.c7 * B.c4 ] e23,
[                                                                                     A.c5 * B.c7 + A.c7 * B.c5 ] e31,
[                                                                                     A.c6 * B.c7 + A.c7 * B.c6 ] e12,
[                                                                                                   A.c7 * B.c7 ] e321

pga2dp regressive wedge product rwdg(ps,bivec) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ ps * B.x ] e23,
[ ps * B.y ] e31,
[ ps * B.z ] e12,
[        0 ] e321

pga2dp regressive wedge product rwdg(bivec,ps) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ B.x * ps ] e23,
[ B.y * ps ] e31,
[ B.z * ps ] e12,
[        0 ] e321

pga2dp regressive wedge product rwdg(bivec,bivec) -> vec:
[                          0 ] 1,
[ -B1.y * B2.z + B1.z * B2.y ] e1,
[  B1.x * B2.z - B1.z * B2.x ] e2,
[ -B1.x * B2.y + B1.y * B2.x ] e3,
[                          0 ] e23,
[                          0 ] e31,
[                          0 ] e12,
[                          0 ] e321

pga2dp regressive wedge product rwdg(bivec,vec) -> s:
[ -B.x * v.x - B.y * v.y - B.z * v.z ] 1,
[                                  0 ] e1,
[                                  0 ] e2,
[                                  0 ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[                                  0 ] e321

pga2dp regressive wedge product rwdg(vec,bivec) -> s:
[ -v.x * B.x - v.y * B.y - v.z * B.z ] 1,
[                                  0 ] e1,
[                                  0 ] e2,
[                                  0 ] e3,
[                                  0 ] e23,
[                                  0 ] e31,
[                                  0 ] e12,
[                                  0 ] e321

-------------------------------------------------------------------

pga2dp regressive inner product - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0, e321,    0,    0,    0,    0 ], 
[    0,    0,    0,    0, e321,    0,    0,    0 ], 
[    0,    0,    0,    0,    0, e321,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0, e321 ] 

pga2dp regressive inner product rdot(ps,ps) -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ ps1 * ps2 ] e321

pga2dp regressive inner product rdot(bivec,bivec) -> ps:
[                         0 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[ B1.x * B2.x + B1.y * B2.y ] e321

pga2dp regressive inner product rdot(vec,vec) -> ps:
[           0 ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[ v1.z * v2.z ] e321

pga2dp regressive inner product rdot(s,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

-------------------------------------------------------------------

pga2dp regressive geometric product - basis product table:
[     0,     0,     0,   e12,   -e1,   -e2,     0,     1 ], 
[     0,     0,     0,   -e2,    -1,   e12,     0,    e1 ], 
[     0,     0,     0,    e1,  -e12,    -1,     0,    e2 ], 
[   e12,    e2,   -e1, -e321,   e31,  -e23,    -1,    e3 ], 
[   -e1,    -1,   e12,  -e31,  e321,   -e3,    e2,   e23 ], 
[   -e2,  -e12,    -1,   e23,    e3,  e321,   -e1,   e31 ], 
[     0,     0,     0,    -1,   -e2,    e1,     0,   e12 ], 
[     1,    e1,    e2,    e3,   e23,   e31,   e12,  e321 ] 

pga2dp regressive geometric product rgpr(mv,mv) -> mv:
[  A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] 1,
[ -A.c0 * B.c4 + A.c1 * B.c7 + A.c2 * B.c3 - A.c3 * B.c2 - A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 + A.c7 * B.c1 ] e1,
[ -A.c0 * B.c5 - A.c1 * B.c3 + A.c2 * B.c7 + A.c3 * B.c1 + A.c4 * B.c6 - A.c5 * B.c0 - A.c6 * B.c4 + A.c7 * B.c2 ] e2,
[                                                          A.c3 * B.c7 - A.c4 * B.c5 + A.c5 * B.c4 + A.c7 * B.c3 ] e3,
[                                                         -A.c3 * B.c5 + A.c4 * B.c7 + A.c5 * B.c3 + A.c7 * B.c4 ] e23,
[                                                          A.c3 * B.c4 - A.c4 * B.c3 + A.c5 * B.c7 + A.c7 * B.c5 ] e31,
[  A.c0 * B.c3 + A.c1 * B.c5 - A.c2 * B.c4 + A.c3 * B.c0 + A.c4 * B.c2 - A.c5 * B.c1 + A.c6 * B.c7 + A.c7 * B.c6 ] e12,
[                                                         -A.c3 * B.c3 + A.c4 * B.c4 + A.c5 * B.c5 + A.c7 * B.c7 ] e321

pga2dp regressive geometric product rgpr(mv_e,mv_e) -> mv_u:
[                                                      0 ] 1,
[ -A.c0 * B.c1 - A.c1 * B.c0 - A.c2 * B.c3 + A.c3 * B.c2 ] e1,
[ -A.c0 * B.c2 + A.c1 * B.c3 - A.c2 * B.c0 - A.c3 * B.c1 ] e2,
[                             -A.c1 * B.c2 + A.c2 * B.c1 ] e3,
[                                                      0 ] e23,
[                                                      0 ] e31,
[                                                      0 ] e12,
[                              A.c1 * B.c1 + A.c2 * B.c2 ] e321

pga2dp regressive geometric product rgpr(mv_u,mv_u) -> mv_u:
[                                                      0 ] 1,
[  A.c0 * B.c3 + A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c0 ] e1,
[ -A.c0 * B.c2 + A.c1 * B.c3 + A.c2 * B.c0 + A.c3 * B.c1 ] e2,
[                              A.c2 * B.c3 + A.c3 * B.c2 ] e3,
[                                                      0 ] e23,
[                                                      0 ] e31,
[                                                      0 ] e12,
[                             -A.c2 * B.c2 + A.c3 * B.c3 ] e321

pga2dp regressive geometric product rgpr(mv_e,mv_u) -> mv_e:
[ A.c0 * B.c3 - A.c1 * B.c0 - A.c2 * B.c1 - A.c3 * B.c2 ] 1,
[                                                     0 ] e1,
[                                                     0 ] e2,
[                                                     0 ] e3,
[                             A.c1 * B.c3 + A.c2 * B.c2 ] e23,
[                            -A.c1 * B.c2 + A.c2 * B.c3 ] e31,
[ A.c0 * B.c2 + A.c1 * B.c1 - A.c2 * B.c0 + A.c3 * B.c3 ] e12,
[                                                     0 ] e321

pga2dp regressive geometric product rgpr(mv_u,mv_e) -> mv_e:
[ -A.c0 * B.c1 - A.c1 * B.c2 - A.c2 * B.c3 + A.c3 * B.c0 ] 1,
[                                                      0 ] e1,
[                                                      0 ] e2,
[                                                      0 ] e3,
[                             -A.c2 * B.c2 + A.c3 * B.c1 ] e23,
[                              A.c2 * B.c1 + A.c3 * B.c2 ] e31,
[  A.c0 * B.c2 - A.c1 * B.c1 + A.c2 * B.c0 + A.c3 * B.c3 ] e12,
[                                                      0 ] e321

pga2dp regressive geometric product rgpr(mv_e,bivec) -> mv_u:
[                                     0 ] 1,
[ -M.c0 * B.x - M.c2 * B.z + M.c3 * B.y ] e1,
[ -M.c0 * B.y + M.c1 * B.z - M.c3 * B.x ] e2,
[              -M.c1 * B.y + M.c2 * B.x ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[               M.c1 * B.x + M.c2 * B.y ] e321

pga2dp regressive geometric product rgpr(mv_u,bivec) -> mv_e:
[ -M.c0 * B.x - M.c1 * B.y - M.c2 * B.z ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[              -M.c2 * B.y + M.c3 * B.x ] e23,
[               M.c2 * B.x + M.c3 * B.y ] e31,
[  M.c0 * B.y - M.c1 * B.x + M.c3 * B.z ] e12,
[                                     0 ] e321

pga2dp regressive geometric product rgpr(mv_e,vec) -> mv_e:
[ -M.c1 * v.x - M.c2 * v.y - M.c3 * v.z ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[                            M.c2 * v.z ] e23,
[                           -M.c1 * v.z ] e31,
[  M.c0 * v.z + M.c1 * v.y - M.c2 * v.x ] e12,
[                                     0 ] e321

pga2dp regressive geometric product rgpr(mv_u,vec) -> mv_u:
[                                     0 ] 1,
[  M.c1 * v.z - M.c2 * v.y + M.c3 * v.x ] e1,
[ -M.c0 * v.z + M.c2 * v.x + M.c3 * v.y ] e2,
[                            M.c3 * v.z ] e3,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[                           -M.c2 * v.z ] e321

pga2dp regressive geometric product rgpr(bivec,bivec) -> mv_u:
[                          0 ] 1,
[ -B1.y * B2.z + B1.z * B2.y ] e1,
[  B1.x * B2.z - B1.z * B2.x ] e2,
[ -B1.x * B2.y + B1.y * B2.x ] e3,
[                          0 ] e23,
[                          0 ] e31,
[                          0 ] e12,
[  B1.x * B2.x + B1.y * B2.y ] e321

pga2dp regressive geometric product rgpr(bivec,vec) -> mv_e:
[ -B.x * v.x - B.y * v.y - B.z * v.z ] 1,
[                                  0 ] e1,
[                                  0 ] e2,
[                                  0 ] e3,
[                          B.y * v.z ] e23,
[                         -B.x * v.z ] e31,
[              B.x * v.y - B.y * v.x ] e12,
[                                  0 ] e321

pga2dp regressive geometric product rgpr(vec,vec) -> mv_u:
[                          0 ] 1,
[  v1.y * v2.z - v1.z * v2.y ] e1,
[ -v1.x * v2.z + v1.z * v2.x ] e2,
[                          0 ] e3,
[                          0 ] e23,
[                          0 ] e31,
[                          0 ] e12,
[               -v1.z * v2.z ] e321

-------------------------------------------------------------------

pga2dp right bulk contraction - basis product table:
[    1,    0,    0,    0,    0,    0,    0,    0 ], 
[   e1,    1,    0,    0,    0,    0,    0,    0 ], 
[   e2,    0,    1,    0,    0,    0,    0,    0 ], 
[   e3,    0,    0,    0,    0,    0,    0,    0 ], 
[  e23,    0,   e3,    0,    0,    0,    0,    0 ], 
[  e31,  -e3,    0,    0,    0,    0,    0,    0 ], 
[  e12,   e2,  -e1,    0,    0,    0,    1,    0 ], 
[ e321, -e23, -e31,    0,    0,    0,  -e3,    0 ] 

pga2dp right bulk contraction rbulk_contract(mv,mv) -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c6 * B.c6 ] 1,
[                             A.c1 * B.c0 - A.c6 * B.c2 ] e1,
[                             A.c2 * B.c0 + A.c6 * B.c1 ] e2,
[ A.c3 * B.c0 + A.c4 * B.c2 - A.c5 * B.c1 - A.c7 * B.c6 ] e3,
[                             A.c4 * B.c0 - A.c7 * B.c1 ] e23,
[                             A.c5 * B.c0 - A.c7 * B.c2 ] e31,
[                                           A.c6 * B.c0 ] e12,
[                                           A.c7 * B.c0 ] e321

pga2dp right bulk contraction rbulk_contract(ps,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(ps,bivec) -> vec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ -ps * B.z ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e321

pga2dp right bulk contraction rbulk_contract(bivec,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(vec,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(ps,s) -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ ps * s ] e321

pga2dp right bulk contraction rbulk_contract(s,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(bivec,bivec) -> s:
[ B1.z * B2.z ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e321

pga2dp right bulk contraction rbulk_contract(bivec,vec) -> vec:
[                     0 ] 1,
[            -B.z * v.y ] e1,
[             B.z * v.x ] e2,
[ B.x * v.y - B.y * v.x ] e3,
[                     0 ] e23,
[                     0 ] e31,
[                     0 ] e12,
[                     0 ] e321

pga2dp right bulk contraction rbulk_contract(vec,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(bivec,s) -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ B.x * s ] e23,
[ B.y * s ] e31,
[ B.z * s ] e12,
[       0 ] e321

pga2dp right bulk contraction rbulk_contract(s,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[                         0 ] e321

pga2dp right bulk contraction rbulk_contract(vec,s) -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp right bulk contraction rbulk_contract(s,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp right bulk contraction rbulk_contract(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

-------------------------------------------------------------------

pga2dp right weight contraction - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    1,    0,    0,    0,    0 ], 
[    0,    0,    0,  -e2,    1,    0,    0,    0 ], 
[    0,    0,    0,   e1,    0,    1,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0, -e12,  -e1,  -e2,    0,    1 ] 

-------------------------------------------------------------------

pga2dp left bulk contraction - basis product table:
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e321 ], 
[    0,    1,    0,    0,    0,   e3,  -e2, -e23 ], 
[    0,    0,    1,    0,  -e3,    0,   e1, -e31 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    1,  -e3 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ] 

pga2dp left bulk contraction lbulk_contract(mv,mv) -> mv:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c6 * B.c6 ] 1,
[                             A.c0 * B.c1 + A.c2 * B.c6 ] e1,
[                             A.c0 * B.c2 - A.c1 * B.c6 ] e2,
[ A.c0 * B.c3 + A.c1 * B.c5 - A.c2 * B.c4 - A.c6 * B.c7 ] e3,
[                             A.c0 * B.c4 - A.c1 * B.c7 ] e23,
[                             A.c0 * B.c5 - A.c2 * B.c7 ] e31,
[                                           A.c0 * B.c6 ] e12,
[                                           A.c0 * B.c7 ] e321

pga2dp left bulk contraction lbulk_contract(ps,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(ps,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(bivec,ps) -> vec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[ -B.z * ps ] e3,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e321

pga2dp left bulk contraction lbulk_contract(ps,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(vec,ps) -> bivec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[ -v.x * ps ] e23,
[ -v.y * ps ] e31,
[         0 ] e12,
[         0 ] e321

pga2dp left bulk contraction lbulk_contract(ps,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(s,ps) -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[ s * ps ] e321

pga2dp left bulk contraction lbulk_contract(bivec,bivec) -> s:
[ B1.z * B2.z ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e321

pga2dp left bulk contraction lbulk_contract(bivec,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(vec,bivec) -> vec:
[                     0 ] 1,
[             v.y * B.z ] e1,
[            -v.x * B.z ] e2,
[ v.x * B.y - v.y * B.x ] e3,
[                     0 ] e23,
[                     0 ] e31,
[                     0 ] e12,
[                     0 ] e321

pga2dp left bulk contraction lbulk_contract(bivec,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(s,bivec) -> bivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[ s * B.x ] e23,
[ s * B.y ] e31,
[ s * B.z ] e12,
[       0 ] e321

pga2dp left bulk contraction lbulk_contract(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[                         0 ] e321

pga2dp left bulk contraction lbulk_contract(vec,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e321

pga2dp left bulk contraction lbulk_contract(s,vec) -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

pga2dp left bulk contraction lbulk_contract(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e321

-------------------------------------------------------------------

pga2dp left weight contraction - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    1,   e2,  -e1,    0, -e12 ], 
[    0,    0,    0,    0,    1,    0,    0,  -e1 ], 
[    0,    0,    0,    0,    0,    1,    0,  -e2 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    1 ] 

-------------------------------------------------------------------

pga2dp right bulk expansion - basis product table:
[ e321, -e23, -e31,    0,    0,    0,  -e3,    0 ], 
[    0, e321,    0,    0,    0,    0,  e31,    0 ], 
[    0,    0, e321,    0,    0,    0, -e23,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0, e321,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ] 

-------------------------------------------------------------------

pga2dp right weight expansion - basis product table:
[    0,    0,    0, -e12,  -e1,  -e2,    0,    1 ], 
[    0,    0,    0,    0,    0, -e12,    0,   e1 ], 
[    0,    0,    0,    0,  e12,    0,    0,   e2 ], 
[    0,    0,    0, e321, -e31,  e23,    0,   e3 ], 
[    0,    0,    0,    0, e321,    0,    0,  e23 ], 
[    0,    0,    0,    0,    0, e321,    0,  e31 ], 
[    0,    0,    0,    0,    0,    0,    0,  e12 ], 
[    0,    0,    0,    0,    0,    0,    0, e321 ] 

-------------------------------------------------------------------

pga2dp left bulk expansion - basis product table:
[ e321,    0,    0,    0,    0,    0,    0,    0 ], 
[ -e23, e321,    0,    0,    0,    0,    0,    0 ], 
[ -e31,    0, e321,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[  -e3, -e31,  e23,    0,    0,    0, e321,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ] 

-------------------------------------------------------------------

pga2dp left weight expansion - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[ -e12,    0,    0, e321,    0,    0,    0,    0 ], 
[  -e1,    0, -e12,  e31, e321,    0,    0,    0 ], 
[  -e2,  e12,    0, -e23,    0, e321,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    1,   e1,   e2,   e3,  e23,  e31,  e12, e321 ] 

-------------------------------------------------------------------

pga2dp regressive sandwich product - basis product table:
[     0,     0,     0,   e12,   -e1,   -e2,     0,     1 ], 
[     0,     0,     0,   -e2,    -1,   e12,     0,    e1 ], 
[     0,     0,     0,    e1,  -e12,    -1,     0,    e2 ], 
[   e12,    e2,   -e1, -e321,   e31,  -e23,    -1,    e3 ], 
[   -e1,    -1,   e12,  -e31,  e321,   -e3,    e2,   e23 ], 
[   -e2,  -e12,    -1,   e23,    e3,  e321,   -e1,   e31 ], 
[     0,     0,     0,    -1,   -e2,    e1,     0,   e12 ], 
[     1,    e1,    e2,    e3,   e23,   e31,   e12,  e321 ] 

pga2dp regressive sandwich product rgpr(mv_u, vec) -> mv_u_tmp:
mv_u_tmp:
[                                       0 ] 1,
[  (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) ] e1,
[ (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) ] e2,
[                            (R.c3 * v.z) ] e3,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                           (-R.c2 * v.z) ] e321

pga2dp regressive sandwich product mv_u_tmp * rrev(mv_u) -> mv_u_res:
[                                                                                                                                           0 ] 1,
[ (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) * R.c3 - (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) * R.c2 + (R.c3 * v.z) * R.c1 - (-R.c2 * v.z) * R.c0 ] e1,
[ (R.c1 * v.z - R.c2 * v.y + R.c3 * v.x) * R.c2 + (-R.c0 * v.z + R.c2 * v.x + R.c3 * v.y) * R.c3 - (R.c3 * v.z) * R.c0 - (-R.c2 * v.z) * R.c1 ] e2,
[                                                                                                  (R.c3 * v.z) * R.c3 - (-R.c2 * v.z) * R.c2 ] e3,
[                                                                                                                                           0 ] e23,
[                                                                                                                                           0 ] e31,
[                                                                                                                                           0 ] e12,
[                                                                                                  (R.c3 * v.z) * R.c2 + (-R.c2 * v.z) * R.c3 ] e321

pga2dp regressive sandwich product mv_u * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[              (-R.c2 * B.y + R.c3 * B.x) ] e23,
[               (R.c2 * B.x + R.c3 * B.y) ] e31,
[  (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) ] e12,
[                                       0 ] e321

pga2dp regressive sandwich product mv_e_tmp * rrev(mv_u) -> mv_e_res:
[  (-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) * R.c3 + (-R.c2 * B.y + R.c3 * B.x) * R.c0 + (R.c2 * B.x + R.c3 * B.y) * R.c1 + (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) * R.c2 ] 1,
[                                                                                                                                                                      0 ] e1,
[                                                                                                                                                                      0 ] e2,
[                                                                                                                                                                      0 ] e3,
[                                                                                                   (-R.c2 * B.y + R.c3 * B.x) * R.c3 - (R.c2 * B.x + R.c3 * B.y) * R.c2 ] e23,
[                                                                                                   (-R.c2 * B.y + R.c3 * B.x) * R.c2 + (R.c2 * B.x + R.c3 * B.y) * R.c3 ] e31,
[ -(-R.c0 * B.x - R.c1 * B.y - R.c2 * B.z) * R.c2 - (-R.c2 * B.y + R.c3 * B.x) * R.c1 + (R.c2 * B.x + R.c3 * B.y) * R.c0 + (R.c0 * B.y - R.c1 * B.x + R.c3 * B.z) * R.c3 ] e12,
[                                                                                                                                                                      0 ] e321

-------------------------------------------------------------------

pga3dp geometric product - basis product table:
[      1,     e1,     e2,     e3,     e4,    e41,    e42,    e43,    e23,    e31,    e12,   e423,   e431,   e412,   e321,  e1234 ], 
[     e1,      1,    e12,   -e31,   -e41,    -e4,  -e412,   e431,  -e321,    -e3,     e2,  e1234,    e43,   -e42,   -e23,   e423 ], 
[     e2,   -e12,      1,    e23,   -e42,   e412,    -e4,  -e423,     e3,  -e321,    -e1,   -e43,  e1234,    e41,   -e31,   e431 ], 
[     e3,    e31,   -e23,      1,   -e43,  -e431,   e423,    -e4,    -e2,     e1,  -e321,    e42,   -e41,  e1234,   -e12,   e412 ], 
[     e4,    e41,    e42,    e43,      0,      0,      0,      0,   e423,   e431,   e412,      0,      0,      0,  e1234,      0 ], 
[    e41,     e4,   e412,  -e431,      0,      0,      0,      0, -e1234,   -e43,    e42,      0,      0,      0,  -e423,      0 ], 
[    e42,  -e412,     e4,   e423,      0,      0,      0,      0,    e43, -e1234,   -e41,      0,      0,      0,  -e431,      0 ], 
[    e43,   e431,  -e423,     e4,      0,      0,      0,      0,   -e42,    e41, -e1234,      0,      0,      0,  -e412,      0 ], 
[    e23,  -e321,    -e3,     e2,   e423, -e1234,   -e43,    e42,     -1,   -e12,    e31,    -e4,  -e412,   e431,     e1,    e41 ], 
[    e31,     e3,  -e321,    -e1,   e431,    e43, -e1234,   -e41,    e12,     -1,   -e23,   e412,    -e4,  -e423,     e2,    e42 ], 
[    e12,    -e2,     e1,  -e321,   e412,   -e42,    e41, -e1234,   -e31,    e23,     -1,  -e431,   e423,    -e4,     e3,    e43 ], 
[   e423, -e1234,   -e43,    e42,      0,      0,      0,      0,    -e4,  -e412,   e431,      0,      0,      0,    e41,      0 ], 
[   e431,    e43, -e1234,   -e41,      0,      0,      0,      0,   e412,    -e4,  -e423,      0,      0,      0,    e42,      0 ], 
[   e412,   -e42,    e41, -e1234,      0,      0,      0,      0,  -e431,   e423,    -e4,      0,      0,      0,    e43,      0 ], 
[   e321,   -e23,   -e31,   -e12, -e1234,   e423,   e431,   e412,     e1,     e2,     e3,   -e41,   -e42,   -e43,     -1,     e4 ], 
[  e1234,  -e423,  -e431,  -e412,      0,      0,      0,      0,    e41,    e42,    e43,      0,      0,      0,    -e4,      0 ] 

pga3dp geometric product mv * mv -> mv:
[                                                                                                                         A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 - A.c8 * B.c8 - A.c9 * B.c9 - A.c10 * B.c10 - A.c14 * B.c14 ] 1,
[                                                                                                                         A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c10 + A.c3 * B.c9 + A.c8 * B.c14 - A.c9 * B.c3 + A.c10 * B.c2 + A.c14 * B.c8 ] e1,
[                                                                                                                         A.c0 * B.c2 + A.c1 * B.c10 + A.c2 * B.c0 - A.c3 * B.c8 + A.c8 * B.c3 + A.c9 * B.c14 - A.c10 * B.c1 + A.c14 * B.c9 ] e2,
[                                                                                                                         A.c0 * B.c3 - A.c1 * B.c9 + A.c2 * B.c8 + A.c3 * B.c0 - A.c8 * B.c2 + A.c9 * B.c1 + A.c10 * B.c14 + A.c14 * B.c10 ] e3,
[ A.c0 * B.c4 - A.c1 * B.c5 - A.c2 * B.c6 - A.c3 * B.c7 + A.c4 * B.c0 + A.c5 * B.c1 + A.c6 * B.c2 + A.c7 * B.c3 - A.c8 * B.c11 - A.c9 * B.c12 - A.c10 * B.c13 - A.c11 * B.c8 - A.c12 * B.c9 - A.c13 * B.c10 + A.c14 * B.c15 - A.c15 * B.c14 ] e4,
[ A.c0 * B.c5 - A.c1 * B.c4 + A.c2 * B.c13 - A.c3 * B.c12 + A.c4 * B.c1 + A.c5 * B.c0 - A.c6 * B.c10 + A.c7 * B.c9 + A.c8 * B.c15 - A.c9 * B.c7 + A.c10 * B.c6 + A.c11 * B.c14 - A.c12 * B.c3 + A.c13 * B.c2 - A.c14 * B.c11 + A.c15 * B.c8 ] e41,
[ A.c0 * B.c6 - A.c1 * B.c13 - A.c2 * B.c4 + A.c3 * B.c11 + A.c4 * B.c2 + A.c5 * B.c10 + A.c6 * B.c0 - A.c7 * B.c8 + A.c8 * B.c7 + A.c9 * B.c15 - A.c10 * B.c5 + A.c11 * B.c3 + A.c12 * B.c14 - A.c13 * B.c1 - A.c14 * B.c12 + A.c15 * B.c9 ] e42,
[ A.c0 * B.c7 + A.c1 * B.c12 - A.c2 * B.c11 - A.c3 * B.c4 + A.c4 * B.c3 - A.c5 * B.c9 + A.c6 * B.c8 + A.c7 * B.c0 - A.c8 * B.c6 + A.c9 * B.c5 + A.c10 * B.c15 - A.c11 * B.c2 + A.c12 * B.c1 + A.c13 * B.c14 - A.c14 * B.c13 + A.c15 * B.c10 ] e43,
[                                                                                                                         A.c0 * B.c8 - A.c1 * B.c14 + A.c2 * B.c3 - A.c3 * B.c2 + A.c8 * B.c0 - A.c9 * B.c10 + A.c10 * B.c9 - A.c14 * B.c1 ] e23,
[                                                                                                                         A.c0 * B.c9 - A.c1 * B.c3 - A.c2 * B.c14 + A.c3 * B.c1 + A.c8 * B.c10 + A.c9 * B.c0 - A.c10 * B.c8 - A.c14 * B.c2 ] e31,
[                                                                                                                         A.c0 * B.c10 + A.c1 * B.c2 - A.c2 * B.c1 - A.c3 * B.c14 - A.c8 * B.c9 + A.c9 * B.c8 + A.c10 * B.c0 - A.c14 * B.c3 ] e12,
[ A.c0 * B.c11 + A.c1 * B.c15 - A.c2 * B.c7 + A.c3 * B.c6 + A.c4 * B.c8 - A.c5 * B.c14 + A.c6 * B.c3 - A.c7 * B.c2 + A.c8 * B.c4 - A.c9 * B.c13 + A.c10 * B.c12 + A.c11 * B.c0 - A.c12 * B.c10 + A.c13 * B.c9 + A.c14 * B.c5 - A.c15 * B.c1 ] e423,
[ A.c0 * B.c12 + A.c1 * B.c7 + A.c2 * B.c15 - A.c3 * B.c5 + A.c4 * B.c9 - A.c5 * B.c3 - A.c6 * B.c14 + A.c7 * B.c1 + A.c8 * B.c13 + A.c9 * B.c4 - A.c10 * B.c11 + A.c11 * B.c10 + A.c12 * B.c0 - A.c13 * B.c8 + A.c14 * B.c6 - A.c15 * B.c2 ] e431,
[ A.c0 * B.c13 - A.c1 * B.c6 + A.c2 * B.c5 + A.c3 * B.c15 + A.c4 * B.c10 + A.c5 * B.c2 - A.c6 * B.c1 - A.c7 * B.c14 - A.c8 * B.c12 + A.c9 * B.c11 + A.c10 * B.c4 - A.c11 * B.c9 + A.c12 * B.c8 + A.c13 * B.c0 + A.c14 * B.c7 - A.c15 * B.c3 ] e412,
[                                                                                                                         A.c0 * B.c14 - A.c1 * B.c8 - A.c2 * B.c9 - A.c3 * B.c10 - A.c8 * B.c1 - A.c9 * B.c2 - A.c10 * B.c3 + A.c14 * B.c0 ] e321,
[ A.c0 * B.c15 + A.c1 * B.c11 + A.c2 * B.c12 + A.c3 * B.c13 + A.c4 * B.c14 - A.c5 * B.c8 - A.c6 * B.c9 - A.c7 * B.c10 - A.c8 * B.c5 - A.c9 * B.c6 - A.c10 * B.c7 - A.c11 * B.c1 - A.c12 * B.c2 - A.c13 * B.c3 - A.c14 * B.c4 + A.c15 * B.c0 ] e1234

pga3dp geometric product mv * mv_e -> mv:
[                                                             A.c0 * B.c0 - A.c8 * B.c4 - A.c9 * B.c5 - A.c10 * B.c6 ] 1,
[                                                             A.c1 * B.c0 - A.c2 * B.c6 + A.c3 * B.c5 + A.c14 * B.c4 ] e1,
[                                                             A.c1 * B.c6 + A.c2 * B.c0 - A.c3 * B.c4 + A.c14 * B.c5 ] e2,
[                                                            -A.c1 * B.c5 + A.c2 * B.c4 + A.c3 * B.c0 + A.c14 * B.c6 ] e3,
[ -A.c1 * B.c1 - A.c2 * B.c2 - A.c3 * B.c3 + A.c4 * B.c0 - A.c11 * B.c4 - A.c12 * B.c5 - A.c13 * B.c6 + A.c14 * B.c7 ] e4,
[    A.c0 * B.c1 + A.c5 * B.c0 - A.c6 * B.c6 + A.c7 * B.c5 + A.c8 * B.c7 - A.c9 * B.c3 + A.c10 * B.c2 + A.c15 * B.c4 ] e41,
[    A.c0 * B.c2 + A.c5 * B.c6 + A.c6 * B.c0 - A.c7 * B.c4 + A.c8 * B.c3 + A.c9 * B.c7 - A.c10 * B.c1 + A.c15 * B.c5 ] e42,
[    A.c0 * B.c3 - A.c5 * B.c5 + A.c6 * B.c4 + A.c7 * B.c0 - A.c8 * B.c2 + A.c9 * B.c1 + A.c10 * B.c7 + A.c15 * B.c6 ] e43,
[                                                             A.c0 * B.c4 + A.c8 * B.c0 - A.c9 * B.c6 + A.c10 * B.c5 ] e23,
[                                                             A.c0 * B.c5 + A.c8 * B.c6 + A.c9 * B.c0 - A.c10 * B.c4 ] e31,
[                                                             A.c0 * B.c6 - A.c8 * B.c5 + A.c9 * B.c4 + A.c10 * B.c0 ] e12,
[  A.c1 * B.c7 - A.c2 * B.c3 + A.c3 * B.c2 + A.c4 * B.c4 + A.c11 * B.c0 - A.c12 * B.c6 + A.c13 * B.c5 + A.c14 * B.c1 ] e423,
[  A.c1 * B.c3 + A.c2 * B.c7 - A.c3 * B.c1 + A.c4 * B.c5 + A.c11 * B.c6 + A.c12 * B.c0 - A.c13 * B.c4 + A.c14 * B.c2 ] e431,
[ -A.c1 * B.c2 + A.c2 * B.c1 + A.c3 * B.c7 + A.c4 * B.c6 - A.c11 * B.c5 + A.c12 * B.c4 + A.c13 * B.c0 + A.c14 * B.c3 ] e412,
[                                                            -A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 + A.c14 * B.c0 ] e321,
[    A.c0 * B.c7 - A.c5 * B.c4 - A.c6 * B.c5 - A.c7 * B.c6 - A.c8 * B.c1 - A.c9 * B.c2 - A.c10 * B.c3 + A.c15 * B.c0 ] e1234

pga3dp geometric product mv_e * mv -> mv:
[                                                            A.c0 * B.c0 - A.c4 * B.c8 - A.c5 * B.c9 - A.c6 * B.c10 ] 1,
[                                                            A.c0 * B.c1 + A.c4 * B.c14 - A.c5 * B.c3 + A.c6 * B.c2 ] e1,
[                                                            A.c0 * B.c2 + A.c4 * B.c3 + A.c5 * B.c14 - A.c6 * B.c1 ] e2,
[                                                            A.c0 * B.c3 - A.c4 * B.c2 + A.c5 * B.c1 + A.c6 * B.c14 ] e3,
[ A.c0 * B.c4 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 - A.c4 * B.c11 - A.c5 * B.c12 - A.c6 * B.c13 - A.c7 * B.c14 ] e4,
[   A.c0 * B.c5 + A.c1 * B.c0 - A.c2 * B.c10 + A.c3 * B.c9 + A.c4 * B.c15 - A.c5 * B.c7 + A.c6 * B.c6 + A.c7 * B.c8 ] e41,
[   A.c0 * B.c6 + A.c1 * B.c10 + A.c2 * B.c0 - A.c3 * B.c8 + A.c4 * B.c7 + A.c5 * B.c15 - A.c6 * B.c5 + A.c7 * B.c9 ] e42,
[   A.c0 * B.c7 - A.c1 * B.c9 + A.c2 * B.c8 + A.c3 * B.c0 - A.c4 * B.c6 + A.c5 * B.c5 + A.c6 * B.c15 + A.c7 * B.c10 ] e43,
[                                                            A.c0 * B.c8 + A.c4 * B.c0 - A.c5 * B.c10 + A.c6 * B.c9 ] e23,
[                                                            A.c0 * B.c9 + A.c4 * B.c10 + A.c5 * B.c0 - A.c6 * B.c8 ] e31,
[                                                            A.c0 * B.c10 - A.c4 * B.c9 + A.c5 * B.c8 + A.c6 * B.c0 ] e12,
[ A.c0 * B.c11 - A.c1 * B.c14 + A.c2 * B.c3 - A.c3 * B.c2 + A.c4 * B.c4 - A.c5 * B.c13 + A.c6 * B.c12 - A.c7 * B.c1 ] e423,
[ A.c0 * B.c12 - A.c1 * B.c3 - A.c2 * B.c14 + A.c3 * B.c1 + A.c4 * B.c13 + A.c5 * B.c4 - A.c6 * B.c11 - A.c7 * B.c2 ] e431,
[ A.c0 * B.c13 + A.c1 * B.c2 - A.c2 * B.c1 - A.c3 * B.c14 - A.c4 * B.c12 + A.c5 * B.c11 + A.c6 * B.c4 - A.c7 * B.c3 ] e412,
[                                                            A.c0 * B.c14 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 ] e321,
[   A.c0 * B.c15 - A.c1 * B.c8 - A.c2 * B.c9 - A.c3 * B.c10 - A.c4 * B.c5 - A.c5 * B.c6 - A.c6 * B.c7 + A.c7 * B.c0 ] e1234

pga3dp geometric product mv * mv_u -> mv:
[                                                             A.c1 * B.c0 + A.c2 * B.c1 + A.c3 * B.c2 - A.c14 * B.c7 ] 1,
[                                                             A.c0 * B.c0 + A.c8 * B.c7 - A.c9 * B.c2 + A.c10 * B.c1 ] e1,
[                                                             A.c0 * B.c1 + A.c8 * B.c2 + A.c9 * B.c7 - A.c10 * B.c0 ] e2,
[                                                             A.c0 * B.c2 - A.c8 * B.c1 + A.c9 * B.c0 + A.c10 * B.c7 ] e3,
[    A.c0 * B.c3 + A.c5 * B.c0 + A.c6 * B.c1 + A.c7 * B.c2 - A.c8 * B.c4 - A.c9 * B.c5 - A.c10 * B.c6 - A.c15 * B.c7 ] e4,
[ -A.c1 * B.c3 + A.c2 * B.c6 - A.c3 * B.c5 + A.c4 * B.c0 + A.c11 * B.c7 - A.c12 * B.c2 + A.c13 * B.c1 - A.c14 * B.c4 ] e41,
[ -A.c1 * B.c6 - A.c2 * B.c3 + A.c3 * B.c4 + A.c4 * B.c1 + A.c11 * B.c2 + A.c12 * B.c7 - A.c13 * B.c0 - A.c14 * B.c5 ] e42,
[  A.c1 * B.c5 - A.c2 * B.c4 - A.c3 * B.c3 + A.c4 * B.c2 - A.c11 * B.c1 + A.c12 * B.c0 + A.c13 * B.c7 - A.c14 * B.c6 ] e43,
[                                                            -A.c1 * B.c7 + A.c2 * B.c2 - A.c3 * B.c1 - A.c14 * B.c0 ] e23,
[                                                            -A.c1 * B.c2 - A.c2 * B.c7 + A.c3 * B.c0 - A.c14 * B.c1 ] e31,
[                                                             A.c1 * B.c1 - A.c2 * B.c0 - A.c3 * B.c7 - A.c14 * B.c2 ] e12,
[    A.c0 * B.c4 - A.c5 * B.c7 + A.c6 * B.c2 - A.c7 * B.c1 + A.c8 * B.c3 - A.c9 * B.c6 + A.c10 * B.c5 - A.c15 * B.c0 ] e423,
[    A.c0 * B.c5 - A.c5 * B.c2 - A.c6 * B.c7 + A.c7 * B.c0 + A.c8 * B.c6 + A.c9 * B.c3 - A.c10 * B.c4 - A.c15 * B.c1 ] e431,
[    A.c0 * B.c6 + A.c5 * B.c1 - A.c6 * B.c0 - A.c7 * B.c7 - A.c8 * B.c5 + A.c9 * B.c4 + A.c10 * B.c3 - A.c15 * B.c2 ] e412,
[                                                             A.c0 * B.c7 - A.c8 * B.c0 - A.c9 * B.c1 - A.c10 * B.c2 ] e321,
[  A.c1 * B.c4 + A.c2 * B.c5 + A.c3 * B.c6 + A.c4 * B.c7 - A.c11 * B.c0 - A.c12 * B.c1 - A.c13 * B.c2 - A.c14 * B.c3 ] e1234

pga3dp geometric product mv_u * mv -> mv:
[                                                             A.c0 * B.c1 + A.c1 * B.c2 + A.c2 * B.c3 - A.c7 * B.c14 ] 1,
[                                                             A.c0 * B.c0 - A.c1 * B.c10 + A.c2 * B.c9 + A.c7 * B.c8 ] e1,
[                                                             A.c0 * B.c10 + A.c1 * B.c0 - A.c2 * B.c8 + A.c7 * B.c9 ] e2,
[                                                            -A.c0 * B.c9 + A.c1 * B.c8 + A.c2 * B.c0 + A.c7 * B.c10 ] e3,
[   -A.c0 * B.c5 - A.c1 * B.c6 - A.c2 * B.c7 + A.c3 * B.c0 - A.c4 * B.c8 - A.c5 * B.c9 - A.c6 * B.c10 + A.c7 * B.c15 ] e4,
[ -A.c0 * B.c4 + A.c1 * B.c13 - A.c2 * B.c12 + A.c3 * B.c1 + A.c4 * B.c14 - A.c5 * B.c3 + A.c6 * B.c2 - A.c7 * B.c11 ] e41,
[ -A.c0 * B.c13 - A.c1 * B.c4 + A.c2 * B.c11 + A.c3 * B.c2 + A.c4 * B.c3 + A.c5 * B.c14 - A.c6 * B.c1 - A.c7 * B.c12 ] e42,
[  A.c0 * B.c12 - A.c1 * B.c11 - A.c2 * B.c4 + A.c3 * B.c3 - A.c4 * B.c2 + A.c5 * B.c1 + A.c6 * B.c14 - A.c7 * B.c13 ] e43,
[                                                            -A.c0 * B.c14 + A.c1 * B.c3 - A.c2 * B.c2 - A.c7 * B.c1 ] e23,
[                                                            -A.c0 * B.c3 - A.c1 * B.c14 + A.c2 * B.c1 - A.c7 * B.c2 ] e31,
[                                                             A.c0 * B.c2 - A.c1 * B.c1 - A.c2 * B.c14 - A.c7 * B.c3 ] e12,
[    A.c0 * B.c15 - A.c1 * B.c7 + A.c2 * B.c6 + A.c3 * B.c8 + A.c4 * B.c0 - A.c5 * B.c10 + A.c6 * B.c9 + A.c7 * B.c5 ] e423,
[    A.c0 * B.c7 + A.c1 * B.c15 - A.c2 * B.c5 + A.c3 * B.c9 + A.c4 * B.c10 + A.c5 * B.c0 - A.c6 * B.c8 + A.c7 * B.c6 ] e431,
[   -A.c0 * B.c6 + A.c1 * B.c5 + A.c2 * B.c15 + A.c3 * B.c10 - A.c4 * B.c9 + A.c5 * B.c8 + A.c6 * B.c0 + A.c7 * B.c7 ] e412,
[                                                            -A.c0 * B.c8 - A.c1 * B.c9 - A.c2 * B.c10 + A.c7 * B.c0 ] e321,
[  A.c0 * B.c11 + A.c1 * B.c12 + A.c2 * B.c13 + A.c3 * B.c14 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 - A.c7 * B.c4 ] e1234

pga3dp geometric product mv * ps -> mv:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[ A.c14 * ps ] e4,
[  A.c8 * ps ] e41,
[  A.c9 * ps ] e42,
[ A.c10 * ps ] e43,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[  A.c1 * ps ] e423,
[  A.c2 * ps ] e431,
[  A.c3 * ps ] e412,
[          0 ] e321,
[  A.c0 * ps ] e1234

pga3dp geometric product ps * mv -> mv:
[           0 ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[ -ps * B.c14 ] e4,
[   ps * B.c8 ] e41,
[   ps * B.c9 ] e42,
[  ps * B.c10 ] e43,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[  -ps * B.c1 ] e423,
[  -ps * B.c2 ] e431,
[  -ps * B.c3 ] e412,
[           0 ] e321,
[   ps * B.c0 ] e1234

pga3dp geometric product mv_e * mv_e -> mv_e:
[                                                         A.c0 * B.c0 - A.c4 * B.c4 - A.c5 * B.c5 - A.c6 * B.c6 ] 1,
[                                                                                                             0 ] e1,
[                                                                                                             0 ] e2,
[                                                                                                             0 ] e3,
[                                                                                                             0 ] e4,
[ A.c0 * B.c1 + A.c1 * B.c0 - A.c2 * B.c6 + A.c3 * B.c5 + A.c4 * B.c7 - A.c5 * B.c3 + A.c6 * B.c2 + A.c7 * B.c4 ] e41,
[ A.c0 * B.c2 + A.c1 * B.c6 + A.c2 * B.c0 - A.c3 * B.c4 + A.c4 * B.c3 + A.c5 * B.c7 - A.c6 * B.c1 + A.c7 * B.c5 ] e42,
[ A.c0 * B.c3 - A.c1 * B.c5 + A.c2 * B.c4 + A.c3 * B.c0 - A.c4 * B.c2 + A.c5 * B.c1 + A.c6 * B.c7 + A.c7 * B.c6 ] e43,
[                                                         A.c0 * B.c4 + A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 ] e23,
[                                                         A.c0 * B.c5 + A.c4 * B.c6 + A.c5 * B.c0 - A.c6 * B.c4 ] e31,
[                                                         A.c0 * B.c6 - A.c4 * B.c5 + A.c5 * B.c4 + A.c6 * B.c0 ] e12,
[                                                                                                             0 ] e423,
[                                                                                                             0 ] e431,
[                                                                                                             0 ] e412,
[                                                                                                             0 ] e321,
[ A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] e1234

pga3dp geometric product mv_u * mv_u -> mv_e:
[                                                          A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 - A.c7 * B.c7 ] 1,
[                                                                                                              0 ] e1,
[                                                                                                              0 ] e2,
[                                                                                                              0 ] e3,
[                                                                                                              0 ] e4,
[ -A.c0 * B.c3 + A.c1 * B.c6 - A.c2 * B.c5 + A.c3 * B.c0 + A.c4 * B.c7 - A.c5 * B.c2 + A.c6 * B.c1 - A.c7 * B.c4 ] e41,
[ -A.c0 * B.c6 - A.c1 * B.c3 + A.c2 * B.c4 + A.c3 * B.c1 + A.c4 * B.c2 + A.c5 * B.c7 - A.c6 * B.c0 - A.c7 * B.c5 ] e42,
[  A.c0 * B.c5 - A.c1 * B.c4 - A.c2 * B.c3 + A.c3 * B.c2 - A.c4 * B.c1 + A.c5 * B.c0 + A.c6 * B.c7 - A.c7 * B.c6 ] e43,
[                                                         -A.c0 * B.c7 + A.c1 * B.c2 - A.c2 * B.c1 - A.c7 * B.c0 ] e23,
[                                                         -A.c0 * B.c2 - A.c1 * B.c7 + A.c2 * B.c0 - A.c7 * B.c1 ] e31,
[                                                          A.c0 * B.c1 - A.c1 * B.c0 - A.c2 * B.c7 - A.c7 * B.c2 ] e12,
[                                                                                                              0 ] e423,
[                                                                                                              0 ] e431,
[                                                                                                              0 ] e412,
[                                                                                                              0 ] e321,
[  A.c0 * B.c4 + A.c1 * B.c5 + A.c2 * B.c6 + A.c3 * B.c7 - A.c4 * B.c0 - A.c5 * B.c1 - A.c6 * B.c2 - A.c7 * B.c3 ] e1234

pga3dp geometric product mv_e * mv_u -> mv_u:
[                                                                                                             0 ] 1,
[                                                         A.c0 * B.c0 + A.c4 * B.c7 - A.c5 * B.c2 + A.c6 * B.c1 ] e1,
[                                                         A.c0 * B.c1 + A.c4 * B.c2 + A.c5 * B.c7 - A.c6 * B.c0 ] e2,
[                                                         A.c0 * B.c2 - A.c4 * B.c1 + A.c5 * B.c0 + A.c6 * B.c7 ] e3,
[ A.c0 * B.c3 + A.c1 * B.c0 + A.c2 * B.c1 + A.c3 * B.c2 - A.c4 * B.c4 - A.c5 * B.c5 - A.c6 * B.c6 - A.c7 * B.c7 ] e4,
[                                                                                                             0 ] e41,
[                                                                                                             0 ] e42,
[                                                                                                             0 ] e43,
[                                                                                                             0 ] e23,
[                                                                                                             0 ] e31,
[                                                                                                             0 ] e12,
[ A.c0 * B.c4 - A.c1 * B.c7 + A.c2 * B.c2 - A.c3 * B.c1 + A.c4 * B.c3 - A.c5 * B.c6 + A.c6 * B.c5 - A.c7 * B.c0 ] e423,
[ A.c0 * B.c5 - A.c1 * B.c2 - A.c2 * B.c7 + A.c3 * B.c0 + A.c4 * B.c6 + A.c5 * B.c3 - A.c6 * B.c4 - A.c7 * B.c1 ] e431,
[ A.c0 * B.c6 + A.c1 * B.c1 - A.c2 * B.c0 - A.c3 * B.c7 - A.c4 * B.c5 + A.c5 * B.c4 + A.c6 * B.c3 - A.c7 * B.c2 ] e412,
[                                                         A.c0 * B.c7 - A.c4 * B.c0 - A.c5 * B.c1 - A.c6 * B.c2 ] e321,
[                                                                                                             0 ] e1234

pga3dp geometric product mv_u * mv_e -> mv_u:
[                                                                                                              0 ] 1,
[                                                          A.c0 * B.c0 - A.c1 * B.c6 + A.c2 * B.c5 + A.c7 * B.c4 ] e1,
[                                                          A.c0 * B.c6 + A.c1 * B.c0 - A.c2 * B.c4 + A.c7 * B.c5 ] e2,
[                                                         -A.c0 * B.c5 + A.c1 * B.c4 + A.c2 * B.c0 + A.c7 * B.c6 ] e3,
[ -A.c0 * B.c1 - A.c1 * B.c2 - A.c2 * B.c3 + A.c3 * B.c0 - A.c4 * B.c4 - A.c5 * B.c5 - A.c6 * B.c6 + A.c7 * B.c7 ] e4,
[                                                                                                              0 ] e41,
[                                                                                                              0 ] e42,
[                                                                                                              0 ] e43,
[                                                                                                              0 ] e23,
[                                                                                                              0 ] e31,
[                                                                                                              0 ] e12,
[  A.c0 * B.c7 - A.c1 * B.c3 + A.c2 * B.c2 + A.c3 * B.c4 + A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 + A.c7 * B.c1 ] e423,
[  A.c0 * B.c3 + A.c1 * B.c7 - A.c2 * B.c1 + A.c3 * B.c5 + A.c4 * B.c6 + A.c5 * B.c0 - A.c6 * B.c4 + A.c7 * B.c2 ] e431,
[ -A.c0 * B.c2 + A.c1 * B.c1 + A.c2 * B.c7 + A.c3 * B.c6 - A.c4 * B.c5 + A.c5 * B.c4 + A.c6 * B.c0 + A.c7 * B.c3 ] e412,
[                                                         -A.c0 * B.c4 - A.c1 * B.c5 - A.c2 * B.c6 + A.c7 * B.c0 ] e321,
[                                                                                                              0 ] e1234

pga3dp geometric product mv_e * ps -> mv_e:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e4,
[ A.c4 * ps ] e41,
[ A.c5 * ps ] e42,
[ A.c6 * ps ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e423,
[         0 ] e431,
[         0 ] e412,
[         0 ] e321,
[ A.c0 * ps ] e1234

pga3dp geometric product ps * mv_e -> mv_e:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e4,
[ ps * B.c4 ] e41,
[ ps * B.c5 ] e42,
[ ps * B.c6 ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e423,
[         0 ] e431,
[         0 ] e412,
[         0 ] e321,
[ ps * B.c0 ] e1234

pga3dp geometric product mv_u * ps -> mv_u:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[ A.c7 * ps ] e4,
[         0 ] e41,
[         0 ] e42,
[         0 ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ A.c0 * ps ] e423,
[ A.c1 * ps ] e431,
[ A.c2 * ps ] e412,
[         0 ] e321,
[         0 ] e1234

pga3dp geometric product ps * mv_u -> mv_u:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[ -ps * B.c7 ] e4,
[          0 ] e41,
[          0 ] e42,
[          0 ] e43,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[ -ps * B.c0 ] e423,
[ -ps * B.c1 ] e431,
[ -ps * B.c2 ] e412,
[          0 ] e321,
[          0 ] e1234

pga3dp geometric product mv_e * trivec -> mv_u:
[                                                  0 ] 1,
[                                         M.c4 * t.w ] e1,
[                                         M.c5 * t.w ] e2,
[                                         M.c6 * t.w ] e3,
[ -M.c4 * t.x - M.c5 * t.y - M.c6 * t.z - M.c7 * t.w ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[  M.c0 * t.x - M.c1 * t.w - M.c5 * t.z + M.c6 * t.y ] e423,
[  M.c0 * t.y - M.c2 * t.w + M.c4 * t.z - M.c6 * t.x ] e431,
[  M.c0 * t.z - M.c3 * t.w - M.c4 * t.y + M.c5 * t.x ] e412,
[                                         M.c0 * t.w ] e321,
[                                                  0 ] e1234

pga3dp geometric product trivec * mv_e -> mv_u:
[                                                  0 ] 1,
[                                         t.w * M.c4 ] e1,
[                                         t.w * M.c5 ] e2,
[                                         t.w * M.c6 ] e3,
[ -t.x * M.c4 - t.y * M.c5 - t.z * M.c6 + t.w * M.c7 ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[  t.x * M.c0 - t.y * M.c6 + t.z * M.c5 + t.w * M.c1 ] e423,
[  t.x * M.c6 + t.y * M.c0 - t.z * M.c4 + t.w * M.c2 ] e431,
[ -t.x * M.c5 + t.y * M.c4 + t.z * M.c0 + t.w * M.c3 ] e412,
[                                         t.w * M.c0 ] e321,
[                                                  0 ] e1234

pga3dp geometric product mv_e * bivec -> mv_e:
[                                           -M.c4 * B.mx - M.c5 * B.my - M.c6 * B.mz ] 1,
[                                                                                  0 ] e1,
[                                                                                  0 ] e2,
[                                                                                  0 ] e3,
[                                                                                  0 ] e4,
[  M.c0 * B.vx - M.c2 * B.mz + M.c3 * B.my - M.c5 * B.vz + M.c6 * B.vy + M.c7 * B.mx ] e41,
[  M.c0 * B.vy + M.c1 * B.mz - M.c3 * B.mx + M.c4 * B.vz - M.c6 * B.vx + M.c7 * B.my ] e42,
[  M.c0 * B.vz - M.c1 * B.my + M.c2 * B.mx - M.c4 * B.vy + M.c5 * B.vx + M.c7 * B.mz ] e43,
[                                            M.c0 * B.mx - M.c5 * B.mz + M.c6 * B.my ] e23,
[                                            M.c0 * B.my + M.c4 * B.mz - M.c6 * B.mx ] e31,
[                                            M.c0 * B.mz - M.c4 * B.my + M.c5 * B.mx ] e12,
[                                                                                  0 ] e423,
[                                                                                  0 ] e431,
[                                                                                  0 ] e412,
[                                                                                  0 ] e321,
[ -M.c1 * B.mx - M.c2 * B.my - M.c3 * B.mz - M.c4 * B.vx - M.c5 * B.vy - M.c6 * B.vz ] e1234

pga3dp geometric product bivec * mv_e -> mv_e:
[                                           -B.mx * M.c4 - B.my * M.c5 - B.mz * M.c6 ] 1,
[                                                                                  0 ] e1,
[                                                                                  0 ] e2,
[                                                                                  0 ] e3,
[                                                                                  0 ] e4,
[  B.vx * M.c0 - B.vy * M.c6 + B.vz * M.c5 + B.mx * M.c7 - B.my * M.c3 + B.mz * M.c2 ] e41,
[  B.vx * M.c6 + B.vy * M.c0 - B.vz * M.c4 + B.mx * M.c3 + B.my * M.c7 - B.mz * M.c1 ] e42,
[ -B.vx * M.c5 + B.vy * M.c4 + B.vz * M.c0 - B.mx * M.c2 + B.my * M.c1 + B.mz * M.c7 ] e43,
[                                            B.mx * M.c0 - B.my * M.c6 + B.mz * M.c5 ] e23,
[                                            B.mx * M.c6 + B.my * M.c0 - B.mz * M.c4 ] e31,
[                                           -B.mx * M.c5 + B.my * M.c4 + B.mz * M.c0 ] e12,
[                                                                                  0 ] e423,
[                                                                                  0 ] e431,
[                                                                                  0 ] e412,
[                                                                                  0 ] e321,
[ -B.vx * M.c4 - B.vy * M.c5 - B.vz * M.c6 - B.mx * M.c1 - B.my * M.c2 - B.mz * M.c3 ] e1234

pga3dp geometric product mv_u * bivec -> mv_u:
[                                                                                  0 ] 1,
[                                           -M.c1 * B.mz + M.c2 * B.my + M.c7 * B.mx ] e1,
[                                            M.c0 * B.mz - M.c2 * B.mx + M.c7 * B.my ] e2,
[                                           -M.c0 * B.my + M.c1 * B.mx + M.c7 * B.mz ] e3,
[ -M.c0 * B.vx - M.c1 * B.vy - M.c2 * B.vz - M.c4 * B.mx - M.c5 * B.my - M.c6 * B.mz ] e4,
[                                                                                  0 ] e41,
[                                                                                  0 ] e42,
[                                                                                  0 ] e43,
[                                                                                  0 ] e23,
[                                                                                  0 ] e31,
[                                                                                  0 ] e12,
[ -M.c1 * B.vz + M.c2 * B.vy + M.c3 * B.mx - M.c5 * B.mz + M.c6 * B.my + M.c7 * B.vx ] e423,
[  M.c0 * B.vz - M.c2 * B.vx + M.c3 * B.my + M.c4 * B.mz - M.c6 * B.mx + M.c7 * B.vy ] e431,
[ -M.c0 * B.vy + M.c1 * B.vx + M.c3 * B.mz - M.c4 * B.my + M.c5 * B.mx + M.c7 * B.vz ] e412,
[                                           -M.c0 * B.mx - M.c1 * B.my - M.c2 * B.mz ] e321,
[                                                                                  0 ] e1234

pga3dp geometric product bivec * mv_u -> mv_u:
[                                                                                  0 ] 1,
[                                            B.mx * M.c7 - B.my * M.c2 + B.mz * M.c1 ] e1,
[                                            B.mx * M.c2 + B.my * M.c7 - B.mz * M.c0 ] e2,
[                                           -B.mx * M.c1 + B.my * M.c0 + B.mz * M.c7 ] e3,
[  B.vx * M.c0 + B.vy * M.c1 + B.vz * M.c2 - B.mx * M.c4 - B.my * M.c5 - B.mz * M.c6 ] e4,
[                                                                                  0 ] e41,
[                                                                                  0 ] e42,
[                                                                                  0 ] e43,
[                                                                                  0 ] e23,
[                                                                                  0 ] e31,
[                                                                                  0 ] e12,
[ -B.vx * M.c7 + B.vy * M.c2 - B.vz * M.c1 + B.mx * M.c3 - B.my * M.c6 + B.mz * M.c5 ] e423,
[ -B.vx * M.c2 - B.vy * M.c7 + B.vz * M.c0 + B.mx * M.c6 + B.my * M.c3 - B.mz * M.c4 ] e431,
[  B.vx * M.c1 - B.vy * M.c0 - B.vz * M.c7 - B.mx * M.c5 + B.my * M.c4 + B.mz * M.c3 ] e412,
[                                           -B.mx * M.c0 - B.my * M.c1 - B.mz * M.c2 ] e321,
[                                                                                  0 ] e1234

pga3dp geometric product mv_e * vec -> mv_u:
[                                                  0 ] 1,
[               A.c0 * v.x - A.c5 * v.z + A.c6 * v.y ] e1,
[               A.c0 * v.y + A.c4 * v.z - A.c6 * v.x ] e2,
[               A.c0 * v.z - A.c4 * v.y + A.c5 * v.x ] e3,
[  A.c0 * v.w + A.c1 * v.x + A.c2 * v.y + A.c3 * v.z ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[  A.c2 * v.z - A.c3 * v.y + A.c4 * v.w - A.c7 * v.x ] e423,
[ -A.c1 * v.z + A.c3 * v.x + A.c5 * v.w - A.c7 * v.y ] e431,
[  A.c1 * v.y - A.c2 * v.x + A.c6 * v.w - A.c7 * v.z ] e412,
[              -A.c4 * v.x - A.c5 * v.y - A.c6 * v.z ] e321,
[                                                  0 ] e1234

pga3dp geometric product vec * mv_e -> mv_u:
[                                                  0 ] 1,
[               v.x * B.c0 - v.y * B.c6 + v.z * B.c5 ] e1,
[               v.x * B.c6 + v.y * B.c0 - v.z * B.c4 ] e2,
[              -v.x * B.c5 + v.y * B.c4 + v.z * B.c0 ] e3,
[ -v.x * B.c1 - v.y * B.c2 - v.z * B.c3 + v.w * B.c0 ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[  v.x * B.c7 - v.y * B.c3 + v.z * B.c2 + v.w * B.c4 ] e423,
[  v.x * B.c3 + v.y * B.c7 - v.z * B.c1 + v.w * B.c5 ] e431,
[ -v.x * B.c2 + v.y * B.c1 + v.z * B.c7 + v.w * B.c6 ] e412,
[              -v.x * B.c4 - v.y * B.c5 - v.z * B.c6 ] e321,
[                                                  0 ] e1234

pga3dp geometric product ps * s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ ps * s ] e1234

pga3dp geometric product s * ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ s * ps ] e1234

pga3dp geometric product trivec * trivec -> mv_e:
[              -t1.w * t2.w ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e4,
[ t1.x * t2.w - t1.w * t2.x ] e41,
[ t1.y * t2.w - t1.w * t2.y ] e42,
[ t1.z * t2.w - t1.w * t2.z ] e43,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[                         0 ] e423,
[                         0 ] e431,
[                         0 ] e412,
[                         0 ] e321,
[                         0 ] e1234

pga3dp geometric product trivec * bivec -> mv_u:
[                                     0 ] 1,
[                            t.w * B.mx ] e1,
[                            t.w * B.my ] e2,
[                            t.w * B.mz ] e3,
[ -t.x * B.mx - t.y * B.my - t.z * B.mz ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -t.y * B.mz + t.z * B.my + t.w * B.vx ] e423,
[  t.x * B.mz - t.z * B.mx + t.w * B.vy ] e431,
[ -t.x * B.my + t.y * B.mx + t.w * B.vz ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp geometric product bivec * trivec -> mv_u:
[                                     0 ] 1,
[                            B.mx * t.w ] e1,
[                            B.my * t.w ] e2,
[                            B.mz * t.w ] e3,
[ -B.mx * t.x - B.my * t.y - B.mz * t.z ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -B.vx * t.w - B.my * t.z + B.mz * t.y ] e423,
[ -B.vy * t.w + B.mx * t.z - B.mz * t.x ] e431,
[ -B.vz * t.w - B.mx * t.y + B.my * t.x ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp geometric product trivec * vec -> mv_e:
[                                              0 ] 1,
[                                              0 ] e1,
[                                              0 ] e2,
[                                              0 ] e3,
[                                              0 ] e4,
[                         -t.y * v.z + t.z * v.y ] e41,
[                          t.x * v.z - t.z * v.x ] e42,
[                         -t.x * v.y + t.y * v.x ] e43,
[                                     -t.w * v.x ] e23,
[                                     -t.w * v.y ] e31,
[                                     -t.w * v.z ] e12,
[                                              0 ] e423,
[                                              0 ] e431,
[                                              0 ] e412,
[                                              0 ] e321,
[ -t.x * v.x - t.y * v.y - t.z * v.z - t.w * v.w ] e1234

pga3dp geometric product vec * trivec -> mv_e:
[                                             0 ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                         v.y * t.z - v.z * t.y ] e41,
[                        -v.x * t.z + v.z * t.x ] e42,
[                         v.x * t.y - v.y * t.x ] e43,
[                                    -v.x * t.w ] e23,
[                                    -v.y * t.w ] e31,
[                                    -v.z * t.w ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[ v.x * t.x + v.y * t.y + v.z * t.z + v.w * t.w ] e1234

pga3dp geometric product trivec * s -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ t.x * s ] e423,
[ t.y * s ] e431,
[ t.z * s ] e412,
[ t.w * s ] e321,
[       0 ] e1234

pga3dp geometric product s * trivec -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ s * t.x ] e423,
[ s * t.y ] e431,
[ s * t.z ] e412,
[ s * t.w ] e321,
[       0 ] e1234

pga3dp geometric product bivec * bivec -> mv_e:
[                                                 -B1.mx * B2.mx - B1.my * B2.my - B1.mz * B2.mz ] 1,
[                                                                                              0 ] e1,
[                                                                                              0 ] e2,
[                                                                                              0 ] e3,
[                                                                                              0 ] e4,
[                                 -B1.vy * B2.mz + B1.vz * B2.my - B1.my * B2.vz + B1.mz * B2.vy ] e41,
[                                  B1.vx * B2.mz - B1.vz * B2.mx + B1.mx * B2.vz - B1.mz * B2.vx ] e42,
[                                 -B1.vx * B2.my + B1.vy * B2.mx - B1.mx * B2.vy + B1.my * B2.vx ] e43,
[                                                                 -B1.my * B2.mz + B1.mz * B2.my ] e23,
[                                                                  B1.mx * B2.mz - B1.mz * B2.mx ] e31,
[                                                                 -B1.mx * B2.my + B1.my * B2.mx ] e12,
[                                                                                              0 ] e423,
[                                                                                              0 ] e431,
[                                                                                              0 ] e412,
[                                                                                              0 ] e321,
[ -B1.vx * B2.mx - B1.vy * B2.my - B1.vz * B2.mz - B1.mx * B2.vx - B1.my * B2.vy - B1.mz * B2.vz ] e1234

pga3dp geometric product bivec * vec -> mv_u:
[                                     0 ] 1,
[              -B.my * v.z + B.mz * v.y ] e1,
[               B.mx * v.z - B.mz * v.x ] e2,
[              -B.mx * v.y + B.my * v.x ] e3,
[  B.vx * v.x + B.vy * v.y + B.vz * v.z ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[  B.vy * v.z - B.vz * v.y + B.mx * v.w ] e423,
[ -B.vx * v.z + B.vz * v.x + B.my * v.w ] e431,
[  B.vx * v.y - B.vy * v.x + B.mz * v.w ] e412,
[ -B.mx * v.x - B.my * v.y - B.mz * v.z ] e321,
[                                     0 ] e1234

pga3dp geometric product vec * bivec -> mv_u:
[                                     0 ] 1,
[              -v.y * B.mz + v.z * B.my ] e1,
[               v.x * B.mz - v.z * B.mx ] e2,
[              -v.x * B.my + v.y * B.mx ] e3,
[ -v.x * B.vx - v.y * B.vy - v.z * B.vz ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -v.y * B.vz + v.z * B.vy + v.w * B.mx ] e423,
[  v.x * B.vz - v.z * B.vx + v.w * B.my ] e431,
[ -v.x * B.vy + v.y * B.vx + v.w * B.mz ] e412,
[ -v.x * B.mx - v.y * B.my - v.z * B.mz ] e321,
[                                     0 ] e1234

pga3dp geometric product bivec * s -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ B.vx * s ] e41,
[ B.vy * s ] e42,
[ B.vz * s ] e43,
[ B.mx * s ] e23,
[ B.my * s ] e31,
[ B.mz * s ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp geometric product s * bivec -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ s * B.vx ] e41,
[ s * B.vy ] e42,
[ s * B.vz ] e43,
[ s * B.mx ] e23,
[ s * B.my ] e31,
[ s * B.mz ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp geometric product vec * vec -> mv_e:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[              -v1.x * v2.w + v1.w * v2.x ] e41,
[              -v1.y * v2.w + v1.w * v2.y ] e42,
[              -v1.z * v2.w + v1.w * v2.z ] e43,
[               v1.y * v2.z - v1.z * v2.y ] e23,
[              -v1.x * v2.z + v1.z * v2.x ] e31,
[               v1.x * v2.y - v1.y * v2.x ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[                                       0 ] e1234

pga3dp geometric product vec * s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[ v.w * s ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp geometric product s * vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[ s * v.w ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp geometric product s * s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

-------------------------------------------------------------------

pga3dp commutator product - basis product table:
[      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[      0,      0,    e12,   -e31,   -e41,    -e4,      0,      0,      0,    -e3,     e2,  e1234,      0,      0,      0,   e423 ], 
[      0,   -e12,      0,    e23,   -e42,      0,    -e4,      0,     e3,      0,    -e1,      0,  e1234,      0,      0,   e431 ], 
[      0,    e31,   -e23,      0,   -e43,      0,      0,    -e4,    -e2,     e1,      0,      0,      0,  e1234,      0,   e412 ], 
[      0,    e41,    e42,    e43,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  e1234,      0 ], 
[      0,     e4,      0,      0,      0,      0,      0,      0,      0,   -e43,    e42,      0,      0,      0,  -e423,      0 ], 
[      0,      0,     e4,      0,      0,      0,      0,      0,    e43,      0,   -e41,      0,      0,      0,  -e431,      0 ], 
[      0,      0,      0,     e4,      0,      0,      0,      0,   -e42,    e41,      0,      0,      0,      0,  -e412,      0 ], 
[      0,      0,    -e3,     e2,      0,      0,   -e43,    e42,      0,   -e12,    e31,      0,  -e412,   e431,      0,      0 ], 
[      0,     e3,      0,    -e1,      0,    e43,      0,   -e41,    e12,      0,   -e23,   e412,      0,  -e423,      0,      0 ], 
[      0,    -e2,     e1,      0,      0,   -e42,    e41,      0,   -e31,    e23,      0,  -e431,   e423,      0,      0,      0 ], 
[      0, -e1234,      0,      0,      0,      0,      0,      0,      0,  -e412,   e431,      0,      0,      0,    e41,      0 ], 
[      0,      0, -e1234,      0,      0,      0,      0,      0,   e412,      0,  -e423,      0,      0,      0,    e42,      0 ], 
[      0,      0,      0, -e1234,      0,      0,      0,      0,  -e431,   e423,      0,      0,      0,      0,    e43,      0 ], 
[      0,      0,      0,      0, -e1234,   e423,   e431,   e412,      0,      0,      0,   -e41,   -e42,   -e43,      0,     e4 ], 
[      0,  -e423,  -e431,  -e412,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    -e4,      0 ] 

pga3dp commutator product cmt(mv,mv) -> mv:
[                                                                                                                       0 ] 1,
[                                                                -A.c2 * B.c10 + A.c3 * B.c9 - A.c9 * B.c3 + A.c10 * B.c2 ] e1,
[                                                                 A.c1 * B.c10 - A.c3 * B.c8 + A.c8 * B.c3 - A.c10 * B.c1 ] e2,
[                                                                  -A.c1 * B.c9 + A.c2 * B.c8 - A.c8 * B.c2 + A.c9 * B.c1 ] e3,
[      -A.c1 * B.c5 - A.c2 * B.c6 - A.c3 * B.c7 + A.c5 * B.c1 + A.c6 * B.c2 + A.c7 * B.c3 + A.c14 * B.c15 - A.c15 * B.c14 ] e4,
[    -A.c1 * B.c4 + A.c4 * B.c1 - A.c6 * B.c10 + A.c7 * B.c9 - A.c9 * B.c7 + A.c10 * B.c6 + A.c11 * B.c14 - A.c14 * B.c11 ] e41,
[    -A.c2 * B.c4 + A.c4 * B.c2 + A.c5 * B.c10 - A.c7 * B.c8 + A.c8 * B.c7 - A.c10 * B.c5 + A.c12 * B.c14 - A.c14 * B.c12 ] e42,
[      -A.c3 * B.c4 + A.c4 * B.c3 - A.c5 * B.c9 + A.c6 * B.c8 - A.c8 * B.c6 + A.c9 * B.c5 + A.c13 * B.c14 - A.c14 * B.c13 ] e43,
[                                                                 A.c2 * B.c3 - A.c3 * B.c2 - A.c9 * B.c10 + A.c10 * B.c9 ] e23,
[                                                                -A.c1 * B.c3 + A.c3 * B.c1 + A.c8 * B.c10 - A.c10 * B.c8 ] e31,
[                                                                   A.c1 * B.c2 - A.c2 * B.c1 - A.c8 * B.c9 + A.c9 * B.c8 ] e12,
[ A.c1 * B.c15 - A.c5 * B.c14 - A.c9 * B.c13 + A.c10 * B.c12 - A.c12 * B.c10 + A.c13 * B.c9 + A.c14 * B.c5 - A.c15 * B.c1 ] e423,
[ A.c2 * B.c15 - A.c6 * B.c14 + A.c8 * B.c13 - A.c10 * B.c11 + A.c11 * B.c10 - A.c13 * B.c8 + A.c14 * B.c6 - A.c15 * B.c2 ] e431,
[   A.c3 * B.c15 - A.c7 * B.c14 - A.c8 * B.c12 + A.c9 * B.c11 - A.c11 * B.c9 + A.c12 * B.c8 + A.c14 * B.c7 - A.c15 * B.c3 ] e412,
[                                                                                                                       0 ] e321,
[   A.c1 * B.c11 + A.c2 * B.c12 + A.c3 * B.c13 + A.c4 * B.c14 - A.c11 * B.c1 - A.c12 * B.c2 - A.c13 * B.c3 - A.c14 * B.c4 ] e1234

pga3dp commutator product cmt(trivec,trivec) -> bivec:
[                         0 ] 1,
[                         0 ] e1,
[                         0 ] e2,
[                         0 ] e3,
[                         0 ] e4,
[ t1.x * t2.w - t1.w * t2.x ] e41,
[ t1.y * t2.w - t1.w * t2.y ] e42,
[ t1.z * t2.w - t1.w * t2.z ] e43,
[                         0 ] e23,
[                         0 ] e31,
[                         0 ] e12,
[                         0 ] e423,
[                         0 ] e431,
[                         0 ] e412,
[                         0 ] e321,
[                         0 ] e1234

pga3dp commutator product cmt(trivec,bivec) -> trivec:
[                                     0 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[                                     0 ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -t.y * B.mz + t.z * B.my + t.w * B.vx ] e423,
[  t.x * B.mz - t.z * B.mx + t.w * B.vy ] e431,
[ -t.x * B.my + t.y * B.mx + t.w * B.vz ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp commutator product cmt(bivec,trivec) -> trivec:
[                                     0 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[                                     0 ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -B.vx * t.w - B.my * t.z + B.mz * t.y ] e423,
[ -B.vy * t.w + B.mx * t.z - B.mz * t.x ] e431,
[ -B.vz * t.w - B.mx * t.y + B.my * t.x ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp commutator product cmt(bivec,bivec) -> bivec:
[                                                              0 ] 1,
[                                                              0 ] e1,
[                                                              0 ] e2,
[                                                              0 ] e3,
[                                                              0 ] e4,
[ -B1.vy * B2.mz + B1.vz * B2.my - B1.my * B2.vz + B1.mz * B2.vy ] e41,
[  B1.vx * B2.mz - B1.vz * B2.mx + B1.mx * B2.vz - B1.mz * B2.vx ] e42,
[ -B1.vx * B2.my + B1.vy * B2.mx - B1.mx * B2.vy + B1.my * B2.vx ] e43,
[                                 -B1.my * B2.mz + B1.mz * B2.my ] e23,
[                                  B1.mx * B2.mz - B1.mz * B2.mx ] e31,
[                                 -B1.mx * B2.my + B1.my * B2.mx ] e12,
[                                                              0 ] e423,
[                                                              0 ] e431,
[                                                              0 ] e412,
[                                                              0 ] e321,
[                                                              0 ] e1234

pga3dp commutator product cmt(bivec,vec) -> vec:
[                                    0 ] 1,
[             -B.my * v.z + B.mz * v.y ] e1,
[              B.mx * v.z - B.mz * v.x ] e2,
[             -B.mx * v.y + B.my * v.x ] e3,
[ B.vx * v.x + B.vy * v.y + B.vz * v.z ] e4,
[                                    0 ] e41,
[                                    0 ] e42,
[                                    0 ] e43,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e423,
[                                    0 ] e431,
[                                    0 ] e412,
[                                    0 ] e321,
[                                    0 ] e1234

pga3dp commutator product cmt(vec,bivec) -> vec:
[                                     0 ] 1,
[              -v.y * B.mz + v.z * B.my ] e1,
[               v.x * B.mz - v.z * B.mx ] e2,
[              -v.x * B.my + v.y * B.mx ] e3,
[ -v.x * B.vx - v.y * B.vy - v.z * B.vz ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[                                     0 ] e423,
[                                     0 ] e431,
[                                     0 ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp commutator product cmt(vec,vec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[                          0 ] e4,
[ -v1.x * v2.w + v1.w * v2.x ] e41,
[ -v1.y * v2.w + v1.w * v2.y ] e42,
[ -v1.z * v2.w + v1.w * v2.z ] e43,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e423,
[                          0 ] e431,
[                          0 ] e412,
[                          0 ] e321,
[                          0 ] e1234

-------------------------------------------------------------------

pga3dp wedge product - basis product table:
[      1,     e1,     e2,     e3,     e4,    e41,    e42,    e43,    e23,    e31,    e12,   e423,   e431,   e412,   e321,  e1234 ], 
[     e1,      0,    e12,   -e31,   -e41,      0,  -e412,   e431,  -e321,      0,      0,  e1234,      0,      0,      0,      0 ], 
[     e2,   -e12,      0,    e23,   -e42,   e412,      0,  -e423,      0,  -e321,      0,      0,  e1234,      0,      0,      0 ], 
[     e3,    e31,   -e23,      0,   -e43,  -e431,   e423,      0,      0,      0,  -e321,      0,      0,  e1234,      0,      0 ], 
[     e4,    e41,    e42,    e43,      0,      0,      0,      0,   e423,   e431,   e412,      0,      0,      0,  e1234,      0 ], 
[    e41,      0,   e412,  -e431,      0,      0,      0,      0, -e1234,      0,      0,      0,      0,      0,      0,      0 ], 
[    e42,  -e412,      0,   e423,      0,      0,      0,      0,      0, -e1234,      0,      0,      0,      0,      0,      0 ], 
[    e43,   e431,  -e423,      0,      0,      0,      0,      0,      0,      0, -e1234,      0,      0,      0,      0,      0 ], 
[    e23,  -e321,      0,      0,   e423, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[    e31,      0,  -e321,      0,   e431,      0, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[    e12,      0,      0,  -e321,   e412,      0,      0, -e1234,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[   e423, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[   e431,      0, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[   e412,      0,      0, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[   e321,      0,      0,      0, -e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ], 
[  e1234,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0 ] 

pga3dp wedge product mv ^ mv -> mv:
[                                                                                                                                                                                                                               A.c0 * B.c0 ] 1,
[                                                                                                                                                                                                                 A.c0 * B.c1 + A.c1 * B.c0 ] e1,
[                                                                                                                                                                                                                 A.c0 * B.c2 + A.c2 * B.c0 ] e2,
[                                                                                                                                                                                                                 A.c0 * B.c3 + A.c3 * B.c0 ] e3,
[                                                                                                                                                                                                                 A.c0 * B.c4 + A.c4 * B.c0 ] e4,
[                                                                                                                                                                                     A.c0 * B.c5 - A.c1 * B.c4 + A.c4 * B.c1 + A.c5 * B.c0 ] e41,
[                                                                                                                                                                                     A.c0 * B.c6 - A.c2 * B.c4 + A.c4 * B.c2 + A.c6 * B.c0 ] e42,
[                                                                                                                                                                                     A.c0 * B.c7 - A.c3 * B.c4 + A.c4 * B.c3 + A.c7 * B.c0 ] e43,
[                                                                                                                                                                                     A.c0 * B.c8 + A.c2 * B.c3 - A.c3 * B.c2 + A.c8 * B.c0 ] e23,
[                                                                                                                                                                                     A.c0 * B.c9 - A.c1 * B.c3 + A.c3 * B.c1 + A.c9 * B.c0 ] e31,
[                                                                                                                                                                                   A.c0 * B.c10 + A.c1 * B.c2 - A.c2 * B.c1 + A.c10 * B.c0 ] e12,
[                                                                                                                           A.c0 * B.c11 - A.c2 * B.c7 + A.c3 * B.c6 + A.c4 * B.c8 + A.c6 * B.c3 - A.c7 * B.c2 + A.c8 * B.c4 + A.c11 * B.c0 ] e423,
[                                                                                                                           A.c0 * B.c12 + A.c1 * B.c7 - A.c3 * B.c5 + A.c4 * B.c9 - A.c5 * B.c3 + A.c7 * B.c1 + A.c9 * B.c4 + A.c12 * B.c0 ] e431,
[                                                                                                                         A.c0 * B.c13 - A.c1 * B.c6 + A.c2 * B.c5 + A.c4 * B.c10 + A.c5 * B.c2 - A.c6 * B.c1 + A.c10 * B.c4 + A.c13 * B.c0 ] e412,
[                                                                                                                         A.c0 * B.c14 - A.c1 * B.c8 - A.c2 * B.c9 - A.c3 * B.c10 - A.c8 * B.c1 - A.c9 * B.c2 - A.c10 * B.c3 + A.c14 * B.c0 ] e321,
[ A.c0 * B.c15 + A.c1 * B.c11 + A.c2 * B.c12 + A.c3 * B.c13 + A.c4 * B.c14 - A.c5 * B.c8 - A.c6 * B.c9 - A.c7 * B.c10 - A.c8 * B.c5 - A.c9 * B.c6 - A.c10 * B.c7 - A.c11 * B.c1 - A.c12 * B.c2 - A.c13 * B.c3 - A.c14 * B.c4 + A.c15 * B.c0 ] e1234

pga3dp wedge product ps ^ s -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ ps * s ] e1234

pga3dp wedge product s ^ ps -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ s * ps ] e1234

pga3dp wedge product trivec ^ vec -> ps:
[                                              0 ] 1,
[                                              0 ] e1,
[                                              0 ] e2,
[                                              0 ] e3,
[                                              0 ] e4,
[                                              0 ] e41,
[                                              0 ] e42,
[                                              0 ] e43,
[                                              0 ] e23,
[                                              0 ] e31,
[                                              0 ] e12,
[                                              0 ] e423,
[                                              0 ] e431,
[                                              0 ] e412,
[                                              0 ] e321,
[ -t.x * v.x - t.y * v.y - t.z * v.z - t.w * v.w ] e1234

pga3dp wedge product vec ^ trivec -> ps:
[                                             0 ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[ v.x * t.x + v.y * t.y + v.z * t.z + v.w * t.w ] e1234

pga3dp wedge product trivec ^ s -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ t.x * s ] e423,
[ t.y * s ] e431,
[ t.z * s ] e412,
[ t.w * s ] e321,
[       0 ] e1234

pga3dp wedge product s ^ trivec -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ s * t.x ] e423,
[ s * t.y ] e431,
[ s * t.z ] e412,
[ s * t.w ] e321,
[       0 ] e1234

pga3dp wedge product bivec ^ bivec -> ps:
[                                                                                              0 ] 1,
[                                                                                              0 ] e1,
[                                                                                              0 ] e2,
[                                                                                              0 ] e3,
[                                                                                              0 ] e4,
[                                                                                              0 ] e41,
[                                                                                              0 ] e42,
[                                                                                              0 ] e43,
[                                                                                              0 ] e23,
[                                                                                              0 ] e31,
[                                                                                              0 ] e12,
[                                                                                              0 ] e423,
[                                                                                              0 ] e431,
[                                                                                              0 ] e412,
[                                                                                              0 ] e321,
[ -B1.vx * B2.mx - B1.vy * B2.my - B1.vz * B2.mz - B1.mx * B2.vx - B1.my * B2.vy - B1.mz * B2.vz ] e1234

pga3dp wedge product bivec ^ vec -> trivec:
[                                     0 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[                                     0 ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[  B.vy * v.z - B.vz * v.y + B.mx * v.w ] e423,
[ -B.vx * v.z + B.vz * v.x + B.my * v.w ] e431,
[  B.vx * v.y - B.vy * v.x + B.mz * v.w ] e412,
[ -B.mx * v.x - B.my * v.y - B.mz * v.z ] e321,
[                                     0 ] e1234

pga3dp wedge product vec ^ bivec -> trivec:
[                                     0 ] 1,
[                                     0 ] e1,
[                                     0 ] e2,
[                                     0 ] e3,
[                                     0 ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[ -v.y * B.vz + v.z * B.vy + v.w * B.mx ] e423,
[  v.x * B.vz - v.z * B.vx + v.w * B.my ] e431,
[ -v.x * B.vy + v.y * B.vx + v.w * B.mz ] e412,
[ -v.x * B.mx - v.y * B.my - v.z * B.mz ] e321,
[                                     0 ] e1234

pga3dp wedge product bivec ^ s -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ B.vx * s ] e41,
[ B.vy * s ] e42,
[ B.vz * s ] e43,
[ B.mx * s ] e23,
[ B.my * s ] e31,
[ B.mz * s ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp wedge product s ^ bivec -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ s * B.vx ] e41,
[ s * B.vy ] e42,
[ s * B.vz ] e43,
[ s * B.mx ] e23,
[ s * B.my ] e31,
[ s * B.mz ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp wedge product vec ^ vec -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[                          0 ] e4,
[ -v1.x * v2.w + v1.w * v2.x ] e41,
[ -v1.y * v2.w + v1.w * v2.y ] e42,
[ -v1.z * v2.w + v1.w * v2.z ] e43,
[  v1.y * v2.z - v1.z * v2.y ] e23,
[ -v1.x * v2.z + v1.z * v2.x ] e31,
[  v1.x * v2.y - v1.y * v2.x ] e12,
[                          0 ] e423,
[                          0 ] e431,
[                          0 ] e412,
[                          0 ] e321,
[                          0 ] e1234

pga3dp wedge product vec ^ s -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[ v.w * s ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp wedge product s ^ vec -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[ s * v.w ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp wedge product s ^ s -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

-------------------------------------------------------------------

pga3dp inner product - basis product table:
[ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 ], 
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] 

pga3dp inner product dot(mv,mv) -> s:
[ A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c8 * B.c8 + A.c9 * B.c9 + A.c10 * B.c10 + A.c14 * B.c14 ] 1,
[                                                                                                                 0 ] e1,
[                                                                                                                 0 ] e2,
[                                                                                                                 0 ] e3,
[                                                                                                                 0 ] e4,
[                                                                                                                 0 ] e41,
[                                                                                                                 0 ] e42,
[                                                                                                                 0 ] e43,
[                                                                                                                 0 ] e23,
[                                                                                                                 0 ] e31,
[                                                                                                                 0 ] e12,
[                                                                                                                 0 ] e423,
[                                                                                                                 0 ] e431,
[                                                                                                                 0 ] e412,
[                                                                                                                 0 ] e321,
[                                                                                                                 0 ] e1234

pga3dp inner product dot(ps,ps) -> s:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp inner product dot(trivec,trivec) -> s:
[ t1.w * t2.w ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e4,
[           0 ] e41,
[           0 ] e42,
[           0 ] e43,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e423,
[           0 ] e431,
[           0 ] e412,
[           0 ] e321,
[           0 ] e1234

pga3dp inner product dot(bivec,bivec) -> s:
[ B1.mx * B2.mx + B1.my * B2.my + B1.mz * B2.mz ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[                                             0 ] e1234

pga3dp inner product dot(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[                                       0 ] e41,
[                                       0 ] e42,
[                                       0 ] e43,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[                                       0 ] e1234

pga3dp inner product dot(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

-------------------------------------------------------------------

pga3dp regressive wedge product - basis product table:
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,    e1 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,    e2 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,    e3 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,    e4 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,    -1,     0,     0,   -e4,     0,     0,    e1,   e41 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,    -1,     0,     0,   -e4,     0,    e2,   e42 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    -1,     0,     0,   -e4,    e3,   e43 ], 
[     0,     0,     0,     0,     0,    -1,     0,     0,     0,     0,     0,     0,    e3,   -e2,     0,   e23 ], 
[     0,     0,     0,     0,     0,     0,    -1,     0,     0,     0,     0,   -e3,     0,    e1,     0,   e31 ], 
[     0,     0,     0,     0,     0,     0,     0,    -1,     0,     0,     0,    e2,   -e1,     0,     0,   e12 ], 
[     0,    -1,     0,     0,     0,   -e4,     0,     0,     0,   -e3,    e2,     0,  -e43,   e42,   e23,  e423 ], 
[     0,     0,    -1,     0,     0,     0,   -e4,     0,    e3,     0,   -e1,   e43,     0,  -e41,   e31,  e431 ], 
[     0,     0,     0,    -1,     0,     0,     0,   -e4,   -e2,    e1,     0,  -e42,   e41,     0,   e12,  e412 ], 
[     0,     0,     0,     0,    -1,    e1,    e2,    e3,     0,     0,     0,  -e23,  -e31,  -e12,     0,  e321 ], 
[     1,    e1,    e2,    e3,    e4,   e41,   e42,   e43,   e23,   e31,   e12,  e423,  e431,  e412,  e321, e1234 ] 

pga3dp regressive wedge product rwdg(mv,mv) -> mv:
[ A.c0 * B.c15 + A.c1 * B.c11 + A.c2 * B.c12 + A.c3 * B.c13 + A.c4 * B.c14 - A.c5 * B.c8 - A.c6 * B.c9 - A.c7 * B.c10 - A.c8 * B.c5 - A.c9 * B.c6 - A.c10 * B.c7 - A.c11 * B.c1 - A.c12 * B.c2 - A.c13 * B.c3 - A.c14 * B.c4 + A.c15 * B.c0 ] 1,
[                                                                                                                   A.c1 * B.c15 + A.c5 * B.c14 + A.c9 * B.c13 - A.c10 * B.c12 - A.c12 * B.c10 + A.c13 * B.c9 + A.c14 * B.c5 + A.c15 * B.c1 ] e1,
[                                                                                                                   A.c2 * B.c15 + A.c6 * B.c14 - A.c8 * B.c13 + A.c10 * B.c11 + A.c11 * B.c10 - A.c13 * B.c8 + A.c14 * B.c6 + A.c15 * B.c2 ] e2,
[                                                                                                                     A.c3 * B.c15 + A.c7 * B.c14 + A.c8 * B.c12 - A.c9 * B.c11 - A.c11 * B.c9 + A.c12 * B.c8 + A.c14 * B.c7 + A.c15 * B.c3 ] e3,
[                                                                                                                     A.c4 * B.c15 - A.c5 * B.c11 - A.c6 * B.c12 - A.c7 * B.c13 - A.c11 * B.c5 - A.c12 * B.c6 - A.c13 * B.c7 + A.c15 * B.c4 ] e4,
[                                                                                                                                                                               A.c5 * B.c15 - A.c12 * B.c13 + A.c13 * B.c12 + A.c15 * B.c5 ] e41,
[                                                                                                                                                                               A.c6 * B.c15 + A.c11 * B.c13 - A.c13 * B.c11 + A.c15 * B.c6 ] e42,
[                                                                                                                                                                               A.c7 * B.c15 - A.c11 * B.c12 + A.c12 * B.c11 + A.c15 * B.c7 ] e43,
[                                                                                                                                                                               A.c8 * B.c15 + A.c11 * B.c14 - A.c14 * B.c11 + A.c15 * B.c8 ] e23,
[                                                                                                                                                                               A.c9 * B.c15 + A.c12 * B.c14 - A.c14 * B.c12 + A.c15 * B.c9 ] e31,
[                                                                                                                                                                             A.c10 * B.c15 + A.c13 * B.c14 - A.c14 * B.c13 + A.c15 * B.c10 ] e12,
[                                                                                                                                                                                                             A.c11 * B.c15 + A.c15 * B.c11 ] e423,
[                                                                                                                                                                                                             A.c12 * B.c15 + A.c15 * B.c12 ] e431,
[                                                                                                                                                                                                             A.c13 * B.c15 + A.c15 * B.c13 ] e412,
[                                                                                                                                                                                                             A.c14 * B.c15 + A.c15 * B.c14 ] e321,
[                                                                                                                                                                                                                             A.c15 * B.c15 ] e1234

pga3dp regressive wedge product rwdg(ps,trivec) -> trivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[        0 ] e41,
[        0 ] e42,
[        0 ] e43,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ ps * t.x ] e423,
[ ps * t.y ] e431,
[ ps * t.z ] e412,
[ ps * t.w ] e321,
[        0 ] e1234

pga3dp regressive wedge product rwdg(trivec,ps) -> trivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[        0 ] e41,
[        0 ] e42,
[        0 ] e43,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ t.x * ps ] e423,
[ t.y * ps ] e431,
[ t.z * ps ] e412,
[ t.w * ps ] e321,
[        0 ] e1234

pga3dp regressive wedge product rwdg(trivec,trivec) -> bivec:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[                          0 ] e4,
[ -t1.y * t2.z + t1.z * t2.y ] e41,
[  t1.x * t2.z - t1.z * t2.x ] e42,
[ -t1.x * t2.y + t1.y * t2.x ] e43,
[  t1.x * t2.w - t1.w * t2.x ] e23,
[  t1.y * t2.w - t1.w * t2.y ] e31,
[  t1.z * t2.w - t1.w * t2.z ] e12,
[                          0 ] e423,
[                          0 ] e431,
[                          0 ] e412,
[                          0 ] e321,
[                          0 ] e1234

pga3dp regressive wedge product rwdg(trivec,bivec) -> vec:
[                                     0 ] 1,
[ -t.y * B.mz + t.z * B.my + t.w * B.vx ] e1,
[  t.x * B.mz - t.z * B.mx + t.w * B.vy ] e2,
[ -t.x * B.my + t.y * B.mx + t.w * B.vz ] e3,
[ -t.x * B.vx - t.y * B.vy - t.z * B.vz ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[                                     0 ] e423,
[                                     0 ] e431,
[                                     0 ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp regressive wedge product rwdg(bivec,trivec) -> vec:
[                                     0 ] 1,
[  B.vx * t.w + B.my * t.z - B.mz * t.y ] e1,
[  B.vy * t.w - B.mx * t.z + B.mz * t.x ] e2,
[  B.vz * t.w + B.mx * t.y - B.my * t.x ] e3,
[ -B.vx * t.x - B.vy * t.y - B.vz * t.z ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[                                     0 ] e423,
[                                     0 ] e431,
[                                     0 ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp regressive wedge product rwdg(trivec,vec) -> s:
[ -t.x * v.x - t.y * v.y - t.z * v.z - t.w * v.w ] 1,
[                                              0 ] e1,
[                                              0 ] e2,
[                                              0 ] e3,
[                                              0 ] e4,
[                                              0 ] e41,
[                                              0 ] e42,
[                                              0 ] e43,
[                                              0 ] e23,
[                                              0 ] e31,
[                                              0 ] e12,
[                                              0 ] e423,
[                                              0 ] e431,
[                                              0 ] e412,
[                                              0 ] e321,
[                                              0 ] e1234

pga3dp regressive wedge product rwdg(vec,trivec) -> s:
[ v.x * t.x + v.y * t.y + v.z * t.z + v.w * t.w ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[                                             0 ] e1234

pga3dp regressive wedge product rwdg(bivec,bivec) -> s:
[ -B1.vx * B2.mx - B1.vy * B2.my - B1.vz * B2.mz - B1.mx * B2.vx - B1.my * B2.vy - B1.mz * B2.vz ] 1,
[                                                                                              0 ] e1,
[                                                                                              0 ] e2,
[                                                                                              0 ] e3,
[                                                                                              0 ] e4,
[                                                                                              0 ] e41,
[                                                                                              0 ] e42,
[                                                                                              0 ] e43,
[                                                                                              0 ] e23,
[                                                                                              0 ] e31,
[                                                                                              0 ] e12,
[                                                                                              0 ] e423,
[                                                                                              0 ] e431,
[                                                                                              0 ] e412,
[                                                                                              0 ] e321,
[                                                                                              0 ] e1234

-------------------------------------------------------------------

pga3dp regressive inner product - basis product table:
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234 ] 

pga3dp regressive inner product rdot(mv,mv) -> ps:
[                                                                                                                     0 ] 1,
[                                                                                                                     0 ] e1,
[                                                                                                                     0 ] e2,
[                                                                                                                     0 ] e3,
[                                                                                                                     0 ] e4,
[                                                                                                                     0 ] e41,
[                                                                                                                     0 ] e42,
[                                                                                                                     0 ] e43,
[                                                                                                                     0 ] e23,
[                                                                                                                     0 ] e31,
[                                                                                                                     0 ] e12,
[                                                                                                                     0 ] e423,
[                                                                                                                     0 ] e431,
[                                                                                                                     0 ] e412,
[                                                                                                                     0 ] e321,
[ A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 + A.c11 * B.c11 + A.c12 * B.c12 + A.c13 * B.c13 + A.c15 * B.c15 ] e1234

pga3dp regressive inner product rdot(ps,ps) -> ps:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e4,
[         0 ] e41,
[         0 ] e42,
[         0 ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e423,
[         0 ] e431,
[         0 ] e412,
[         0 ] e321,
[ ps1 * ps2 ] e1234

pga3dp regressive inner product rdot(trivec,trivec) -> ps:
[                                       0 ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[                                       0 ] e41,
[                                       0 ] e42,
[                                       0 ] e43,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[ t1.x * t2.x + t1.y * t2.y + t1.z * t2.z ] e1234

pga3dp regressive inner product rdot(bivec,bivec) -> ps:
[                                             0 ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[ B1.vx * B2.vx + B1.vy * B2.vy + B1.vz * B2.vz ] e1234

pga3dp regressive inner product rdot(vec,vec) -> ps:
[           0 ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e4,
[           0 ] e41,
[           0 ] e42,
[           0 ] e43,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e423,
[           0 ] e431,
[           0 ] e412,
[           0 ] e321,
[ v1.w * v2.w ] e1234

pga3dp regressive inner product rdot(s,s) -> ps:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

-------------------------------------------------------------------

pga3dp regressive geometric product - basis product table:
[      0,      0,      0,      0,   e321,    e23,    e31,    e12,      0,      0,      0,     e1,     e2,     e3,      0,      1 ], 
[      0,      0,      0,      0,   -e23,  -e321,     e3,    -e2,      0,      0,      0,      1,   -e12,    e31,      0,     e1 ], 
[      0,      0,      0,      0,   -e31,    -e3,  -e321,     e1,      0,      0,      0,    e12,      1,   -e23,      0,     e2 ], 
[      0,      0,      0,      0,   -e12,     e2,    -e1,  -e321,      0,      0,      0,   -e31,    e23,      1,      0,     e3 ], 
[  -e321,    e23,    e31,    e12, -e1234,   e423,   e431,   e412,    -e1,    -e2,    -e3,   -e41,   -e42,   -e43,      1,     e4 ], 
[    e23,  -e321,     e3,    -e2,   e423, -e1234,    e43,   -e42,     -1,    e12,   -e31,    -e4,   e412,  -e431,     e1,    e41 ], 
[    e31,    -e3,  -e321,     e1,   e431,   -e43, -e1234,    e41,   -e12,     -1,    e23,  -e412,    -e4,   e423,     e2,    e42 ], 
[    e12,     e2,    -e1,  -e321,   e412,    e42,   -e41, -e1234,    e31,   -e23,     -1,   e431,  -e423,    -e4,     e3,    e43 ], 
[      0,      0,      0,      0,     e1,     -1,    e12,   -e31,      0,      0,      0,  -e321,     e3,    -e2,      0,    e23 ], 
[      0,      0,      0,      0,     e2,   -e12,     -1,    e23,      0,      0,      0,    -e3,  -e321,     e1,      0,    e31 ], 
[      0,      0,      0,      0,     e3,    e31,   -e23,     -1,      0,      0,      0,     e2,    -e1,  -e321,      0,    e12 ], 
[    -e1,     -1,    e12,   -e31,   -e41,    -e4,   e412,  -e431,   e321,    -e3,     e2,  e1234,   -e43,    e42,    e23,   e423 ], 
[    -e2,   -e12,     -1,    e23,   -e42,  -e412,    -e4,   e423,     e3,   e321,    -e1,    e43,  e1234,   -e41,    e31,   e431 ], 
[    -e3,    e31,   -e23,     -1,   -e43,   e431,  -e423,    -e4,    -e2,     e1,   e321,   -e42,    e41,  e1234,    e12,   e412 ], 
[      0,      0,      0,      0,     -1,     e1,     e2,     e3,      0,      0,      0,   -e23,   -e31,   -e12,      0,   e321 ], 
[      1,     e1,     e2,     e3,     e4,    e41,    e42,    e43,    e23,    e31,    e12,   e423,   e431,   e412,   e321,  e1234 ] 

pga3dp regressive geometric product rgpr(mv,mv) -> mv:
[ A.c0 * B.c15 + A.c1 * B.c11 + A.c2 * B.c12 + A.c3 * B.c13 + A.c4 * B.c14 - A.c5 * B.c8 - A.c6 * B.c9 - A.c7 * B.c10 - A.c8 * B.c5 - A.c9 * B.c6 - A.c10 * B.c7 - A.c11 * B.c1 - A.c12 * B.c2 - A.c13 * B.c3 - A.c14 * B.c4 + A.c15 * B.c0 ] 1,
[ A.c0 * B.c11 + A.c1 * B.c15 + A.c2 * B.c7 - A.c3 * B.c6 - A.c4 * B.c8 + A.c5 * B.c14 + A.c6 * B.c3 - A.c7 * B.c2 + A.c8 * B.c4 + A.c9 * B.c13 - A.c10 * B.c12 - A.c11 * B.c0 - A.c12 * B.c10 + A.c13 * B.c9 + A.c14 * B.c5 + A.c15 * B.c1 ] e1,
[ A.c0 * B.c12 - A.c1 * B.c7 + A.c2 * B.c15 + A.c3 * B.c5 - A.c4 * B.c9 - A.c5 * B.c3 + A.c6 * B.c14 + A.c7 * B.c1 - A.c8 * B.c13 + A.c9 * B.c4 + A.c10 * B.c11 + A.c11 * B.c10 - A.c12 * B.c0 - A.c13 * B.c8 + A.c14 * B.c6 + A.c15 * B.c2 ] e2,
[ A.c0 * B.c13 + A.c1 * B.c6 - A.c2 * B.c5 + A.c3 * B.c15 - A.c4 * B.c10 + A.c5 * B.c2 - A.c6 * B.c1 + A.c7 * B.c14 + A.c8 * B.c12 - A.c9 * B.c11 + A.c10 * B.c4 - A.c11 * B.c9 + A.c12 * B.c8 - A.c13 * B.c0 + A.c14 * B.c7 + A.c15 * B.c3 ] e3,
[                                                                                                                     A.c4 * B.c15 - A.c5 * B.c11 - A.c6 * B.c12 - A.c7 * B.c13 - A.c11 * B.c5 - A.c12 * B.c6 - A.c13 * B.c7 + A.c15 * B.c4 ] e4,
[                                                                                                                    -A.c4 * B.c11 + A.c5 * B.c15 + A.c6 * B.c7 - A.c7 * B.c6 - A.c11 * B.c4 - A.c12 * B.c13 + A.c13 * B.c12 + A.c15 * B.c5 ] e41,
[                                                                                                                    -A.c4 * B.c12 - A.c5 * B.c7 + A.c6 * B.c15 + A.c7 * B.c5 + A.c11 * B.c13 - A.c12 * B.c4 - A.c13 * B.c11 + A.c15 * B.c6 ] e42,
[                                                                                                                    -A.c4 * B.c13 + A.c5 * B.c6 - A.c6 * B.c5 + A.c7 * B.c15 - A.c11 * B.c12 + A.c12 * B.c11 - A.c13 * B.c4 + A.c15 * B.c7 ] e43,
[ A.c0 * B.c5 - A.c1 * B.c4 - A.c2 * B.c13 + A.c3 * B.c12 + A.c4 * B.c1 + A.c5 * B.c0 + A.c6 * B.c10 - A.c7 * B.c9 + A.c8 * B.c15 + A.c9 * B.c7 - A.c10 * B.c6 + A.c11 * B.c14 + A.c12 * B.c3 - A.c13 * B.c2 - A.c14 * B.c11 + A.c15 * B.c8 ] e23,
[ A.c0 * B.c6 + A.c1 * B.c13 - A.c2 * B.c4 - A.c3 * B.c11 + A.c4 * B.c2 - A.c5 * B.c10 + A.c6 * B.c0 + A.c7 * B.c8 - A.c8 * B.c7 + A.c9 * B.c15 + A.c10 * B.c5 - A.c11 * B.c3 + A.c12 * B.c14 + A.c13 * B.c1 - A.c14 * B.c12 + A.c15 * B.c9 ] e31,
[ A.c0 * B.c7 - A.c1 * B.c12 + A.c2 * B.c11 - A.c3 * B.c4 + A.c4 * B.c3 + A.c5 * B.c9 - A.c6 * B.c8 + A.c7 * B.c0 + A.c8 * B.c6 - A.c9 * B.c5 + A.c10 * B.c15 + A.c11 * B.c2 - A.c12 * B.c1 + A.c13 * B.c14 - A.c14 * B.c13 + A.c15 * B.c10 ] e12,
[                                                                                                                     A.c4 * B.c5 + A.c5 * B.c4 + A.c6 * B.c13 - A.c7 * B.c12 + A.c11 * B.c15 + A.c12 * B.c7 - A.c13 * B.c6 + A.c15 * B.c11 ] e423,
[                                                                                                                     A.c4 * B.c6 - A.c5 * B.c13 + A.c6 * B.c4 + A.c7 * B.c11 - A.c11 * B.c7 + A.c12 * B.c15 + A.c13 * B.c5 + A.c15 * B.c12 ] e431,
[                                                                                                                     A.c4 * B.c7 + A.c5 * B.c12 - A.c6 * B.c11 + A.c7 * B.c4 + A.c11 * B.c6 - A.c12 * B.c5 + A.c13 * B.c15 + A.c15 * B.c13 ] e412,
[ A.c0 * B.c4 - A.c1 * B.c5 - A.c2 * B.c6 - A.c3 * B.c7 - A.c4 * B.c0 - A.c5 * B.c1 - A.c6 * B.c2 - A.c7 * B.c3 - A.c8 * B.c11 - A.c9 * B.c12 - A.c10 * B.c13 + A.c11 * B.c8 + A.c12 * B.c9 + A.c13 * B.c10 + A.c14 * B.c15 + A.c15 * B.c14 ] e321,
[                                                                                                                    -A.c4 * B.c4 - A.c5 * B.c5 - A.c6 * B.c6 - A.c7 * B.c7 + A.c11 * B.c11 + A.c12 * B.c12 + A.c13 * B.c13 + A.c15 * B.c15 ] e1234

pga3dp regressive geometric product rgpr(mv_e,mv_e) -> mv_e:
[ A.c0 * B.c7 - A.c1 * B.c4 - A.c2 * B.c5 - A.c3 * B.c6 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 + A.c7 * B.c0 ] 1,
[                                                                                                             0 ] e1,
[                                                                                                             0 ] e2,
[                                                                                                             0 ] e3,
[                                                                                                             0 ] e4,
[                                                         A.c1 * B.c7 + A.c2 * B.c3 - A.c3 * B.c2 + A.c7 * B.c1 ] e41,
[                                                        -A.c1 * B.c3 + A.c2 * B.c7 + A.c3 * B.c1 + A.c7 * B.c2 ] e42,
[                                                         A.c1 * B.c2 - A.c2 * B.c1 + A.c3 * B.c7 + A.c7 * B.c3 ] e43,
[ A.c0 * B.c1 + A.c1 * B.c0 + A.c2 * B.c6 - A.c3 * B.c5 + A.c4 * B.c7 + A.c5 * B.c3 - A.c6 * B.c2 + A.c7 * B.c4 ] e23,
[ A.c0 * B.c2 - A.c1 * B.c6 + A.c2 * B.c0 + A.c3 * B.c4 - A.c4 * B.c3 + A.c5 * B.c7 + A.c6 * B.c1 + A.c7 * B.c5 ] e31,
[ A.c0 * B.c3 + A.c1 * B.c5 - A.c2 * B.c4 + A.c3 * B.c0 + A.c4 * B.c2 - A.c5 * B.c1 + A.c6 * B.c7 + A.c7 * B.c6 ] e12,
[                                                                                                             0 ] e423,
[                                                                                                             0 ] e431,
[                                                                                                             0 ] e412,
[                                                                                                             0 ] e321,
[                                                        -A.c1 * B.c1 - A.c2 * B.c2 - A.c3 * B.c3 + A.c7 * B.c7 ] e1234

pga3dp regressive geometric product rgpr(mv_u,mv_e) -> mv_u:
[                                                                                                              0 ] 1,
[  A.c0 * B.c7 + A.c1 * B.c3 - A.c2 * B.c2 - A.c3 * B.c4 - A.c4 * B.c0 - A.c5 * B.c6 + A.c6 * B.c5 + A.c7 * B.c1 ] e1,
[ -A.c0 * B.c3 + A.c1 * B.c7 + A.c2 * B.c1 - A.c3 * B.c5 + A.c4 * B.c6 - A.c5 * B.c0 - A.c6 * B.c4 + A.c7 * B.c2 ] e2,
[  A.c0 * B.c2 - A.c1 * B.c1 + A.c2 * B.c7 - A.c3 * B.c6 - A.c4 * B.c5 + A.c5 * B.c4 - A.c6 * B.c0 + A.c7 * B.c3 ] e3,
[                                                          A.c3 * B.c7 - A.c4 * B.c1 - A.c5 * B.c2 - A.c6 * B.c3 ] e4,
[                                                                                                              0 ] e41,
[                                                                                                              0 ] e42,
[                                                                                                              0 ] e43,
[                                                                                                              0 ] e23,
[                                                                                                              0 ] e31,
[                                                                                                              0 ] e12,
[                                                          A.c3 * B.c1 + A.c4 * B.c7 + A.c5 * B.c3 - A.c6 * B.c2 ] e423,
[                                                          A.c3 * B.c2 - A.c4 * B.c3 + A.c5 * B.c7 + A.c6 * B.c1 ] e431,
[                                                          A.c3 * B.c3 + A.c4 * B.c2 - A.c5 * B.c1 + A.c6 * B.c7 ] e412,
[ -A.c0 * B.c1 - A.c1 * B.c2 - A.c2 * B.c3 - A.c3 * B.c0 + A.c4 * B.c4 + A.c5 * B.c5 + A.c6 * B.c6 + A.c7 * B.c7 ] e321,
[                                                                                                              0 ] e1234

pga3dp regressive geometric product rgpr(mv_e,trivec) -> mv_u:
[                                                  0 ] 1,
[  M.c0 * t.x + M.c1 * t.w + M.c5 * t.z - M.c6 * t.y ] e1,
[  M.c0 * t.y + M.c2 * t.w - M.c4 * t.z + M.c6 * t.x ] e2,
[  M.c0 * t.z + M.c3 * t.w + M.c4 * t.y - M.c5 * t.x ] e3,
[              -M.c1 * t.x - M.c2 * t.y - M.c3 * t.z ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[               M.c2 * t.z - M.c3 * t.y + M.c7 * t.x ] e423,
[              -M.c1 * t.z + M.c3 * t.x + M.c7 * t.y ] e431,
[               M.c1 * t.y - M.c2 * t.x + M.c7 * t.z ] e412,
[ -M.c4 * t.x - M.c5 * t.y - M.c6 * t.z + M.c7 * t.w ] e321,
[                                                  0 ] e1234

pga3dp regressive geometric product rgpr(mv_u,trivec) -> mv_e:
[  M.c0 * t.x + M.c1 * t.y + M.c2 * t.z + M.c3 * t.w ] 1,
[                                                  0 ] e1,
[                                                  0 ] e2,
[                                                  0 ] e3,
[                                                  0 ] e4,
[              -M.c3 * t.x - M.c5 * t.z + M.c6 * t.y ] e41,
[              -M.c3 * t.y + M.c4 * t.z - M.c6 * t.x ] e42,
[              -M.c3 * t.z - M.c4 * t.y + M.c5 * t.x ] e43,
[ -M.c1 * t.z + M.c2 * t.y + M.c4 * t.w - M.c7 * t.x ] e23,
[  M.c0 * t.z - M.c2 * t.x + M.c5 * t.w - M.c7 * t.y ] e31,
[ -M.c0 * t.y + M.c1 * t.x + M.c6 * t.w - M.c7 * t.z ] e12,
[                                                  0 ] e423,
[                                                  0 ] e431,
[                                                  0 ] e412,
[                                                  0 ] e321,
[               M.c4 * t.x + M.c5 * t.y + M.c6 * t.z ] e1234

pga3dp regressive geometric product rgpr(mv_e,bivec) -> mv_e:
[ -M.c1 * B.mx - M.c2 * B.my - M.c3 * B.mz - M.c4 * B.vx - M.c5 * B.vy - M.c6 * B.vz ] 1,
[                                                                                  0 ] e1,
[                                                                                  0 ] e2,
[                                                                                  0 ] e3,
[                                                                                  0 ] e4,
[                                            M.c2 * B.vz - M.c3 * B.vy + M.c7 * B.vx ] e41,
[                                           -M.c1 * B.vz + M.c3 * B.vx + M.c7 * B.vy ] e42,
[                                            M.c1 * B.vy - M.c2 * B.vx + M.c7 * B.vz ] e43,
[  M.c0 * B.vx + M.c2 * B.mz - M.c3 * B.my + M.c5 * B.vz - M.c6 * B.vy + M.c7 * B.mx ] e23,
[  M.c0 * B.vy - M.c1 * B.mz + M.c3 * B.mx - M.c4 * B.vz + M.c6 * B.vx + M.c7 * B.my ] e31,
[  M.c0 * B.vz + M.c1 * B.my - M.c2 * B.mx + M.c4 * B.vy - M.c5 * B.vx + M.c7 * B.mz ] e12,
[                                                                                  0 ] e423,
[                                                                                  0 ] e431,
[                                                                                  0 ] e412,
[                                                                                  0 ] e321,
[                                           -M.c1 * B.vx - M.c2 * B.vy - M.c3 * B.vz ] e1234

pga3dp regressive geometric product rgpr(mv_u,bivec) -> mv_u:
[                                                                                  0 ] 1,
[  M.c1 * B.vz - M.c2 * B.vy - M.c3 * B.mx - M.c5 * B.mz + M.c6 * B.my + M.c7 * B.vx ] e1,
[ -M.c0 * B.vz + M.c2 * B.vx - M.c3 * B.my + M.c4 * B.mz - M.c6 * B.mx + M.c7 * B.vy ] e2,
[  M.c0 * B.vy - M.c1 * B.vx - M.c3 * B.mz - M.c4 * B.my + M.c5 * B.mx + M.c7 * B.vz ] e3,
[                                           -M.c4 * B.vx - M.c5 * B.vy - M.c6 * B.vz ] e4,
[                                                                                  0 ] e41,
[                                                                                  0 ] e42,
[                                                                                  0 ] e43,
[                                                                                  0 ] e23,
[                                                                                  0 ] e31,
[                                                                                  0 ] e12,
[                                            M.c3 * B.vx + M.c5 * B.vz - M.c6 * B.vy ] e423,
[                                            M.c3 * B.vy - M.c4 * B.vz + M.c6 * B.vx ] e431,
[                                            M.c3 * B.vz + M.c4 * B.vy - M.c5 * B.vx ] e412,
[ -M.c0 * B.vx - M.c1 * B.vy - M.c2 * B.vz + M.c4 * B.mx + M.c5 * B.my + M.c6 * B.mz ] e321,
[                                                                                  0 ] e1234

pga3dp regressive geometric product rgpr(mv_e,vec) -> mv_u:
[                                                  0 ] 1,
[  M.c2 * v.z - M.c3 * v.y + M.c4 * v.w + M.c7 * v.x ] e1,
[ -M.c1 * v.z + M.c3 * v.x + M.c5 * v.w + M.c7 * v.y ] e2,
[  M.c1 * v.y - M.c2 * v.x + M.c6 * v.w + M.c7 * v.z ] e3,
[                                         M.c7 * v.w ] e4,
[                                                  0 ] e41,
[                                                  0 ] e42,
[                                                  0 ] e43,
[                                                  0 ] e23,
[                                                  0 ] e31,
[                                                  0 ] e12,
[                                         M.c1 * v.w ] e423,
[                                         M.c2 * v.w ] e431,
[                                         M.c3 * v.w ] e412,
[  M.c0 * v.w - M.c1 * v.x - M.c2 * v.y - M.c3 * v.z ] e321,
[                                                  0 ] e1234

pga3dp regressive geometric product rgpr(trivec,trivec) -> mv_e:
[                                       0 ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[              -t1.y * t2.z + t1.z * t2.y ] e41,
[               t1.x * t2.z - t1.z * t2.x ] e42,
[              -t1.x * t2.y + t1.y * t2.x ] e43,
[               t1.x * t2.w - t1.w * t2.x ] e23,
[               t1.y * t2.w - t1.w * t2.y ] e31,
[               t1.z * t2.w - t1.w * t2.z ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[ t1.x * t2.x + t1.y * t2.y + t1.z * t2.z ] e1234

pga3dp regressive geometric product rgpr(trivec,bivec) -> mv_u:
[                                     0 ] 1,
[ -t.y * B.mz + t.z * B.my + t.w * B.vx ] e1,
[  t.x * B.mz - t.z * B.mx + t.w * B.vy ] e2,
[ -t.x * B.my + t.y * B.mx + t.w * B.vz ] e3,
[ -t.x * B.vx - t.y * B.vy - t.z * B.vz ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[               t.y * B.vz - t.z * B.vy ] e423,
[              -t.x * B.vz + t.z * B.vx ] e431,
[               t.x * B.vy - t.y * B.vx ] e412,
[  t.x * B.mx + t.y * B.my + t.z * B.mz ] e321,
[                                     0 ] e1234

pga3dp regressive geometric product rgpr(trivec,vec) -> mv_e:
[ -t.x * v.x - t.y * v.y - t.z * v.z - t.w * v.w ] 1,
[                                              0 ] e1,
[                                              0 ] e2,
[                                              0 ] e3,
[                                              0 ] e4,
[                                     -t.x * v.w ] e41,
[                                     -t.y * v.w ] e42,
[                                     -t.z * v.w ] e43,
[                          t.y * v.z - t.z * v.y ] e23,
[                         -t.x * v.z + t.z * v.x ] e31,
[                          t.x * v.y - t.y * v.x ] e12,
[                                              0 ] e423,
[                                              0 ] e431,
[                                              0 ] e412,
[                                              0 ] e321,
[                                              0 ] e1234

pga3dp regressive geometric product rgpr(bivec,bivec) -> mv_e:
[ -B1.vx * B2.mx - B1.vy * B2.my - B1.vz * B2.mz - B1.mx * B2.vx - B1.my * B2.vy - B1.mz * B2.vz ] 1,
[                                                                                              0 ] e1,
[                                                                                              0 ] e2,
[                                                                                              0 ] e3,
[                                                                                              0 ] e4,
[                                                                  B1.vy * B2.vz - B1.vz * B2.vy ] e41,
[                                                                 -B1.vx * B2.vz + B1.vz * B2.vx ] e42,
[                                                                  B1.vx * B2.vy - B1.vy * B2.vx ] e43,
[                                  B1.vy * B2.mz - B1.vz * B2.my + B1.my * B2.vz - B1.mz * B2.vy ] e23,
[                                 -B1.vx * B2.mz + B1.vz * B2.mx - B1.mx * B2.vz + B1.mz * B2.vx ] e31,
[                                  B1.vx * B2.my - B1.vy * B2.mx + B1.mx * B2.vy - B1.my * B2.vx ] e12,
[                                                                                              0 ] e423,
[                                                                                              0 ] e431,
[                                                                                              0 ] e412,
[                                                                                              0 ] e321,
[                                                 -B1.vx * B2.vx - B1.vy * B2.vy - B1.vz * B2.vz ] e1234

pga3dp regressive geometric product rgpr(vec,vec) -> mv_e:
[                          0 ] 1,
[                          0 ] e1,
[                          0 ] e2,
[                          0 ] e3,
[                          0 ] e4,
[                          0 ] e41,
[                          0 ] e42,
[                          0 ] e43,
[ -v1.x * v2.w + v1.w * v2.x ] e23,
[ -v1.y * v2.w + v1.w * v2.y ] e31,
[ -v1.z * v2.w + v1.w * v2.z ] e12,
[                          0 ] e423,
[                          0 ] e431,
[                          0 ] e412,
[                          0 ] e321,
[               -v1.w * v2.w ] e1234

-------------------------------------------------------------------

pga3dp right bulk contraction - basis product table:
[     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e1,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e2,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e3,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e4,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[   e41,   -e4,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[   e42,     0,   -e4,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[   e43,     0,     0,   -e4,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[   e23,     0,    e3,   -e2,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,     0 ], 
[   e31,   -e3,     0,    e1,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0 ], 
[   e12,    e2,   -e1,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0 ], 
[  e423,     0,  -e43,   e42,     0,     0,     0,     0,    e4,     0,     0,     0,     0,     0,     0,     0 ], 
[  e431,   e43,     0,  -e41,     0,     0,     0,     0,     0,    e4,     0,     0,     0,     0,     0,     0 ], 
[  e412,  -e42,   e41,     0,     0,     0,     0,     0,     0,     0,    e4,     0,     0,     0,     0,     0 ], 
[  e321,  -e23,  -e31,  -e12,     0,     0,     0,     0,   -e1,   -e2,   -e3,     0,     0,     0,     1,     0 ], 
[ e1234,  e423,  e431,  e412,     0,     0,     0,     0,  -e41,  -e42,  -e43,     0,     0,     0,   -e4,     0 ] 

pga3dp right bulk contraction rbulk_contract(mv,mv) -> mv:
[   A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c8 * B.c8 + A.c9 * B.c9 + A.c10 * B.c10 + A.c14 * B.c14 ] 1,
[                                                             A.c1 * B.c0 + A.c9 * B.c3 - A.c10 * B.c2 - A.c14 * B.c8 ] e1,
[                                                             A.c2 * B.c0 - A.c8 * B.c3 + A.c10 * B.c1 - A.c14 * B.c9 ] e2,
[                                                             A.c3 * B.c0 + A.c8 * B.c2 - A.c9 * B.c1 - A.c14 * B.c10 ] e3,
[ A.c4 * B.c0 - A.c5 * B.c1 - A.c6 * B.c2 - A.c7 * B.c3 + A.c11 * B.c8 + A.c12 * B.c9 + A.c13 * B.c10 - A.c15 * B.c14 ] e4,
[                                                            A.c5 * B.c0 - A.c12 * B.c3 + A.c13 * B.c2 - A.c15 * B.c8 ] e41,
[                                                            A.c6 * B.c0 + A.c11 * B.c3 - A.c13 * B.c1 - A.c15 * B.c9 ] e42,
[                                                           A.c7 * B.c0 - A.c11 * B.c2 + A.c12 * B.c1 - A.c15 * B.c10 ] e43,
[                                                                                          A.c8 * B.c0 - A.c14 * B.c1 ] e23,
[                                                                                          A.c9 * B.c0 - A.c14 * B.c2 ] e31,
[                                                                                         A.c10 * B.c0 - A.c14 * B.c3 ] e12,
[                                                                                         A.c11 * B.c0 + A.c15 * B.c1 ] e423,
[                                                                                         A.c12 * B.c0 + A.c15 * B.c2 ] e431,
[                                                                                         A.c13 * B.c0 + A.c15 * B.c3 ] e412,
[                                                                                                        A.c14 * B.c0 ] e321,
[                                                                                                        A.c15 * B.c0 ] e1234

pga3dp right bulk contraction rbulk_contract(ps,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(ps,trivec) -> vec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[ -ps * t.w ] e4,
[         0 ] e41,
[         0 ] e42,
[         0 ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[         0 ] e423,
[         0 ] e431,
[         0 ] e412,
[         0 ] e321,
[         0 ] e1234

pga3dp right bulk contraction rbulk_contract(trivec,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(ps,bivec) -> bivec:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[          0 ] e4,
[ -ps * B.mx ] e41,
[ -ps * B.my ] e42,
[ -ps * B.mz ] e43,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[          0 ] e423,
[          0 ] e431,
[          0 ] e412,
[          0 ] e321,
[          0 ] e1234

pga3dp right bulk contraction rbulk_contract(bivec,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(ps,vec) -> trivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[        0 ] e41,
[        0 ] e42,
[        0 ] e43,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[ ps * v.x ] e423,
[ ps * v.y ] e431,
[ ps * v.z ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp right bulk contraction rbulk_contract(vec,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(ps,s) -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ ps * s ] e1234

pga3dp right bulk contraction rbulk_contract(s,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(trivec,trivec) -> s:
[ t1.w * t2.w ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e4,
[           0 ] e41,
[           0 ] e42,
[           0 ] e43,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e423,
[           0 ] e431,
[           0 ] e412,
[           0 ] e321,
[           0 ] e1234

pga3dp right bulk contraction rbulk_contract(trivec,bivec) -> vec:
[                                    0 ] 1,
[                          -t.w * B.mx ] e1,
[                          -t.w * B.my ] e2,
[                          -t.w * B.mz ] e3,
[ t.x * B.mx + t.y * B.my + t.z * B.mz ] e4,
[                                    0 ] e41,
[                                    0 ] e42,
[                                    0 ] e43,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e423,
[                                    0 ] e431,
[                                    0 ] e412,
[                                    0 ] e321,
[                                    0 ] e1234

pga3dp right bulk contraction rbulk_contract(bivec,trivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(trivec,vec) -> bivec:
[                      0 ] 1,
[                      0 ] e1,
[                      0 ] e2,
[                      0 ] e3,
[                      0 ] e4,
[ -t.y * v.z + t.z * v.y ] e41,
[  t.x * v.z - t.z * v.x ] e42,
[ -t.x * v.y + t.y * v.x ] e43,
[             -t.w * v.x ] e23,
[             -t.w * v.y ] e31,
[             -t.w * v.z ] e12,
[                      0 ] e423,
[                      0 ] e431,
[                      0 ] e412,
[                      0 ] e321,
[                      0 ] e1234

pga3dp right bulk contraction rbulk_contract(vec,trivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(trivec,s) -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ t.x * s ] e423,
[ t.y * s ] e431,
[ t.z * s ] e412,
[ t.w * s ] e321,
[       0 ] e1234

pga3dp right bulk contraction rbulk_contract(s,trivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(bivec,bivec) -> s:
[ B1.mx * B2.mx + B1.my * B2.my + B1.mz * B2.mz ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[                                             0 ] e1234

pga3dp right bulk contraction rbulk_contract(bivec,vec) -> vec:
[                                     0 ] 1,
[               B.my * v.z - B.mz * v.y ] e1,
[              -B.mx * v.z + B.mz * v.x ] e2,
[               B.mx * v.y - B.my * v.x ] e3,
[ -B.vx * v.x - B.vy * v.y - B.vz * v.z ] e4,
[                                     0 ] e41,
[                                     0 ] e42,
[                                     0 ] e43,
[                                     0 ] e23,
[                                     0 ] e31,
[                                     0 ] e12,
[                                     0 ] e423,
[                                     0 ] e431,
[                                     0 ] e412,
[                                     0 ] e321,
[                                     0 ] e1234

pga3dp right bulk contraction rbulk_contract(vec,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(bivec,s) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ B.vx * s ] e41,
[ B.vy * s ] e42,
[ B.vz * s ] e43,
[ B.mx * s ] e23,
[ B.my * s ] e31,
[ B.mz * s ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp right bulk contraction rbulk_contract(s,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[                                       0 ] e41,
[                                       0 ] e42,
[                                       0 ] e43,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[                                       0 ] e1234

pga3dp right bulk contraction rbulk_contract(vec,s) -> vec:
[       0 ] 1,
[ v.x * s ] e1,
[ v.y * s ] e2,
[ v.z * s ] e3,
[ v.w * s ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp right bulk contraction rbulk_contract(s,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp right bulk contraction rbulk_contract(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

-------------------------------------------------------------------

pga3dp right weight contraction - basis product table:
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,   e1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,   e2,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,   e3,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,  e23,    0,   e3,  -e2,    0,    0,    0,    1,    0,    0,    0,    0 ], 
[    0,    0,    0,    0,  e31,  -e3,    0,   e1,    0,    0,    0,    0,    1,    0,    0,    0 ], 
[    0,    0,    0,    0,  e12,   e2,  -e1,    0,    0,    0,    0,    0,    0,    1,    0,    0 ], 
[    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 ], 
[    0,    0,    0,    0, e321, -e23, -e31, -e12,    0,    0,    0,  -e1,  -e2,  -e3,    0,    1 ] 

-------------------------------------------------------------------

pga3dp left bulk contraction - basis product table:
[     1,    e1,    e2,    e3,    e4,   e41,   e42,   e43,   e23,   e31,   e12,  e423,  e431,  e412,  e321, e1234 ], 
[     0,     1,     0,     0,     0,    e4,     0,     0,     0,    e3,   -e2,     0,   e43,  -e42,  -e23, -e423 ], 
[     0,     0,     1,     0,     0,     0,    e4,     0,   -e3,     0,    e1,  -e43,     0,   e41,  -e31, -e431 ], 
[     0,     0,     0,     1,     0,     0,     0,    e4,    e2,   -e1,     0,   e42,  -e41,     0,  -e12, -e412 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,    e4,     0,     0,   -e1,  -e41 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,    e4,     0,   -e2,  -e42 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,    e4,   -e3,  -e43 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,    e4 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ] 

pga3dp left bulk contraction lbulk_contract(mv,mv) -> mv:
[   A.c0 * B.c0 + A.c1 * B.c1 + A.c2 * B.c2 + A.c3 * B.c3 + A.c8 * B.c8 + A.c9 * B.c9 + A.c10 * B.c10 + A.c14 * B.c14 ] 1,
[                                                             A.c0 * B.c1 + A.c2 * B.c10 - A.c3 * B.c9 - A.c8 * B.c14 ] e1,
[                                                             A.c0 * B.c2 - A.c1 * B.c10 + A.c3 * B.c8 - A.c9 * B.c14 ] e2,
[                                                             A.c0 * B.c3 + A.c1 * B.c9 - A.c2 * B.c8 - A.c10 * B.c14 ] e3,
[ A.c0 * B.c4 + A.c1 * B.c5 + A.c2 * B.c6 + A.c3 * B.c7 + A.c8 * B.c11 + A.c9 * B.c12 + A.c10 * B.c13 + A.c14 * B.c15 ] e4,
[                                                            A.c0 * B.c5 + A.c2 * B.c13 - A.c3 * B.c12 - A.c8 * B.c15 ] e41,
[                                                            A.c0 * B.c6 - A.c1 * B.c13 + A.c3 * B.c11 - A.c9 * B.c15 ] e42,
[                                                           A.c0 * B.c7 + A.c1 * B.c12 - A.c2 * B.c11 - A.c10 * B.c15 ] e43,
[                                                                                          A.c0 * B.c8 - A.c1 * B.c14 ] e23,
[                                                                                          A.c0 * B.c9 - A.c2 * B.c14 ] e31,
[                                                                                         A.c0 * B.c10 - A.c3 * B.c14 ] e12,
[                                                                                         A.c0 * B.c11 - A.c1 * B.c15 ] e423,
[                                                                                         A.c0 * B.c12 - A.c2 * B.c15 ] e431,
[                                                                                         A.c0 * B.c13 - A.c3 * B.c15 ] e412,
[                                                                                                        A.c0 * B.c14 ] e321,
[                                                                                                        A.c0 * B.c15 ] e1234

pga3dp left bulk contraction lbulk_contract(ps,ps) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(ps,trivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(trivec,ps) -> vec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[ t.w * ps ] e4,
[        0 ] e41,
[        0 ] e42,
[        0 ] e43,
[        0 ] e23,
[        0 ] e31,
[        0 ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp left bulk contraction lbulk_contract(ps,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(bivec,ps) -> bivec:
[          0 ] 1,
[          0 ] e1,
[          0 ] e2,
[          0 ] e3,
[          0 ] e4,
[ -B.mx * ps ] e41,
[ -B.my * ps ] e42,
[ -B.mz * ps ] e43,
[          0 ] e23,
[          0 ] e31,
[          0 ] e12,
[          0 ] e423,
[          0 ] e431,
[          0 ] e412,
[          0 ] e321,
[          0 ] e1234

pga3dp left bulk contraction lbulk_contract(ps,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(vec,ps) -> trivec:
[         0 ] 1,
[         0 ] e1,
[         0 ] e2,
[         0 ] e3,
[         0 ] e4,
[         0 ] e41,
[         0 ] e42,
[         0 ] e43,
[         0 ] e23,
[         0 ] e31,
[         0 ] e12,
[ -v.x * ps ] e423,
[ -v.y * ps ] e431,
[ -v.z * ps ] e412,
[         0 ] e321,
[         0 ] e1234

pga3dp left bulk contraction lbulk_contract(ps,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(s,ps) -> ps:
[      0 ] 1,
[      0 ] e1,
[      0 ] e2,
[      0 ] e3,
[      0 ] e4,
[      0 ] e41,
[      0 ] e42,
[      0 ] e43,
[      0 ] e23,
[      0 ] e31,
[      0 ] e12,
[      0 ] e423,
[      0 ] e431,
[      0 ] e412,
[      0 ] e321,
[ s * ps ] e1234

pga3dp left bulk contraction lbulk_contract(trivec,trivec) -> s:
[ t1.w * t2.w ] 1,
[           0 ] e1,
[           0 ] e2,
[           0 ] e3,
[           0 ] e4,
[           0 ] e41,
[           0 ] e42,
[           0 ] e43,
[           0 ] e23,
[           0 ] e31,
[           0 ] e12,
[           0 ] e423,
[           0 ] e431,
[           0 ] e412,
[           0 ] e321,
[           0 ] e1234

pga3dp left bulk contraction lbulk_contract(trivec,bivec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(bivec,trivec) -> vec:
[                                    0 ] 1,
[                          -B.mx * t.w ] e1,
[                          -B.my * t.w ] e2,
[                          -B.mz * t.w ] e3,
[ B.mx * t.x + B.my * t.y + B.mz * t.z ] e4,
[                                    0 ] e41,
[                                    0 ] e42,
[                                    0 ] e43,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e423,
[                                    0 ] e431,
[                                    0 ] e412,
[                                    0 ] e321,
[                                    0 ] e1234

pga3dp left bulk contraction lbulk_contract(trivec,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(vec,trivec) -> bivec:
[                      0 ] 1,
[                      0 ] e1,
[                      0 ] e2,
[                      0 ] e3,
[                      0 ] e4,
[  v.y * t.z - v.z * t.y ] e41,
[ -v.x * t.z + v.z * t.x ] e42,
[  v.x * t.y - v.y * t.x ] e43,
[             -v.x * t.w ] e23,
[             -v.y * t.w ] e31,
[             -v.z * t.w ] e12,
[                      0 ] e423,
[                      0 ] e431,
[                      0 ] e412,
[                      0 ] e321,
[                      0 ] e1234

pga3dp left bulk contraction lbulk_contract(trivec,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(s,trivec) -> trivec:
[       0 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[ s * t.x ] e423,
[ s * t.y ] e431,
[ s * t.z ] e412,
[ s * t.w ] e321,
[       0 ] e1234

pga3dp left bulk contraction lbulk_contract(bivec,bivec) -> s:
[ B1.mx * B2.mx + B1.my * B2.my + B1.mz * B2.mz ] 1,
[                                             0 ] e1,
[                                             0 ] e2,
[                                             0 ] e3,
[                                             0 ] e4,
[                                             0 ] e41,
[                                             0 ] e42,
[                                             0 ] e43,
[                                             0 ] e23,
[                                             0 ] e31,
[                                             0 ] e12,
[                                             0 ] e423,
[                                             0 ] e431,
[                                             0 ] e412,
[                                             0 ] e321,
[                                             0 ] e1234

pga3dp left bulk contraction lbulk_contract(bivec,vec) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(vec,bivec) -> vec:
[                                    0 ] 1,
[              v.y * B.mz - v.z * B.my ] e1,
[             -v.x * B.mz + v.z * B.mx ] e2,
[              v.x * B.my - v.y * B.mx ] e3,
[ v.x * B.vx + v.y * B.vy + v.z * B.vz ] e4,
[                                    0 ] e41,
[                                    0 ] e42,
[                                    0 ] e43,
[                                    0 ] e23,
[                                    0 ] e31,
[                                    0 ] e12,
[                                    0 ] e423,
[                                    0 ] e431,
[                                    0 ] e412,
[                                    0 ] e321,
[                                    0 ] e1234

pga3dp left bulk contraction lbulk_contract(bivec,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(s,bivec) -> bivec:
[        0 ] 1,
[        0 ] e1,
[        0 ] e2,
[        0 ] e3,
[        0 ] e4,
[ s * B.vx ] e41,
[ s * B.vy ] e42,
[ s * B.vz ] e43,
[ s * B.mx ] e23,
[ s * B.my ] e31,
[ s * B.mz ] e12,
[        0 ] e423,
[        0 ] e431,
[        0 ] e412,
[        0 ] e321,
[        0 ] e1234

pga3dp left bulk contraction lbulk_contract(vec,vec) -> s:
[ v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ] 1,
[                                       0 ] e1,
[                                       0 ] e2,
[                                       0 ] e3,
[                                       0 ] e4,
[                                       0 ] e41,
[                                       0 ] e42,
[                                       0 ] e43,
[                                       0 ] e23,
[                                       0 ] e31,
[                                       0 ] e12,
[                                       0 ] e423,
[                                       0 ] e431,
[                                       0 ] e412,
[                                       0 ] e321,
[                                       0 ] e1234

pga3dp left bulk contraction lbulk_contract(vec,s) -> 0:
[ 0 ] 1,
[ 0 ] e1,
[ 0 ] e2,
[ 0 ] e3,
[ 0 ] e4,
[ 0 ] e41,
[ 0 ] e42,
[ 0 ] e43,
[ 0 ] e23,
[ 0 ] e31,
[ 0 ] e12,
[ 0 ] e423,
[ 0 ] e431,
[ 0 ] e412,
[ 0 ] e321,
[ 0 ] e1234

pga3dp left bulk contraction lbulk_contract(s,vec) -> vec:
[       0 ] 1,
[ s * v.x ] e1,
[ s * v.y ] e2,
[ s * v.z ] e3,
[ s * v.w ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

pga3dp left bulk contraction lbulk_contract(s,s) -> s:
[ s1 * s2 ] 1,
[       0 ] e1,
[       0 ] e2,
[       0 ] e3,
[       0 ] e4,
[       0 ] e41,
[       0 ] e42,
[       0 ] e43,
[       0 ] e23,
[       0 ] e31,
[       0 ] e12,
[       0 ] e423,
[       0 ] e431,
[       0 ] e412,
[       0 ] e321,
[       0 ] e1234

-------------------------------------------------------------------

pga3dp left weight contraction - basis product table:
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     1,   -e1,   -e2,   -e3,     0,     0,     0,   e23,   e31,   e12,     0, -e321 ], 
[     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,     0,     0,   -e3,    e2,     0,  -e23 ], 
[     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,     0,    e3,     0,   -e1,     0,  -e31 ], 
[     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,   -e2,    e1,     0,     0,  -e12 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,    e1 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,     0,    e2 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,    e3 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1 ] 

-------------------------------------------------------------------

pga3dp right bulk expansion - basis product table:
[ e1234,  e423,  e431,  e412,     0,     0,     0,     0,  -e41,  -e42,  -e43,     0,     0,     0,   -e4,     0 ], 
[     0, e1234,     0,     0,     0,     0,     0,     0,     0,  e412, -e431,     0,     0,     0,   e41,     0 ], 
[     0,     0, e1234,     0,     0,     0,     0,     0, -e412,     0,  e423,     0,     0,     0,   e42,     0 ], 
[     0,     0,     0, e1234,     0,     0,     0,     0,  e431, -e423,     0,     0,     0,     0,   e43,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0, -e423,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0, -e431,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0, -e412,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ] 

-------------------------------------------------------------------

pga3dp right weight expansion - basis product table:
[     0,     0,     0,     0,  e321,  -e23,  -e31,  -e12,     0,     0,     0,   -e1,   -e2,   -e3,     0,     1 ], 
[     0,     0,     0,     0,     0,  e321,     0,     0,     0,     0,     0,     0,  -e12,   e31,     0,    e1 ], 
[     0,     0,     0,     0,     0,     0,  e321,     0,     0,     0,     0,   e12,     0,  -e23,     0,    e2 ], 
[     0,     0,     0,     0,     0,     0,     0,  e321,     0,     0,     0,  -e31,   e23,     0,     0,    e3 ], 
[     0,     0,     0,     0, e1234, -e423, -e431, -e412,     0,     0,     0,  -e41,  -e42,  -e43,     0,    e4 ], 
[     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0, -e412,  e431,     0,   e41 ], 
[     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,  e412,     0, -e423,     0,   e42 ], 
[     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0, -e431,  e423,     0,     0,   e43 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,  e321,     0,     0,     0,   e23 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,  e321,     0,     0,   e31 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,  e321,     0,   e12 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,  e423 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,  e431 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234,     0,  e412 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,  e321 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, e1234 ] 

-------------------------------------------------------------------

pga3dp left bulk expansion - basis product table:
[ e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[ -e423, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[ -e431,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[ -e412,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[  -e41,     0, -e412,  e431,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0 ], 
[  -e42,  e412,     0, -e423,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0 ], 
[  -e43, -e431,  e423,     0,     0,     0,     0,     0,     0,     0, e1234,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e4,   e41,   e42,   e43,     0,     0,     0,     0,  e423,  e431,  e412,     0,     0,     0, e1234,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ] 

-------------------------------------------------------------------

pga3dp left weight expansion - basis product table:
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[ -e321,     0,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[  -e23,  e321,     0,     0, -e423, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[  -e31,     0,  e321,     0, -e431,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[  -e12,     0,     0,  e321, -e412,     0,     0, e1234,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[    e1,     0,   e12,  -e31,  -e41,     0, -e412,  e431, -e321,     0,     0, e1234,     0,     0,     0,     0 ], 
[    e2,  -e12,     0,   e23,  -e42,  e412,     0, -e423,     0, -e321,     0,     0, e1234,     0,     0,     0 ], 
[    e3,   e31,  -e23,     0,  -e43, -e431,  e423,     0,     0,     0, -e321,     0,     0, e1234,     0,     0 ], 
[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 ], 
[     1,    e1,    e2,    e3,    e4,   e41,   e42,   e43,   e23,   e31,   e12,  e423,  e431,  e412,  e321, e1234 ] 

-------------------------------------------------------------------

pga3dp regressive sandwich product - basis product table:
[      0,      0,      0,      0,   e321,    e23,    e31,    e12,      0,      0,      0,     e1,     e2,     e3,      0,      1 ], 
[      0,      0,      0,      0,   -e23,  -e321,     e3,    -e2,      0,      0,      0,      1,   -e12,    e31,      0,     e1 ], 
[      0,      0,      0,      0,   -e31,    -e3,  -e321,     e1,      0,      0,      0,    e12,      1,   -e23,      0,     e2 ], 
[      0,      0,      0,      0,   -e12,     e2,    -e1,  -e321,      0,      0,      0,   -e31,    e23,      1,      0,     e3 ], 
[  -e321,    e23,    e31,    e12, -e1234,   e423,   e431,   e412,    -e1,    -e2,    -e3,   -e41,   -e42,   -e43,      1,     e4 ], 
[    e23,  -e321,     e3,    -e2,   e423, -e1234,    e43,   -e42,     -1,    e12,   -e31,    -e4,   e412,  -e431,     e1,    e41 ], 
[    e31,    -e3,  -e321,     e1,   e431,   -e43, -e1234,    e41,   -e12,     -1,    e23,  -e412,    -e4,   e423,     e2,    e42 ], 
[    e12,     e2,    -e1,  -e321,   e412,    e42,   -e41, -e1234,    e31,   -e23,     -1,   e431,  -e423,    -e4,     e3,    e43 ], 
[      0,      0,      0,      0,     e1,     -1,    e12,   -e31,      0,      0,      0,  -e321,     e3,    -e2,      0,    e23 ], 
[      0,      0,      0,      0,     e2,   -e12,     -1,    e23,      0,      0,      0,    -e3,  -e321,     e1,      0,    e31 ], 
[      0,      0,      0,      0,     e3,    e31,   -e23,     -1,      0,      0,      0,     e2,    -e1,  -e321,      0,    e12 ], 
[    -e1,     -1,    e12,   -e31,   -e41,    -e4,   e412,  -e431,   e321,    -e3,     e2,  e1234,   -e43,    e42,    e23,   e423 ], 
[    -e2,   -e12,     -1,    e23,   -e42,  -e412,    -e4,   e423,     e3,   e321,    -e1,    e43,  e1234,   -e41,    e31,   e431 ], 
[    -e3,    e31,   -e23,     -1,   -e43,   e431,  -e423,    -e4,    -e2,     e1,   e321,   -e42,    e41,  e1234,    e12,   e412 ], 
[      0,      0,      0,      0,     -1,     e1,     e2,     e3,      0,      0,      0,   -e23,   -e31,   -e12,      0,   e321 ], 
[      1,     e1,     e2,     e3,     e4,    e41,    e42,    e43,    e23,    e31,    e12,   e423,   e431,   e412,   e321,  e1234 ] 

pga3dp regressive sandwich product mv_e * vec -> mv_u_tmp:
mv_u_tmp:
[                                                    0 ] 1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) ] e1,
[ (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) ] e2,
[  (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) ] e3,
[                                         (R.c7 * v.w) ] e4,
[                                                    0 ] e41,
[                                                    0 ] e42,
[                                                    0 ] e43,
[                                                    0 ] e23,
[                                                    0 ] e31,
[                                                    0 ] e12,
[                                         (R.c1 * v.w) ] e423,
[                                         (R.c2 * v.w) ] e431,
[                                         (R.c3 * v.w) ] e412,
[  (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) ] e321,
[                                                    0 ] e1234

pga3dp regressive sandwich product mv_u_tmp * rrev(mv_e) -> mv_u_res:
[                                                                                                                                                                                                                                                                                                                                           0 ] 1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c7 - (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c3 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c2 + (R.c7 * v.w) * R.c4 - (R.c1 * v.w) * R.c0 + (R.c2 * v.w) * R.c6 - (R.c3 * v.w) * R.c5 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c1 ] e1,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c3 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c7 - (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c1 + (R.c7 * v.w) * R.c5 - (R.c1 * v.w) * R.c6 - (R.c2 * v.w) * R.c0 + (R.c3 * v.w) * R.c4 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c2 ] e2,
[ -(R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c2 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c1 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c7 + (R.c7 * v.w) * R.c6 + (R.c1 * v.w) * R.c5 - (R.c2 * v.w) * R.c4 - (R.c3 * v.w) * R.c0 - (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c3 ] e3,
[                                                                                                                                                                                                                                                       (R.c7 * v.w) * R.c7 + (R.c1 * v.w) * R.c1 + (R.c2 * v.w) * R.c2 + (R.c3 * v.w) * R.c3 ] e4,
[                                                                                                                                                                                                                                                                                                                                           0 ] e41,
[                                                                                                                                                                                                                                                                                                                                           0 ] e42,
[                                                                                                                                                                                                                                                                                                                                           0 ] e43,
[                                                                                                                                                                                                                                                                                                                                           0 ] e23,
[                                                                                                                                                                                                                                                                                                                                           0 ] e31,
[                                                                                                                                                                                                                                                                                                                                           0 ] e12,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c1 + (R.c1 * v.w) * R.c7 - (R.c2 * v.w) * R.c3 + (R.c3 * v.w) * R.c2 ] e423,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c2 + (R.c1 * v.w) * R.c3 + (R.c2 * v.w) * R.c7 - (R.c3 * v.w) * R.c1 ] e431,
[                                                                                                                                                                                                                                                      -(R.c7 * v.w) * R.c3 - (R.c1 * v.w) * R.c2 + (R.c2 * v.w) * R.c1 + (R.c3 * v.w) * R.c7 ] e412,
[  (R.c2 * v.z - R.c3 * v.y + R.c4 * v.w + R.c7 * v.x) * R.c1 + (-R.c1 * v.z + R.c3 * v.x + R.c5 * v.w + R.c7 * v.y) * R.c2 + (R.c1 * v.y - R.c2 * v.x + R.c6 * v.w + R.c7 * v.z) * R.c3 - (R.c7 * v.w) * R.c0 - (R.c1 * v.w) * R.c4 - (R.c2 * v.w) * R.c5 - (R.c3 * v.w) * R.c6 + (R.c0 * v.w - R.c1 * v.x - R.c2 * v.y - R.c3 * v.z) * R.c7 ] e321,
[                                                                                                                                                                                                                                                                                                                                           0 ] e1234

pga3dp regressive sandwich product mv_e * bivec -> mv_e_tmp:
mv_e_tmp:
[ (-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) ] 1,
[                                                                                    0 ] e1,
[                                                                                    0 ] e2,
[                                                                                    0 ] e3,
[                                                                                    0 ] e4,
[                                            (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) ] e41,
[                                           (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) ] e42,
[                                            (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) ] e43,
[  (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) ] e23,
[  (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) ] e31,
[  (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) ] e12,
[                                                                                    0 ] e423,
[                                                                                    0 ] e431,
[                                                                                    0 ] e412,
[                                                                                    0 ] e321,
[                                           (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) ] e1234

pga3dp regressive sandwich product mv_e_tmp * rrev(mv_e) -> mv_e_res:
[  (-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c7 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c4 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c5 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c6 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c1 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c2 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c3 + (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c0 ] 1,
e1,
e2,
e3,
e4,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c7 - (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c3 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c2 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c1 ] e41,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c3 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c7 - (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c1 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c2 ] e42,
[                                                                                                                                                                                                                                                                                                                                                                                      -(R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c2 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c1 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c7 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c3 ] e43,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c1 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c0 - (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c6 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c5 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c7 - (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c3 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c2 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c4 ] e23,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c2 + (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c6 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c0 - (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c4 + (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c3 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c7 - (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c1 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c5 ] e31,
[ -(-R.c1 * B.mx - R.c2 * B.my - R.c3 * B.mz - R.c4 * B.vx - R.c5 * B.vy - R.c6 * B.vz) * R.c3 - (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c5 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c4 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c0 - (R.c0 * B.vx + R.c2 * B.mz - R.c3 * B.my + R.c5 * B.vz - R.c6 * B.vy + R.c7 * B.mx) * R.c2 + (R.c0 * B.vy - R.c1 * B.mz + R.c3 * B.mx - R.c4 * B.vz + R.c6 * B.vx + R.c7 * B.my) * R.c1 + (R.c0 * B.vz + R.c1 * B.my - R.c2 * B.mx + R.c4 * B.vy - R.c5 * B.vx + R.c7 * B.mz) * R.c7 - (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c6 ] e12,
e423,
e431,
e412,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 0 ] e321,
[                                                                                                                                                                                                                                                                                                                                                                                       (R.c2 * B.vz - R.c3 * B.vy + R.c7 * B.vx) * R.c1 + (-R.c1 * B.vz + R.c3 * B.vx + R.c7 * B.vy) * R.c2 + (R.c1 * B.vy - R.c2 * B.vx + R.c7 * B.vz) * R.c3 + (-R.c1 * B.vx - R.c2 * B.vy - R.c3 * B.vz) * R.c7 ] e1234

pga3dp regressive sandwich product mv_e * trivec -> mv_u_tmp_t:
mv_u_tmp_t:
[                                                    0 ] 1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) ] e1,
[  (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) ] e2,
[  (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) ] e3,
[              (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) ] e4,
[                                                    0 ] e41,
[                                                    0 ] e42,
[                                                    0 ] e43,
[                                                    0 ] e23,
[                                                    0 ] e31,
[                                                    0 ] e12,
[               (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) ] e423,
[              (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) ] e431,
[               (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) ] e412,
[ (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) ] e321,
[                                                    0 ] e1234

pga3dp regressive sandwich product mv_u_tmp_t * rrev(mv_e) -> mv_u_res_t:
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] 1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c7 - (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c3 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c2 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c4 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c0 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c6 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c5 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c1 ] e1,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c3 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c7 - (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c1 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c5 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c6 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c0 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c4 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c2 ] e2,
[ -(R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c2 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c1 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c7 + (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c6 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c5 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c4 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c0 - (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c3 ] e3,
[                                                                                                                                                                                                                                                       (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c7 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c1 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c2 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c3 ] e4,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e41,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e42,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e43,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e23,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e31,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e12,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c1 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c7 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c3 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c2 ] e423,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c2 + (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c3 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c7 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c1 ] e431,
[                                                                                                                                                                                                                                                      -(-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c3 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c2 + (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c1 + (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c7 ] e412,
[  (R.c0 * t.x + R.c1 * t.w + R.c5 * t.z - R.c6 * t.y) * R.c1 + (R.c0 * t.y + R.c2 * t.w - R.c4 * t.z + R.c6 * t.x) * R.c2 + (R.c0 * t.z + R.c3 * t.w + R.c4 * t.y - R.c5 * t.x) * R.c3 - (-R.c1 * t.x - R.c2 * t.y - R.c3 * t.z) * R.c0 - (R.c2 * t.z - R.c3 * t.y + R.c7 * t.x) * R.c4 - (-R.c1 * t.z + R.c3 * t.x + R.c7 * t.y) * R.c5 - (R.c1 * t.y - R.c2 * t.x + R.c7 * t.z) * R.c6 + (-R.c4 * t.x - R.c5 * t.y - R.c6 * t.z + R.c7 * t.w) * R.c7 ] e321,
[                                                                                                                                                                                                                                                                                                                                                                                                                                                     0 ] e1234

-------------------------------------------------------------------

